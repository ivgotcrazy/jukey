// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_group_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_group_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_group_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_group_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_group_2eproto;
namespace jukey {
namespace prot {
class GroupUser;
struct GroupUserDefaultTypeInternal;
extern GroupUserDefaultTypeInternal _GroupUser_default_instance_;
class JoinGroupNotify;
struct JoinGroupNotifyDefaultTypeInternal;
extern JoinGroupNotifyDefaultTypeInternal _JoinGroupNotify_default_instance_;
class JoinGroupReq;
struct JoinGroupReqDefaultTypeInternal;
extern JoinGroupReqDefaultTypeInternal _JoinGroupReq_default_instance_;
class JoinGroupRsp;
struct JoinGroupRspDefaultTypeInternal;
extern JoinGroupRspDefaultTypeInternal _JoinGroupRsp_default_instance_;
class LeaveGroupNotify;
struct LeaveGroupNotifyDefaultTypeInternal;
extern LeaveGroupNotifyDefaultTypeInternal _LeaveGroupNotify_default_instance_;
class LeaveGroupReq;
struct LeaveGroupReqDefaultTypeInternal;
extern LeaveGroupReqDefaultTypeInternal _LeaveGroupReq_default_instance_;
class LeaveGroupRsp;
struct LeaveGroupRspDefaultTypeInternal;
extern LeaveGroupRspDefaultTypeInternal _LeaveGroupRsp_default_instance_;
class MediaEntry;
struct MediaEntryDefaultTypeInternal;
extern MediaEntryDefaultTypeInternal _MediaEntry_default_instance_;
class MediaStateEntry;
struct MediaStateEntryDefaultTypeInternal;
extern MediaStateEntryDefaultTypeInternal _MediaStateEntry_default_instance_;
class PublishMediaAck;
struct PublishMediaAckDefaultTypeInternal;
extern PublishMediaAckDefaultTypeInternal _PublishMediaAck_default_instance_;
class PublishMediaNotify;
struct PublishMediaNotifyDefaultTypeInternal;
extern PublishMediaNotifyDefaultTypeInternal _PublishMediaNotify_default_instance_;
class PublishMediaReq;
struct PublishMediaReqDefaultTypeInternal;
extern PublishMediaReqDefaultTypeInternal _PublishMediaReq_default_instance_;
class PublishMediaRsp;
struct PublishMediaRspDefaultTypeInternal;
extern PublishMediaRspDefaultTypeInternal _PublishMediaRsp_default_instance_;
class UnpublishMediaAck;
struct UnpublishMediaAckDefaultTypeInternal;
extern UnpublishMediaAckDefaultTypeInternal _UnpublishMediaAck_default_instance_;
class UnpublishMediaNotify;
struct UnpublishMediaNotifyDefaultTypeInternal;
extern UnpublishMediaNotifyDefaultTypeInternal _UnpublishMediaNotify_default_instance_;
class UnpublishMediaReq;
struct UnpublishMediaReqDefaultTypeInternal;
extern UnpublishMediaReqDefaultTypeInternal _UnpublishMediaReq_default_instance_;
class UnpublishMediaRsp;
struct UnpublishMediaRspDefaultTypeInternal;
extern UnpublishMediaRspDefaultTypeInternal _UnpublishMediaRsp_default_instance_;
}  // namespace prot
}  // namespace jukey
PROTOBUF_NAMESPACE_OPEN
template<> ::jukey::prot::GroupUser* Arena::CreateMaybeMessage<::jukey::prot::GroupUser>(Arena*);
template<> ::jukey::prot::JoinGroupNotify* Arena::CreateMaybeMessage<::jukey::prot::JoinGroupNotify>(Arena*);
template<> ::jukey::prot::JoinGroupReq* Arena::CreateMaybeMessage<::jukey::prot::JoinGroupReq>(Arena*);
template<> ::jukey::prot::JoinGroupRsp* Arena::CreateMaybeMessage<::jukey::prot::JoinGroupRsp>(Arena*);
template<> ::jukey::prot::LeaveGroupNotify* Arena::CreateMaybeMessage<::jukey::prot::LeaveGroupNotify>(Arena*);
template<> ::jukey::prot::LeaveGroupReq* Arena::CreateMaybeMessage<::jukey::prot::LeaveGroupReq>(Arena*);
template<> ::jukey::prot::LeaveGroupRsp* Arena::CreateMaybeMessage<::jukey::prot::LeaveGroupRsp>(Arena*);
template<> ::jukey::prot::MediaEntry* Arena::CreateMaybeMessage<::jukey::prot::MediaEntry>(Arena*);
template<> ::jukey::prot::MediaStateEntry* Arena::CreateMaybeMessage<::jukey::prot::MediaStateEntry>(Arena*);
template<> ::jukey::prot::PublishMediaAck* Arena::CreateMaybeMessage<::jukey::prot::PublishMediaAck>(Arena*);
template<> ::jukey::prot::PublishMediaNotify* Arena::CreateMaybeMessage<::jukey::prot::PublishMediaNotify>(Arena*);
template<> ::jukey::prot::PublishMediaReq* Arena::CreateMaybeMessage<::jukey::prot::PublishMediaReq>(Arena*);
template<> ::jukey::prot::PublishMediaRsp* Arena::CreateMaybeMessage<::jukey::prot::PublishMediaRsp>(Arena*);
template<> ::jukey::prot::UnpublishMediaAck* Arena::CreateMaybeMessage<::jukey::prot::UnpublishMediaAck>(Arena*);
template<> ::jukey::prot::UnpublishMediaNotify* Arena::CreateMaybeMessage<::jukey::prot::UnpublishMediaNotify>(Arena*);
template<> ::jukey::prot::UnpublishMediaReq* Arena::CreateMaybeMessage<::jukey::prot::UnpublishMediaReq>(Arena*);
template<> ::jukey::prot::UnpublishMediaRsp* Arena::CreateMaybeMessage<::jukey::prot::UnpublishMediaRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jukey {
namespace prot {

// ===================================================================

class MediaEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.MediaEntry) */ {
 public:
  inline MediaEntry() : MediaEntry(nullptr) {}
  ~MediaEntry() override;
  explicit PROTOBUF_CONSTEXPR MediaEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaEntry(const MediaEntry& from);
  MediaEntry(MediaEntry&& from) noexcept
    : MediaEntry() {
    *this = ::std::move(from);
  }

  inline MediaEntry& operator=(const MediaEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaEntry& operator=(MediaEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaEntry* internal_default_instance() {
    return reinterpret_cast<const MediaEntry*>(
               &_MediaEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MediaEntry& a, MediaEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MediaEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MediaEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MediaEntry& from) {
    MediaEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.MediaEntry";
  }
  protected:
  explicit MediaEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 2,
    kMediaSrcIdFieldNumber = 4,
    kStreamTypeFieldNumber = 1,
    kMediaSrcTypeFieldNumber = 3,
  };
  // required string stream_id = 2;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  const std::string& stream_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stream_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* stream_id);
  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(const std::string& value);
  std::string* _internal_mutable_stream_id();
  public:

  // required string media_src_id = 4;
  bool has_media_src_id() const;
  private:
  bool _internal_has_media_src_id() const;
  public:
  void clear_media_src_id();
  const std::string& media_src_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_src_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_src_id();
  PROTOBUF_NODISCARD std::string* release_media_src_id();
  void set_allocated_media_src_id(std::string* media_src_id);
  private:
  const std::string& _internal_media_src_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_src_id(const std::string& value);
  std::string* _internal_mutable_media_src_id();
  public:

  // required uint32 stream_type = 1;
  bool has_stream_type() const;
  private:
  bool _internal_has_stream_type() const;
  public:
  void clear_stream_type();
  uint32_t stream_type() const;
  void set_stream_type(uint32_t value);
  private:
  uint32_t _internal_stream_type() const;
  void _internal_set_stream_type(uint32_t value);
  public:

  // required uint32 media_src_type = 3;
  bool has_media_src_type() const;
  private:
  bool _internal_has_media_src_type() const;
  public:
  void clear_media_src_type();
  uint32_t media_src_type() const;
  void set_media_src_type(uint32_t value);
  private:
  uint32_t _internal_media_src_type() const;
  void _internal_set_media_src_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.MediaEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_src_id_;
    uint32_t stream_type_;
    uint32_t media_src_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class JoinGroupReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.JoinGroupReq) */ {
 public:
  inline JoinGroupReq() : JoinGroupReq(nullptr) {}
  ~JoinGroupReq() override;
  explicit PROTOBUF_CONSTEXPR JoinGroupReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGroupReq(const JoinGroupReq& from);
  JoinGroupReq(JoinGroupReq&& from) noexcept
    : JoinGroupReq() {
    *this = ::std::move(from);
  }

  inline JoinGroupReq& operator=(const JoinGroupReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGroupReq& operator=(JoinGroupReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGroupReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGroupReq* internal_default_instance() {
    return reinterpret_cast<const JoinGroupReq*>(
               &_JoinGroupReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JoinGroupReq& a, JoinGroupReq& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGroupReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGroupReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGroupReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinGroupReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinGroupReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinGroupReq& from) {
    JoinGroupReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGroupReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.JoinGroupReq";
  }
  protected:
  explicit JoinGroupReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaEntriesFieldNumber = 7,
    kTokenFieldNumber = 6,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kLoginIdFieldNumber = 5,
  };
  // repeated .jukey.prot.MediaEntry media_entries = 7;
  int media_entries_size() const;
  private:
  int _internal_media_entries_size() const;
  public:
  void clear_media_entries();
  ::jukey::prot::MediaEntry* mutable_media_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaEntry >*
      mutable_media_entries();
  private:
  const ::jukey::prot::MediaEntry& _internal_media_entries(int index) const;
  ::jukey::prot::MediaEntry* _internal_add_media_entries();
  public:
  const ::jukey::prot::MediaEntry& media_entries(int index) const;
  ::jukey::prot::MediaEntry* add_media_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaEntry >&
      media_entries() const;

  // required string token = 6;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 login_id = 5;
  bool has_login_id() const;
  private:
  bool _internal_has_login_id() const;
  public:
  void clear_login_id();
  uint32_t login_id() const;
  void set_login_id(uint32_t value);
  private:
  uint32_t _internal_login_id() const;
  void _internal_set_login_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.JoinGroupReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaEntry > media_entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    uint32_t login_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class MediaStateEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.MediaStateEntry) */ {
 public:
  inline MediaStateEntry() : MediaStateEntry(nullptr) {}
  ~MediaStateEntry() override;
  explicit PROTOBUF_CONSTEXPR MediaStateEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaStateEntry(const MediaStateEntry& from);
  MediaStateEntry(MediaStateEntry&& from) noexcept
    : MediaStateEntry() {
    *this = ::std::move(from);
  }

  inline MediaStateEntry& operator=(const MediaStateEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaStateEntry& operator=(MediaStateEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaStateEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaStateEntry* internal_default_instance() {
    return reinterpret_cast<const MediaStateEntry*>(
               &_MediaStateEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MediaStateEntry& a, MediaStateEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaStateEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaStateEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MediaStateEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MediaStateEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaStateEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MediaStateEntry& from) {
    MediaStateEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaStateEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.MediaStateEntry";
  }
  protected:
  explicit MediaStateEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaEntryFieldNumber = 1,
    kMediaStateFieldNumber = 2,
  };
  // required .jukey.prot.MediaEntry media_entry = 1;
  bool has_media_entry() const;
  private:
  bool _internal_has_media_entry() const;
  public:
  void clear_media_entry();
  const ::jukey::prot::MediaEntry& media_entry() const;
  PROTOBUF_NODISCARD ::jukey::prot::MediaEntry* release_media_entry();
  ::jukey::prot::MediaEntry* mutable_media_entry();
  void set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry);
  private:
  const ::jukey::prot::MediaEntry& _internal_media_entry() const;
  ::jukey::prot::MediaEntry* _internal_mutable_media_entry();
  public:
  void unsafe_arena_set_allocated_media_entry(
      ::jukey::prot::MediaEntry* media_entry);
  ::jukey::prot::MediaEntry* unsafe_arena_release_media_entry();

  // required uint32 media_state = 2;
  bool has_media_state() const;
  private:
  bool _internal_has_media_state() const;
  public:
  void clear_media_state();
  uint32_t media_state() const;
  void set_media_state(uint32_t value);
  private:
  uint32_t _internal_media_state() const;
  void _internal_set_media_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.MediaStateEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::jukey::prot::MediaEntry* media_entry_;
    uint32_t media_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class GroupUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.GroupUser) */ {
 public:
  inline GroupUser() : GroupUser(nullptr) {}
  ~GroupUser() override;
  explicit PROTOBUF_CONSTEXPR GroupUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupUser(const GroupUser& from);
  GroupUser(GroupUser&& from) noexcept
    : GroupUser() {
    *this = ::std::move(from);
  }

  inline GroupUser& operator=(const GroupUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUser& operator=(GroupUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupUser* internal_default_instance() {
    return reinterpret_cast<const GroupUser*>(
               &_GroupUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupUser& a, GroupUser& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupUser& from) {
    GroupUser::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.GroupUser";
  }
  protected:
  explicit GroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaStateEntriesFieldNumber = 3,
    kUserTypeFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // repeated .jukey.prot.MediaStateEntry media_state_entries = 3;
  int media_state_entries_size() const;
  private:
  int _internal_media_state_entries_size() const;
  public:
  void clear_media_state_entries();
  ::jukey::prot::MediaStateEntry* mutable_media_state_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaStateEntry >*
      mutable_media_state_entries();
  private:
  const ::jukey::prot::MediaStateEntry& _internal_media_state_entries(int index) const;
  ::jukey::prot::MediaStateEntry* _internal_add_media_state_entries();
  public:
  const ::jukey::prot::MediaStateEntry& media_state_entries(int index) const;
  ::jukey::prot::MediaStateEntry* add_media_state_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaStateEntry >&
      media_state_entries() const;

  // required uint32 user_type = 1;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.GroupUser)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaStateEntry > media_state_entries_;
    uint32_t user_type_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class JoinGroupRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.JoinGroupRsp) */ {
 public:
  inline JoinGroupRsp() : JoinGroupRsp(nullptr) {}
  ~JoinGroupRsp() override;
  explicit PROTOBUF_CONSTEXPR JoinGroupRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGroupRsp(const JoinGroupRsp& from);
  JoinGroupRsp(JoinGroupRsp&& from) noexcept
    : JoinGroupRsp() {
    *this = ::std::move(from);
  }

  inline JoinGroupRsp& operator=(const JoinGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGroupRsp& operator=(JoinGroupRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGroupRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGroupRsp* internal_default_instance() {
    return reinterpret_cast<const JoinGroupRsp*>(
               &_JoinGroupRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JoinGroupRsp& a, JoinGroupRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGroupRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGroupRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGroupRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinGroupRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinGroupRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinGroupRsp& from) {
    JoinGroupRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGroupRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.JoinGroupRsp";
  }
  protected:
  explicit JoinGroupRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupUsersFieldNumber = 6,
    kMsgFieldNumber = 8,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kLoginIdFieldNumber = 5,
    kResultFieldNumber = 7,
  };
  // repeated .jukey.prot.GroupUser group_users = 6;
  int group_users_size() const;
  private:
  int _internal_group_users_size() const;
  public:
  void clear_group_users();
  ::jukey::prot::GroupUser* mutable_group_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::GroupUser >*
      mutable_group_users();
  private:
  const ::jukey::prot::GroupUser& _internal_group_users(int index) const;
  ::jukey::prot::GroupUser* _internal_add_group_users();
  public:
  const ::jukey::prot::GroupUser& group_users(int index) const;
  ::jukey::prot::GroupUser* add_group_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::GroupUser >&
      group_users() const;

  // required string msg = 8;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 login_id = 5;
  bool has_login_id() const;
  private:
  bool _internal_has_login_id() const;
  public:
  void clear_login_id();
  uint32_t login_id() const;
  void set_login_id(uint32_t value);
  private:
  uint32_t _internal_login_id() const;
  void _internal_set_login_id(uint32_t value);
  public:

  // required uint32 result = 7;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.JoinGroupRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::GroupUser > group_users_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    uint32_t login_id_;
    uint32_t result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class JoinGroupNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.JoinGroupNotify) */ {
 public:
  inline JoinGroupNotify() : JoinGroupNotify(nullptr) {}
  ~JoinGroupNotify() override;
  explicit PROTOBUF_CONSTEXPR JoinGroupNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGroupNotify(const JoinGroupNotify& from);
  JoinGroupNotify(JoinGroupNotify&& from) noexcept
    : JoinGroupNotify() {
    *this = ::std::move(from);
  }

  inline JoinGroupNotify& operator=(const JoinGroupNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGroupNotify& operator=(JoinGroupNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGroupNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGroupNotify* internal_default_instance() {
    return reinterpret_cast<const JoinGroupNotify*>(
               &_JoinGroupNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JoinGroupNotify& a, JoinGroupNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGroupNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGroupNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGroupNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinGroupNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinGroupNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinGroupNotify& from) {
    JoinGroupNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGroupNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.JoinGroupNotify";
  }
  protected:
  explicit JoinGroupNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaEntriesFieldNumber = 5,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // repeated .jukey.prot.MediaEntry media_entries = 5;
  int media_entries_size() const;
  private:
  int _internal_media_entries_size() const;
  public:
  void clear_media_entries();
  ::jukey::prot::MediaEntry* mutable_media_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaEntry >*
      mutable_media_entries();
  private:
  const ::jukey::prot::MediaEntry& _internal_media_entries(int index) const;
  ::jukey::prot::MediaEntry* _internal_add_media_entries();
  public:
  const ::jukey::prot::MediaEntry& media_entries(int index) const;
  ::jukey::prot::MediaEntry* add_media_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaEntry >&
      media_entries() const;

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.JoinGroupNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaEntry > media_entries_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class LeaveGroupReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.LeaveGroupReq) */ {
 public:
  inline LeaveGroupReq() : LeaveGroupReq(nullptr) {}
  ~LeaveGroupReq() override;
  explicit PROTOBUF_CONSTEXPR LeaveGroupReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveGroupReq(const LeaveGroupReq& from);
  LeaveGroupReq(LeaveGroupReq&& from) noexcept
    : LeaveGroupReq() {
    *this = ::std::move(from);
  }

  inline LeaveGroupReq& operator=(const LeaveGroupReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveGroupReq& operator=(LeaveGroupReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveGroupReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveGroupReq* internal_default_instance() {
    return reinterpret_cast<const LeaveGroupReq*>(
               &_LeaveGroupReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LeaveGroupReq& a, LeaveGroupReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveGroupReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveGroupReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveGroupReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveGroupReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaveGroupReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaveGroupReq& from) {
    LeaveGroupReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveGroupReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.LeaveGroupReq";
  }
  protected:
  explicit LeaveGroupReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 6,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kLoginIdFieldNumber = 5,
  };
  // required string token = 6;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 login_id = 5;
  bool has_login_id() const;
  private:
  bool _internal_has_login_id() const;
  public:
  void clear_login_id();
  uint32_t login_id() const;
  void set_login_id(uint32_t value);
  private:
  uint32_t _internal_login_id() const;
  void _internal_set_login_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.LeaveGroupReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    uint32_t login_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class LeaveGroupRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.LeaveGroupRsp) */ {
 public:
  inline LeaveGroupRsp() : LeaveGroupRsp(nullptr) {}
  ~LeaveGroupRsp() override;
  explicit PROTOBUF_CONSTEXPR LeaveGroupRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveGroupRsp(const LeaveGroupRsp& from);
  LeaveGroupRsp(LeaveGroupRsp&& from) noexcept
    : LeaveGroupRsp() {
    *this = ::std::move(from);
  }

  inline LeaveGroupRsp& operator=(const LeaveGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveGroupRsp& operator=(LeaveGroupRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveGroupRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveGroupRsp* internal_default_instance() {
    return reinterpret_cast<const LeaveGroupRsp*>(
               &_LeaveGroupRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LeaveGroupRsp& a, LeaveGroupRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveGroupRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveGroupRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveGroupRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveGroupRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaveGroupRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaveGroupRsp& from) {
    LeaveGroupRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveGroupRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.LeaveGroupRsp";
  }
  protected:
  explicit LeaveGroupRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 7,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kLoginIdFieldNumber = 5,
    kResultFieldNumber = 6,
  };
  // required string msg = 7;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 login_id = 5;
  bool has_login_id() const;
  private:
  bool _internal_has_login_id() const;
  public:
  void clear_login_id();
  uint32_t login_id() const;
  void set_login_id(uint32_t value);
  private:
  uint32_t _internal_login_id() const;
  void _internal_set_login_id(uint32_t value);
  public:

  // required uint32 result = 6;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.LeaveGroupRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    uint32_t login_id_;
    uint32_t result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class LeaveGroupNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.LeaveGroupNotify) */ {
 public:
  inline LeaveGroupNotify() : LeaveGroupNotify(nullptr) {}
  ~LeaveGroupNotify() override;
  explicit PROTOBUF_CONSTEXPR LeaveGroupNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveGroupNotify(const LeaveGroupNotify& from);
  LeaveGroupNotify(LeaveGroupNotify&& from) noexcept
    : LeaveGroupNotify() {
    *this = ::std::move(from);
  }

  inline LeaveGroupNotify& operator=(const LeaveGroupNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveGroupNotify& operator=(LeaveGroupNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveGroupNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveGroupNotify* internal_default_instance() {
    return reinterpret_cast<const LeaveGroupNotify*>(
               &_LeaveGroupNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LeaveGroupNotify& a, LeaveGroupNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveGroupNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveGroupNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveGroupNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveGroupNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaveGroupNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaveGroupNotify& from) {
    LeaveGroupNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveGroupNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.LeaveGroupNotify";
  }
  protected:
  explicit LeaveGroupNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.LeaveGroupNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class PublishMediaReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.PublishMediaReq) */ {
 public:
  inline PublishMediaReq() : PublishMediaReq(nullptr) {}
  ~PublishMediaReq() override;
  explicit PROTOBUF_CONSTEXPR PublishMediaReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishMediaReq(const PublishMediaReq& from);
  PublishMediaReq(PublishMediaReq&& from) noexcept
    : PublishMediaReq() {
    *this = ::std::move(from);
  }

  inline PublishMediaReq& operator=(const PublishMediaReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishMediaReq& operator=(PublishMediaReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishMediaReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishMediaReq* internal_default_instance() {
    return reinterpret_cast<const PublishMediaReq*>(
               &_PublishMediaReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PublishMediaReq& a, PublishMediaReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishMediaReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishMediaReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishMediaReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishMediaReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishMediaReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublishMediaReq& from) {
    PublishMediaReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMediaReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.PublishMediaReq";
  }
  protected:
  explicit PublishMediaReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaEntryFieldNumber = 6,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kLoginIdFieldNumber = 5,
  };
  // required .jukey.prot.MediaEntry media_entry = 6;
  bool has_media_entry() const;
  private:
  bool _internal_has_media_entry() const;
  public:
  void clear_media_entry();
  const ::jukey::prot::MediaEntry& media_entry() const;
  PROTOBUF_NODISCARD ::jukey::prot::MediaEntry* release_media_entry();
  ::jukey::prot::MediaEntry* mutable_media_entry();
  void set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry);
  private:
  const ::jukey::prot::MediaEntry& _internal_media_entry() const;
  ::jukey::prot::MediaEntry* _internal_mutable_media_entry();
  public:
  void unsafe_arena_set_allocated_media_entry(
      ::jukey::prot::MediaEntry* media_entry);
  ::jukey::prot::MediaEntry* unsafe_arena_release_media_entry();

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 login_id = 5;
  bool has_login_id() const;
  private:
  bool _internal_has_login_id() const;
  public:
  void clear_login_id();
  uint32_t login_id() const;
  void set_login_id(uint32_t value);
  private:
  uint32_t _internal_login_id() const;
  void _internal_set_login_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.PublishMediaReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::jukey::prot::MediaEntry* media_entry_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    uint32_t login_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class PublishMediaRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.PublishMediaRsp) */ {
 public:
  inline PublishMediaRsp() : PublishMediaRsp(nullptr) {}
  ~PublishMediaRsp() override;
  explicit PROTOBUF_CONSTEXPR PublishMediaRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishMediaRsp(const PublishMediaRsp& from);
  PublishMediaRsp(PublishMediaRsp&& from) noexcept
    : PublishMediaRsp() {
    *this = ::std::move(from);
  }

  inline PublishMediaRsp& operator=(const PublishMediaRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishMediaRsp& operator=(PublishMediaRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishMediaRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishMediaRsp* internal_default_instance() {
    return reinterpret_cast<const PublishMediaRsp*>(
               &_PublishMediaRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PublishMediaRsp& a, PublishMediaRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishMediaRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishMediaRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishMediaRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishMediaRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishMediaRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublishMediaRsp& from) {
    PublishMediaRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMediaRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.PublishMediaRsp";
  }
  protected:
  explicit PublishMediaRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 8,
    kMediaEntryFieldNumber = 6,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kLoginIdFieldNumber = 5,
    kResultFieldNumber = 7,
  };
  // required string msg = 8;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // required .jukey.prot.MediaEntry media_entry = 6;
  bool has_media_entry() const;
  private:
  bool _internal_has_media_entry() const;
  public:
  void clear_media_entry();
  const ::jukey::prot::MediaEntry& media_entry() const;
  PROTOBUF_NODISCARD ::jukey::prot::MediaEntry* release_media_entry();
  ::jukey::prot::MediaEntry* mutable_media_entry();
  void set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry);
  private:
  const ::jukey::prot::MediaEntry& _internal_media_entry() const;
  ::jukey::prot::MediaEntry* _internal_mutable_media_entry();
  public:
  void unsafe_arena_set_allocated_media_entry(
      ::jukey::prot::MediaEntry* media_entry);
  ::jukey::prot::MediaEntry* unsafe_arena_release_media_entry();

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 login_id = 5;
  bool has_login_id() const;
  private:
  bool _internal_has_login_id() const;
  public:
  void clear_login_id();
  uint32_t login_id() const;
  void set_login_id(uint32_t value);
  private:
  uint32_t _internal_login_id() const;
  void _internal_set_login_id(uint32_t value);
  public:

  // required uint32 result = 7;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.PublishMediaRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::jukey::prot::MediaEntry* media_entry_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    uint32_t login_id_;
    uint32_t result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class PublishMediaNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.PublishMediaNotify) */ {
 public:
  inline PublishMediaNotify() : PublishMediaNotify(nullptr) {}
  ~PublishMediaNotify() override;
  explicit PROTOBUF_CONSTEXPR PublishMediaNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishMediaNotify(const PublishMediaNotify& from);
  PublishMediaNotify(PublishMediaNotify&& from) noexcept
    : PublishMediaNotify() {
    *this = ::std::move(from);
  }

  inline PublishMediaNotify& operator=(const PublishMediaNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishMediaNotify& operator=(PublishMediaNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishMediaNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishMediaNotify* internal_default_instance() {
    return reinterpret_cast<const PublishMediaNotify*>(
               &_PublishMediaNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PublishMediaNotify& a, PublishMediaNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishMediaNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishMediaNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishMediaNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishMediaNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishMediaNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublishMediaNotify& from) {
    PublishMediaNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMediaNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.PublishMediaNotify";
  }
  protected:
  explicit PublishMediaNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaEntryFieldNumber = 5,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kNeedAckFieldNumber = 6,
  };
  // required .jukey.prot.MediaEntry media_entry = 5;
  bool has_media_entry() const;
  private:
  bool _internal_has_media_entry() const;
  public:
  void clear_media_entry();
  const ::jukey::prot::MediaEntry& media_entry() const;
  PROTOBUF_NODISCARD ::jukey::prot::MediaEntry* release_media_entry();
  ::jukey::prot::MediaEntry* mutable_media_entry();
  void set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry);
  private:
  const ::jukey::prot::MediaEntry& _internal_media_entry() const;
  ::jukey::prot::MediaEntry* _internal_mutable_media_entry();
  public:
  void unsafe_arena_set_allocated_media_entry(
      ::jukey::prot::MediaEntry* media_entry);
  ::jukey::prot::MediaEntry* unsafe_arena_release_media_entry();

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required bool need_ack = 6;
  bool has_need_ack() const;
  private:
  bool _internal_has_need_ack() const;
  public:
  void clear_need_ack();
  bool need_ack() const;
  void set_need_ack(bool value);
  private:
  bool _internal_need_ack() const;
  void _internal_set_need_ack(bool value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.PublishMediaNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::jukey::prot::MediaEntry* media_entry_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    bool need_ack_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class PublishMediaAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.PublishMediaAck) */ {
 public:
  inline PublishMediaAck() : PublishMediaAck(nullptr) {}
  ~PublishMediaAck() override;
  explicit PROTOBUF_CONSTEXPR PublishMediaAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishMediaAck(const PublishMediaAck& from);
  PublishMediaAck(PublishMediaAck&& from) noexcept
    : PublishMediaAck() {
    *this = ::std::move(from);
  }

  inline PublishMediaAck& operator=(const PublishMediaAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishMediaAck& operator=(PublishMediaAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishMediaAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishMediaAck* internal_default_instance() {
    return reinterpret_cast<const PublishMediaAck*>(
               &_PublishMediaAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PublishMediaAck& a, PublishMediaAck& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishMediaAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishMediaAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishMediaAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishMediaAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishMediaAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublishMediaAck& from) {
    PublishMediaAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMediaAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.PublishMediaAck";
  }
  protected:
  explicit PublishMediaAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaEntryFieldNumber = 5,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kAckUserIdFieldNumber = 6,
    kAckUserTypeFieldNumber = 7,
  };
  // required .jukey.prot.MediaEntry media_entry = 5;
  bool has_media_entry() const;
  private:
  bool _internal_has_media_entry() const;
  public:
  void clear_media_entry();
  const ::jukey::prot::MediaEntry& media_entry() const;
  PROTOBUF_NODISCARD ::jukey::prot::MediaEntry* release_media_entry();
  ::jukey::prot::MediaEntry* mutable_media_entry();
  void set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry);
  private:
  const ::jukey::prot::MediaEntry& _internal_media_entry() const;
  ::jukey::prot::MediaEntry* _internal_mutable_media_entry();
  public:
  void unsafe_arena_set_allocated_media_entry(
      ::jukey::prot::MediaEntry* media_entry);
  ::jukey::prot::MediaEntry* unsafe_arena_release_media_entry();

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 ack_user_id = 6;
  bool has_ack_user_id() const;
  private:
  bool _internal_has_ack_user_id() const;
  public:
  void clear_ack_user_id();
  uint32_t ack_user_id() const;
  void set_ack_user_id(uint32_t value);
  private:
  uint32_t _internal_ack_user_id() const;
  void _internal_set_ack_user_id(uint32_t value);
  public:

  // required uint32 ack_user_type = 7;
  bool has_ack_user_type() const;
  private:
  bool _internal_has_ack_user_type() const;
  public:
  void clear_ack_user_type();
  uint32_t ack_user_type() const;
  void set_ack_user_type(uint32_t value);
  private:
  uint32_t _internal_ack_user_type() const;
  void _internal_set_ack_user_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.PublishMediaAck)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::jukey::prot::MediaEntry* media_entry_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    uint32_t ack_user_id_;
    uint32_t ack_user_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class UnpublishMediaReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.UnpublishMediaReq) */ {
 public:
  inline UnpublishMediaReq() : UnpublishMediaReq(nullptr) {}
  ~UnpublishMediaReq() override;
  explicit PROTOBUF_CONSTEXPR UnpublishMediaReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnpublishMediaReq(const UnpublishMediaReq& from);
  UnpublishMediaReq(UnpublishMediaReq&& from) noexcept
    : UnpublishMediaReq() {
    *this = ::std::move(from);
  }

  inline UnpublishMediaReq& operator=(const UnpublishMediaReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnpublishMediaReq& operator=(UnpublishMediaReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnpublishMediaReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnpublishMediaReq* internal_default_instance() {
    return reinterpret_cast<const UnpublishMediaReq*>(
               &_UnpublishMediaReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UnpublishMediaReq& a, UnpublishMediaReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UnpublishMediaReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnpublishMediaReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnpublishMediaReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnpublishMediaReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnpublishMediaReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnpublishMediaReq& from) {
    UnpublishMediaReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnpublishMediaReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.UnpublishMediaReq";
  }
  protected:
  explicit UnpublishMediaReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaEntryFieldNumber = 6,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kLoginIdFieldNumber = 5,
  };
  // required .jukey.prot.MediaEntry media_entry = 6;
  bool has_media_entry() const;
  private:
  bool _internal_has_media_entry() const;
  public:
  void clear_media_entry();
  const ::jukey::prot::MediaEntry& media_entry() const;
  PROTOBUF_NODISCARD ::jukey::prot::MediaEntry* release_media_entry();
  ::jukey::prot::MediaEntry* mutable_media_entry();
  void set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry);
  private:
  const ::jukey::prot::MediaEntry& _internal_media_entry() const;
  ::jukey::prot::MediaEntry* _internal_mutable_media_entry();
  public:
  void unsafe_arena_set_allocated_media_entry(
      ::jukey::prot::MediaEntry* media_entry);
  ::jukey::prot::MediaEntry* unsafe_arena_release_media_entry();

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 login_id = 5;
  bool has_login_id() const;
  private:
  bool _internal_has_login_id() const;
  public:
  void clear_login_id();
  uint32_t login_id() const;
  void set_login_id(uint32_t value);
  private:
  uint32_t _internal_login_id() const;
  void _internal_set_login_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.UnpublishMediaReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::jukey::prot::MediaEntry* media_entry_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    uint32_t login_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class UnpublishMediaRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.UnpublishMediaRsp) */ {
 public:
  inline UnpublishMediaRsp() : UnpublishMediaRsp(nullptr) {}
  ~UnpublishMediaRsp() override;
  explicit PROTOBUF_CONSTEXPR UnpublishMediaRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnpublishMediaRsp(const UnpublishMediaRsp& from);
  UnpublishMediaRsp(UnpublishMediaRsp&& from) noexcept
    : UnpublishMediaRsp() {
    *this = ::std::move(from);
  }

  inline UnpublishMediaRsp& operator=(const UnpublishMediaRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnpublishMediaRsp& operator=(UnpublishMediaRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnpublishMediaRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnpublishMediaRsp* internal_default_instance() {
    return reinterpret_cast<const UnpublishMediaRsp*>(
               &_UnpublishMediaRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UnpublishMediaRsp& a, UnpublishMediaRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(UnpublishMediaRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnpublishMediaRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnpublishMediaRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnpublishMediaRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnpublishMediaRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnpublishMediaRsp& from) {
    UnpublishMediaRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnpublishMediaRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.UnpublishMediaRsp";
  }
  protected:
  explicit UnpublishMediaRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 8,
    kMediaEntryFieldNumber = 6,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kLoginIdFieldNumber = 5,
    kResultFieldNumber = 7,
  };
  // required string msg = 8;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // required .jukey.prot.MediaEntry media_entry = 6;
  bool has_media_entry() const;
  private:
  bool _internal_has_media_entry() const;
  public:
  void clear_media_entry();
  const ::jukey::prot::MediaEntry& media_entry() const;
  PROTOBUF_NODISCARD ::jukey::prot::MediaEntry* release_media_entry();
  ::jukey::prot::MediaEntry* mutable_media_entry();
  void set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry);
  private:
  const ::jukey::prot::MediaEntry& _internal_media_entry() const;
  ::jukey::prot::MediaEntry* _internal_mutable_media_entry();
  public:
  void unsafe_arena_set_allocated_media_entry(
      ::jukey::prot::MediaEntry* media_entry);
  ::jukey::prot::MediaEntry* unsafe_arena_release_media_entry();

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 login_id = 5;
  bool has_login_id() const;
  private:
  bool _internal_has_login_id() const;
  public:
  void clear_login_id();
  uint32_t login_id() const;
  void set_login_id(uint32_t value);
  private:
  uint32_t _internal_login_id() const;
  void _internal_set_login_id(uint32_t value);
  public:

  // required uint32 result = 7;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.UnpublishMediaRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::jukey::prot::MediaEntry* media_entry_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    uint32_t login_id_;
    uint32_t result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class UnpublishMediaNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.UnpublishMediaNotify) */ {
 public:
  inline UnpublishMediaNotify() : UnpublishMediaNotify(nullptr) {}
  ~UnpublishMediaNotify() override;
  explicit PROTOBUF_CONSTEXPR UnpublishMediaNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnpublishMediaNotify(const UnpublishMediaNotify& from);
  UnpublishMediaNotify(UnpublishMediaNotify&& from) noexcept
    : UnpublishMediaNotify() {
    *this = ::std::move(from);
  }

  inline UnpublishMediaNotify& operator=(const UnpublishMediaNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnpublishMediaNotify& operator=(UnpublishMediaNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnpublishMediaNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnpublishMediaNotify* internal_default_instance() {
    return reinterpret_cast<const UnpublishMediaNotify*>(
               &_UnpublishMediaNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UnpublishMediaNotify& a, UnpublishMediaNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(UnpublishMediaNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnpublishMediaNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnpublishMediaNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnpublishMediaNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnpublishMediaNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnpublishMediaNotify& from) {
    UnpublishMediaNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnpublishMediaNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.UnpublishMediaNotify";
  }
  protected:
  explicit UnpublishMediaNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaEntryFieldNumber = 5,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kNeedAckFieldNumber = 6,
  };
  // required .jukey.prot.MediaEntry media_entry = 5;
  bool has_media_entry() const;
  private:
  bool _internal_has_media_entry() const;
  public:
  void clear_media_entry();
  const ::jukey::prot::MediaEntry& media_entry() const;
  PROTOBUF_NODISCARD ::jukey::prot::MediaEntry* release_media_entry();
  ::jukey::prot::MediaEntry* mutable_media_entry();
  void set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry);
  private:
  const ::jukey::prot::MediaEntry& _internal_media_entry() const;
  ::jukey::prot::MediaEntry* _internal_mutable_media_entry();
  public:
  void unsafe_arena_set_allocated_media_entry(
      ::jukey::prot::MediaEntry* media_entry);
  ::jukey::prot::MediaEntry* unsafe_arena_release_media_entry();

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required bool need_ack = 6;
  bool has_need_ack() const;
  private:
  bool _internal_has_need_ack() const;
  public:
  void clear_need_ack();
  bool need_ack() const;
  void set_need_ack(bool value);
  private:
  bool _internal_need_ack() const;
  void _internal_set_need_ack(bool value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.UnpublishMediaNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::jukey::prot::MediaEntry* media_entry_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    bool need_ack_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class UnpublishMediaAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jukey.prot.UnpublishMediaAck) */ {
 public:
  inline UnpublishMediaAck() : UnpublishMediaAck(nullptr) {}
  ~UnpublishMediaAck() override;
  explicit PROTOBUF_CONSTEXPR UnpublishMediaAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnpublishMediaAck(const UnpublishMediaAck& from);
  UnpublishMediaAck(UnpublishMediaAck&& from) noexcept
    : UnpublishMediaAck() {
    *this = ::std::move(from);
  }

  inline UnpublishMediaAck& operator=(const UnpublishMediaAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnpublishMediaAck& operator=(UnpublishMediaAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnpublishMediaAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnpublishMediaAck* internal_default_instance() {
    return reinterpret_cast<const UnpublishMediaAck*>(
               &_UnpublishMediaAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UnpublishMediaAck& a, UnpublishMediaAck& b) {
    a.Swap(&b);
  }
  inline void Swap(UnpublishMediaAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnpublishMediaAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnpublishMediaAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnpublishMediaAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnpublishMediaAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnpublishMediaAck& from) {
    UnpublishMediaAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnpublishMediaAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jukey.prot.UnpublishMediaAck";
  }
  protected:
  explicit UnpublishMediaAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaEntryFieldNumber = 5,
    kAppIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kAckUserIdFieldNumber = 6,
    kAckUserTypeFieldNumber = 7,
  };
  // required .jukey.prot.MediaEntry media_entry = 5;
  bool has_media_entry() const;
  private:
  bool _internal_has_media_entry() const;
  public:
  void clear_media_entry();
  const ::jukey::prot::MediaEntry& media_entry() const;
  PROTOBUF_NODISCARD ::jukey::prot::MediaEntry* release_media_entry();
  ::jukey::prot::MediaEntry* mutable_media_entry();
  void set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry);
  private:
  const ::jukey::prot::MediaEntry& _internal_media_entry() const;
  ::jukey::prot::MediaEntry* _internal_mutable_media_entry();
  public:
  void unsafe_arena_set_allocated_media_entry(
      ::jukey::prot::MediaEntry* media_entry);
  ::jukey::prot::MediaEntry* unsafe_arena_release_media_entry();

  // required uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 user_type = 3;
  bool has_user_type() const;
  private:
  bool _internal_has_user_type() const;
  public:
  void clear_user_type();
  uint32_t user_type() const;
  void set_user_type(uint32_t value);
  private:
  uint32_t _internal_user_type() const;
  void _internal_set_user_type(uint32_t value);
  public:

  // required uint32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 ack_user_id = 6;
  bool has_ack_user_id() const;
  private:
  bool _internal_has_ack_user_id() const;
  public:
  void clear_ack_user_id();
  uint32_t ack_user_id() const;
  void set_ack_user_id(uint32_t value);
  private:
  uint32_t _internal_ack_user_id() const;
  void _internal_set_ack_user_id(uint32_t value);
  public:

  // required uint32 ack_user_type = 7;
  bool has_ack_user_type() const;
  private:
  bool _internal_has_ack_user_type() const;
  public:
  void clear_ack_user_type();
  uint32_t ack_user_type() const;
  void set_ack_user_type(uint32_t value);
  private:
  uint32_t _internal_ack_user_type() const;
  void _internal_set_ack_user_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:jukey.prot.UnpublishMediaAck)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::jukey::prot::MediaEntry* media_entry_;
    uint32_t app_id_;
    uint32_t group_id_;
    uint32_t user_type_;
    uint32_t user_id_;
    uint32_t ack_user_id_;
    uint32_t ack_user_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_group_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MediaEntry

// required uint32 stream_type = 1;
inline bool MediaEntry::_internal_has_stream_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MediaEntry::has_stream_type() const {
  return _internal_has_stream_type();
}
inline void MediaEntry::clear_stream_type() {
  _impl_.stream_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t MediaEntry::_internal_stream_type() const {
  return _impl_.stream_type_;
}
inline uint32_t MediaEntry::stream_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.MediaEntry.stream_type)
  return _internal_stream_type();
}
inline void MediaEntry::_internal_set_stream_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.stream_type_ = value;
}
inline void MediaEntry::set_stream_type(uint32_t value) {
  _internal_set_stream_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.MediaEntry.stream_type)
}

// required string stream_id = 2;
inline bool MediaEntry::_internal_has_stream_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MediaEntry::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void MediaEntry::clear_stream_id() {
  _impl_.stream_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MediaEntry::stream_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.MediaEntry.stream_id)
  return _internal_stream_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MediaEntry::set_stream_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.stream_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jukey.prot.MediaEntry.stream_id)
}
inline std::string* MediaEntry::mutable_stream_id() {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:jukey.prot.MediaEntry.stream_id)
  return _s;
}
inline const std::string& MediaEntry::_internal_stream_id() const {
  return _impl_.stream_id_.Get();
}
inline void MediaEntry::_internal_set_stream_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MediaEntry::_internal_mutable_stream_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stream_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MediaEntry::release_stream_id() {
  // @@protoc_insertion_point(field_release:jukey.prot.MediaEntry.stream_id)
  if (!_internal_has_stream_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.stream_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MediaEntry::set_allocated_stream_id(std::string* stream_id) {
  if (stream_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stream_id_.SetAllocated(stream_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.MediaEntry.stream_id)
}

// required uint32 media_src_type = 3;
inline bool MediaEntry::_internal_has_media_src_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MediaEntry::has_media_src_type() const {
  return _internal_has_media_src_type();
}
inline void MediaEntry::clear_media_src_type() {
  _impl_.media_src_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t MediaEntry::_internal_media_src_type() const {
  return _impl_.media_src_type_;
}
inline uint32_t MediaEntry::media_src_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.MediaEntry.media_src_type)
  return _internal_media_src_type();
}
inline void MediaEntry::_internal_set_media_src_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.media_src_type_ = value;
}
inline void MediaEntry::set_media_src_type(uint32_t value) {
  _internal_set_media_src_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.MediaEntry.media_src_type)
}

// required string media_src_id = 4;
inline bool MediaEntry::_internal_has_media_src_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MediaEntry::has_media_src_id() const {
  return _internal_has_media_src_id();
}
inline void MediaEntry::clear_media_src_id() {
  _impl_.media_src_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MediaEntry::media_src_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.MediaEntry.media_src_id)
  return _internal_media_src_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MediaEntry::set_media_src_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.media_src_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jukey.prot.MediaEntry.media_src_id)
}
inline std::string* MediaEntry::mutable_media_src_id() {
  std::string* _s = _internal_mutable_media_src_id();
  // @@protoc_insertion_point(field_mutable:jukey.prot.MediaEntry.media_src_id)
  return _s;
}
inline const std::string& MediaEntry::_internal_media_src_id() const {
  return _impl_.media_src_id_.Get();
}
inline void MediaEntry::_internal_set_media_src_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.media_src_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MediaEntry::_internal_mutable_media_src_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.media_src_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MediaEntry::release_media_src_id() {
  // @@protoc_insertion_point(field_release:jukey.prot.MediaEntry.media_src_id)
  if (!_internal_has_media_src_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.media_src_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_src_id_.IsDefault()) {
    _impl_.media_src_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MediaEntry::set_allocated_media_src_id(std::string* media_src_id) {
  if (media_src_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.media_src_id_.SetAllocated(media_src_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.media_src_id_.IsDefault()) {
    _impl_.media_src_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.MediaEntry.media_src_id)
}

// -------------------------------------------------------------------

// JoinGroupReq

// required uint32 app_id = 1;
inline bool JoinGroupReq::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool JoinGroupReq::has_app_id() const {
  return _internal_has_app_id();
}
inline void JoinGroupReq::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t JoinGroupReq::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t JoinGroupReq::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupReq.app_id)
  return _internal_app_id();
}
inline void JoinGroupReq::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void JoinGroupReq::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupReq.app_id)
}

// required uint32 group_id = 2;
inline bool JoinGroupReq::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool JoinGroupReq::has_group_id() const {
  return _internal_has_group_id();
}
inline void JoinGroupReq::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t JoinGroupReq::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t JoinGroupReq::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupReq.group_id)
  return _internal_group_id();
}
inline void JoinGroupReq::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void JoinGroupReq::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupReq.group_id)
}

// required uint32 user_type = 3;
inline bool JoinGroupReq::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool JoinGroupReq::has_user_type() const {
  return _internal_has_user_type();
}
inline void JoinGroupReq::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t JoinGroupReq::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t JoinGroupReq::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupReq.user_type)
  return _internal_user_type();
}
inline void JoinGroupReq::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_type_ = value;
}
inline void JoinGroupReq::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupReq.user_type)
}

// required uint32 user_id = 4;
inline bool JoinGroupReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool JoinGroupReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void JoinGroupReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t JoinGroupReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t JoinGroupReq::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupReq.user_id)
  return _internal_user_id();
}
inline void JoinGroupReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_id_ = value;
}
inline void JoinGroupReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupReq.user_id)
}

// required uint32 login_id = 5;
inline bool JoinGroupReq::_internal_has_login_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool JoinGroupReq::has_login_id() const {
  return _internal_has_login_id();
}
inline void JoinGroupReq::clear_login_id() {
  _impl_.login_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t JoinGroupReq::_internal_login_id() const {
  return _impl_.login_id_;
}
inline uint32_t JoinGroupReq::login_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupReq.login_id)
  return _internal_login_id();
}
inline void JoinGroupReq::_internal_set_login_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.login_id_ = value;
}
inline void JoinGroupReq::set_login_id(uint32_t value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupReq.login_id)
}

// required string token = 6;
inline bool JoinGroupReq::_internal_has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JoinGroupReq::has_token() const {
  return _internal_has_token();
}
inline void JoinGroupReq::clear_token() {
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinGroupReq::token() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupReq.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinGroupReq::set_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupReq.token)
}
inline std::string* JoinGroupReq::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:jukey.prot.JoinGroupReq.token)
  return _s;
}
inline const std::string& JoinGroupReq::_internal_token() const {
  return _impl_.token_.Get();
}
inline void JoinGroupReq::_internal_set_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinGroupReq::_internal_mutable_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinGroupReq::release_token() {
  // @@protoc_insertion_point(field_release:jukey.prot.JoinGroupReq.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void JoinGroupReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.JoinGroupReq.token)
}

// repeated .jukey.prot.MediaEntry media_entries = 7;
inline int JoinGroupReq::_internal_media_entries_size() const {
  return _impl_.media_entries_.size();
}
inline int JoinGroupReq::media_entries_size() const {
  return _internal_media_entries_size();
}
inline void JoinGroupReq::clear_media_entries() {
  _impl_.media_entries_.Clear();
}
inline ::jukey::prot::MediaEntry* JoinGroupReq::mutable_media_entries(int index) {
  // @@protoc_insertion_point(field_mutable:jukey.prot.JoinGroupReq.media_entries)
  return _impl_.media_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaEntry >*
JoinGroupReq::mutable_media_entries() {
  // @@protoc_insertion_point(field_mutable_list:jukey.prot.JoinGroupReq.media_entries)
  return &_impl_.media_entries_;
}
inline const ::jukey::prot::MediaEntry& JoinGroupReq::_internal_media_entries(int index) const {
  return _impl_.media_entries_.Get(index);
}
inline const ::jukey::prot::MediaEntry& JoinGroupReq::media_entries(int index) const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupReq.media_entries)
  return _internal_media_entries(index);
}
inline ::jukey::prot::MediaEntry* JoinGroupReq::_internal_add_media_entries() {
  return _impl_.media_entries_.Add();
}
inline ::jukey::prot::MediaEntry* JoinGroupReq::add_media_entries() {
  ::jukey::prot::MediaEntry* _add = _internal_add_media_entries();
  // @@protoc_insertion_point(field_add:jukey.prot.JoinGroupReq.media_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaEntry >&
JoinGroupReq::media_entries() const {
  // @@protoc_insertion_point(field_list:jukey.prot.JoinGroupReq.media_entries)
  return _impl_.media_entries_;
}

// -------------------------------------------------------------------

// MediaStateEntry

// required .jukey.prot.MediaEntry media_entry = 1;
inline bool MediaStateEntry::_internal_has_media_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.media_entry_ != nullptr);
  return value;
}
inline bool MediaStateEntry::has_media_entry() const {
  return _internal_has_media_entry();
}
inline void MediaStateEntry::clear_media_entry() {
  if (_impl_.media_entry_ != nullptr) _impl_.media_entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::jukey::prot::MediaEntry& MediaStateEntry::_internal_media_entry() const {
  const ::jukey::prot::MediaEntry* p = _impl_.media_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::jukey::prot::MediaEntry&>(
      ::jukey::prot::_MediaEntry_default_instance_);
}
inline const ::jukey::prot::MediaEntry& MediaStateEntry::media_entry() const {
  // @@protoc_insertion_point(field_get:jukey.prot.MediaStateEntry.media_entry)
  return _internal_media_entry();
}
inline void MediaStateEntry::unsafe_arena_set_allocated_media_entry(
    ::jukey::prot::MediaEntry* media_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_entry_);
  }
  _impl_.media_entry_ = media_entry;
  if (media_entry) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jukey.prot.MediaStateEntry.media_entry)
}
inline ::jukey::prot::MediaEntry* MediaStateEntry::release_media_entry() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::jukey::prot::MediaEntry* MediaStateEntry::unsafe_arena_release_media_entry() {
  // @@protoc_insertion_point(field_release:jukey.prot.MediaStateEntry.media_entry)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
  return temp;
}
inline ::jukey::prot::MediaEntry* MediaStateEntry::_internal_mutable_media_entry() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.media_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::jukey::prot::MediaEntry>(GetArenaForAllocation());
    _impl_.media_entry_ = p;
  }
  return _impl_.media_entry_;
}
inline ::jukey::prot::MediaEntry* MediaStateEntry::mutable_media_entry() {
  ::jukey::prot::MediaEntry* _msg = _internal_mutable_media_entry();
  // @@protoc_insertion_point(field_mutable:jukey.prot.MediaStateEntry.media_entry)
  return _msg;
}
inline void MediaStateEntry::set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.media_entry_;
  }
  if (media_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media_entry);
    if (message_arena != submessage_arena) {
      media_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_entry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.media_entry_ = media_entry;
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.MediaStateEntry.media_entry)
}

// required uint32 media_state = 2;
inline bool MediaStateEntry::_internal_has_media_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MediaStateEntry::has_media_state() const {
  return _internal_has_media_state();
}
inline void MediaStateEntry::clear_media_state() {
  _impl_.media_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t MediaStateEntry::_internal_media_state() const {
  return _impl_.media_state_;
}
inline uint32_t MediaStateEntry::media_state() const {
  // @@protoc_insertion_point(field_get:jukey.prot.MediaStateEntry.media_state)
  return _internal_media_state();
}
inline void MediaStateEntry::_internal_set_media_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.media_state_ = value;
}
inline void MediaStateEntry::set_media_state(uint32_t value) {
  _internal_set_media_state(value);
  // @@protoc_insertion_point(field_set:jukey.prot.MediaStateEntry.media_state)
}

// -------------------------------------------------------------------

// GroupUser

// required uint32 user_type = 1;
inline bool GroupUser::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupUser::has_user_type() const {
  return _internal_has_user_type();
}
inline void GroupUser::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t GroupUser::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t GroupUser::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.GroupUser.user_type)
  return _internal_user_type();
}
inline void GroupUser::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_type_ = value;
}
inline void GroupUser::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.GroupUser.user_type)
}

// required uint32 user_id = 2;
inline bool GroupUser::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupUser::has_user_id() const {
  return _internal_has_user_id();
}
inline void GroupUser::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupUser::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GroupUser::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.GroupUser.user_id)
  return _internal_user_id();
}
inline void GroupUser::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void GroupUser::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.GroupUser.user_id)
}

// repeated .jukey.prot.MediaStateEntry media_state_entries = 3;
inline int GroupUser::_internal_media_state_entries_size() const {
  return _impl_.media_state_entries_.size();
}
inline int GroupUser::media_state_entries_size() const {
  return _internal_media_state_entries_size();
}
inline void GroupUser::clear_media_state_entries() {
  _impl_.media_state_entries_.Clear();
}
inline ::jukey::prot::MediaStateEntry* GroupUser::mutable_media_state_entries(int index) {
  // @@protoc_insertion_point(field_mutable:jukey.prot.GroupUser.media_state_entries)
  return _impl_.media_state_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaStateEntry >*
GroupUser::mutable_media_state_entries() {
  // @@protoc_insertion_point(field_mutable_list:jukey.prot.GroupUser.media_state_entries)
  return &_impl_.media_state_entries_;
}
inline const ::jukey::prot::MediaStateEntry& GroupUser::_internal_media_state_entries(int index) const {
  return _impl_.media_state_entries_.Get(index);
}
inline const ::jukey::prot::MediaStateEntry& GroupUser::media_state_entries(int index) const {
  // @@protoc_insertion_point(field_get:jukey.prot.GroupUser.media_state_entries)
  return _internal_media_state_entries(index);
}
inline ::jukey::prot::MediaStateEntry* GroupUser::_internal_add_media_state_entries() {
  return _impl_.media_state_entries_.Add();
}
inline ::jukey::prot::MediaStateEntry* GroupUser::add_media_state_entries() {
  ::jukey::prot::MediaStateEntry* _add = _internal_add_media_state_entries();
  // @@protoc_insertion_point(field_add:jukey.prot.GroupUser.media_state_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaStateEntry >&
GroupUser::media_state_entries() const {
  // @@protoc_insertion_point(field_list:jukey.prot.GroupUser.media_state_entries)
  return _impl_.media_state_entries_;
}

// -------------------------------------------------------------------

// JoinGroupRsp

// required uint32 app_id = 1;
inline bool JoinGroupRsp::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool JoinGroupRsp::has_app_id() const {
  return _internal_has_app_id();
}
inline void JoinGroupRsp::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t JoinGroupRsp::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t JoinGroupRsp::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupRsp.app_id)
  return _internal_app_id();
}
inline void JoinGroupRsp::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void JoinGroupRsp::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupRsp.app_id)
}

// required uint32 group_id = 2;
inline bool JoinGroupRsp::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool JoinGroupRsp::has_group_id() const {
  return _internal_has_group_id();
}
inline void JoinGroupRsp::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t JoinGroupRsp::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t JoinGroupRsp::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupRsp.group_id)
  return _internal_group_id();
}
inline void JoinGroupRsp::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void JoinGroupRsp::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupRsp.group_id)
}

// required uint32 user_type = 3;
inline bool JoinGroupRsp::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool JoinGroupRsp::has_user_type() const {
  return _internal_has_user_type();
}
inline void JoinGroupRsp::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t JoinGroupRsp::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t JoinGroupRsp::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupRsp.user_type)
  return _internal_user_type();
}
inline void JoinGroupRsp::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_type_ = value;
}
inline void JoinGroupRsp::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupRsp.user_type)
}

// required uint32 user_id = 4;
inline bool JoinGroupRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool JoinGroupRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void JoinGroupRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t JoinGroupRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t JoinGroupRsp::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupRsp.user_id)
  return _internal_user_id();
}
inline void JoinGroupRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_id_ = value;
}
inline void JoinGroupRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupRsp.user_id)
}

// required uint32 login_id = 5;
inline bool JoinGroupRsp::_internal_has_login_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool JoinGroupRsp::has_login_id() const {
  return _internal_has_login_id();
}
inline void JoinGroupRsp::clear_login_id() {
  _impl_.login_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t JoinGroupRsp::_internal_login_id() const {
  return _impl_.login_id_;
}
inline uint32_t JoinGroupRsp::login_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupRsp.login_id)
  return _internal_login_id();
}
inline void JoinGroupRsp::_internal_set_login_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.login_id_ = value;
}
inline void JoinGroupRsp::set_login_id(uint32_t value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupRsp.login_id)
}

// repeated .jukey.prot.GroupUser group_users = 6;
inline int JoinGroupRsp::_internal_group_users_size() const {
  return _impl_.group_users_.size();
}
inline int JoinGroupRsp::group_users_size() const {
  return _internal_group_users_size();
}
inline void JoinGroupRsp::clear_group_users() {
  _impl_.group_users_.Clear();
}
inline ::jukey::prot::GroupUser* JoinGroupRsp::mutable_group_users(int index) {
  // @@protoc_insertion_point(field_mutable:jukey.prot.JoinGroupRsp.group_users)
  return _impl_.group_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::GroupUser >*
JoinGroupRsp::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable_list:jukey.prot.JoinGroupRsp.group_users)
  return &_impl_.group_users_;
}
inline const ::jukey::prot::GroupUser& JoinGroupRsp::_internal_group_users(int index) const {
  return _impl_.group_users_.Get(index);
}
inline const ::jukey::prot::GroupUser& JoinGroupRsp::group_users(int index) const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupRsp.group_users)
  return _internal_group_users(index);
}
inline ::jukey::prot::GroupUser* JoinGroupRsp::_internal_add_group_users() {
  return _impl_.group_users_.Add();
}
inline ::jukey::prot::GroupUser* JoinGroupRsp::add_group_users() {
  ::jukey::prot::GroupUser* _add = _internal_add_group_users();
  // @@protoc_insertion_point(field_add:jukey.prot.JoinGroupRsp.group_users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::GroupUser >&
JoinGroupRsp::group_users() const {
  // @@protoc_insertion_point(field_list:jukey.prot.JoinGroupRsp.group_users)
  return _impl_.group_users_;
}

// required uint32 result = 7;
inline bool JoinGroupRsp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool JoinGroupRsp::has_result() const {
  return _internal_has_result();
}
inline void JoinGroupRsp::clear_result() {
  _impl_.result_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t JoinGroupRsp::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t JoinGroupRsp::result() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupRsp.result)
  return _internal_result();
}
inline void JoinGroupRsp::_internal_set_result(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.result_ = value;
}
inline void JoinGroupRsp::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupRsp.result)
}

// required string msg = 8;
inline bool JoinGroupRsp::_internal_has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JoinGroupRsp::has_msg() const {
  return _internal_has_msg();
}
inline void JoinGroupRsp::clear_msg() {
  _impl_.msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinGroupRsp::msg() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupRsp.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinGroupRsp::set_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupRsp.msg)
}
inline std::string* JoinGroupRsp::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:jukey.prot.JoinGroupRsp.msg)
  return _s;
}
inline const std::string& JoinGroupRsp::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void JoinGroupRsp::_internal_set_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinGroupRsp::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinGroupRsp::release_msg() {
  // @@protoc_insertion_point(field_release:jukey.prot.JoinGroupRsp.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void JoinGroupRsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.JoinGroupRsp.msg)
}

// -------------------------------------------------------------------

// JoinGroupNotify

// required uint32 app_id = 1;
inline bool JoinGroupNotify::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JoinGroupNotify::has_app_id() const {
  return _internal_has_app_id();
}
inline void JoinGroupNotify::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t JoinGroupNotify::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t JoinGroupNotify::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupNotify.app_id)
  return _internal_app_id();
}
inline void JoinGroupNotify::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_id_ = value;
}
inline void JoinGroupNotify::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupNotify.app_id)
}

// required uint32 group_id = 2;
inline bool JoinGroupNotify::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool JoinGroupNotify::has_group_id() const {
  return _internal_has_group_id();
}
inline void JoinGroupNotify::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t JoinGroupNotify::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t JoinGroupNotify::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupNotify.group_id)
  return _internal_group_id();
}
inline void JoinGroupNotify::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_id_ = value;
}
inline void JoinGroupNotify::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupNotify.group_id)
}

// required uint32 user_type = 3;
inline bool JoinGroupNotify::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool JoinGroupNotify::has_user_type() const {
  return _internal_has_user_type();
}
inline void JoinGroupNotify::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t JoinGroupNotify::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t JoinGroupNotify::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupNotify.user_type)
  return _internal_user_type();
}
inline void JoinGroupNotify::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.user_type_ = value;
}
inline void JoinGroupNotify::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupNotify.user_type)
}

// required uint32 user_id = 4;
inline bool JoinGroupNotify::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool JoinGroupNotify::has_user_id() const {
  return _internal_has_user_id();
}
inline void JoinGroupNotify::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t JoinGroupNotify::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t JoinGroupNotify::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupNotify.user_id)
  return _internal_user_id();
}
inline void JoinGroupNotify::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_id_ = value;
}
inline void JoinGroupNotify::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.JoinGroupNotify.user_id)
}

// repeated .jukey.prot.MediaEntry media_entries = 5;
inline int JoinGroupNotify::_internal_media_entries_size() const {
  return _impl_.media_entries_.size();
}
inline int JoinGroupNotify::media_entries_size() const {
  return _internal_media_entries_size();
}
inline void JoinGroupNotify::clear_media_entries() {
  _impl_.media_entries_.Clear();
}
inline ::jukey::prot::MediaEntry* JoinGroupNotify::mutable_media_entries(int index) {
  // @@protoc_insertion_point(field_mutable:jukey.prot.JoinGroupNotify.media_entries)
  return _impl_.media_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaEntry >*
JoinGroupNotify::mutable_media_entries() {
  // @@protoc_insertion_point(field_mutable_list:jukey.prot.JoinGroupNotify.media_entries)
  return &_impl_.media_entries_;
}
inline const ::jukey::prot::MediaEntry& JoinGroupNotify::_internal_media_entries(int index) const {
  return _impl_.media_entries_.Get(index);
}
inline const ::jukey::prot::MediaEntry& JoinGroupNotify::media_entries(int index) const {
  // @@protoc_insertion_point(field_get:jukey.prot.JoinGroupNotify.media_entries)
  return _internal_media_entries(index);
}
inline ::jukey::prot::MediaEntry* JoinGroupNotify::_internal_add_media_entries() {
  return _impl_.media_entries_.Add();
}
inline ::jukey::prot::MediaEntry* JoinGroupNotify::add_media_entries() {
  ::jukey::prot::MediaEntry* _add = _internal_add_media_entries();
  // @@protoc_insertion_point(field_add:jukey.prot.JoinGroupNotify.media_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jukey::prot::MediaEntry >&
JoinGroupNotify::media_entries() const {
  // @@protoc_insertion_point(field_list:jukey.prot.JoinGroupNotify.media_entries)
  return _impl_.media_entries_;
}

// -------------------------------------------------------------------

// LeaveGroupReq

// required uint32 app_id = 1;
inline bool LeaveGroupReq::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LeaveGroupReq::has_app_id() const {
  return _internal_has_app_id();
}
inline void LeaveGroupReq::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LeaveGroupReq::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t LeaveGroupReq::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupReq.app_id)
  return _internal_app_id();
}
inline void LeaveGroupReq::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void LeaveGroupReq::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupReq.app_id)
}

// required uint32 group_id = 2;
inline bool LeaveGroupReq::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LeaveGroupReq::has_group_id() const {
  return _internal_has_group_id();
}
inline void LeaveGroupReq::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LeaveGroupReq::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t LeaveGroupReq::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupReq.group_id)
  return _internal_group_id();
}
inline void LeaveGroupReq::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void LeaveGroupReq::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupReq.group_id)
}

// required uint32 user_type = 3;
inline bool LeaveGroupReq::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LeaveGroupReq::has_user_type() const {
  return _internal_has_user_type();
}
inline void LeaveGroupReq::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t LeaveGroupReq::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t LeaveGroupReq::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupReq.user_type)
  return _internal_user_type();
}
inline void LeaveGroupReq::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_type_ = value;
}
inline void LeaveGroupReq::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupReq.user_type)
}

// required uint32 user_id = 4;
inline bool LeaveGroupReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LeaveGroupReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void LeaveGroupReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t LeaveGroupReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t LeaveGroupReq::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupReq.user_id)
  return _internal_user_id();
}
inline void LeaveGroupReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_id_ = value;
}
inline void LeaveGroupReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupReq.user_id)
}

// required uint32 login_id = 5;
inline bool LeaveGroupReq::_internal_has_login_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LeaveGroupReq::has_login_id() const {
  return _internal_has_login_id();
}
inline void LeaveGroupReq::clear_login_id() {
  _impl_.login_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t LeaveGroupReq::_internal_login_id() const {
  return _impl_.login_id_;
}
inline uint32_t LeaveGroupReq::login_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupReq.login_id)
  return _internal_login_id();
}
inline void LeaveGroupReq::_internal_set_login_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.login_id_ = value;
}
inline void LeaveGroupReq::set_login_id(uint32_t value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupReq.login_id)
}

// required string token = 6;
inline bool LeaveGroupReq::_internal_has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LeaveGroupReq::has_token() const {
  return _internal_has_token();
}
inline void LeaveGroupReq::clear_token() {
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LeaveGroupReq::token() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupReq.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LeaveGroupReq::set_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupReq.token)
}
inline std::string* LeaveGroupReq::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:jukey.prot.LeaveGroupReq.token)
  return _s;
}
inline const std::string& LeaveGroupReq::_internal_token() const {
  return _impl_.token_.Get();
}
inline void LeaveGroupReq::_internal_set_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* LeaveGroupReq::_internal_mutable_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* LeaveGroupReq::release_token() {
  // @@protoc_insertion_point(field_release:jukey.prot.LeaveGroupReq.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LeaveGroupReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.LeaveGroupReq.token)
}

// -------------------------------------------------------------------

// LeaveGroupRsp

// required uint32 app_id = 1;
inline bool LeaveGroupRsp::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LeaveGroupRsp::has_app_id() const {
  return _internal_has_app_id();
}
inline void LeaveGroupRsp::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LeaveGroupRsp::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t LeaveGroupRsp::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupRsp.app_id)
  return _internal_app_id();
}
inline void LeaveGroupRsp::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void LeaveGroupRsp::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupRsp.app_id)
}

// required uint32 group_id = 2;
inline bool LeaveGroupRsp::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LeaveGroupRsp::has_group_id() const {
  return _internal_has_group_id();
}
inline void LeaveGroupRsp::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LeaveGroupRsp::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t LeaveGroupRsp::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupRsp.group_id)
  return _internal_group_id();
}
inline void LeaveGroupRsp::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void LeaveGroupRsp::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupRsp.group_id)
}

// required uint32 user_type = 3;
inline bool LeaveGroupRsp::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LeaveGroupRsp::has_user_type() const {
  return _internal_has_user_type();
}
inline void LeaveGroupRsp::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t LeaveGroupRsp::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t LeaveGroupRsp::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupRsp.user_type)
  return _internal_user_type();
}
inline void LeaveGroupRsp::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_type_ = value;
}
inline void LeaveGroupRsp::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupRsp.user_type)
}

// required uint32 user_id = 4;
inline bool LeaveGroupRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LeaveGroupRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void LeaveGroupRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t LeaveGroupRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t LeaveGroupRsp::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupRsp.user_id)
  return _internal_user_id();
}
inline void LeaveGroupRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_id_ = value;
}
inline void LeaveGroupRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupRsp.user_id)
}

// required uint32 login_id = 5;
inline bool LeaveGroupRsp::_internal_has_login_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LeaveGroupRsp::has_login_id() const {
  return _internal_has_login_id();
}
inline void LeaveGroupRsp::clear_login_id() {
  _impl_.login_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t LeaveGroupRsp::_internal_login_id() const {
  return _impl_.login_id_;
}
inline uint32_t LeaveGroupRsp::login_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupRsp.login_id)
  return _internal_login_id();
}
inline void LeaveGroupRsp::_internal_set_login_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.login_id_ = value;
}
inline void LeaveGroupRsp::set_login_id(uint32_t value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupRsp.login_id)
}

// required uint32 result = 6;
inline bool LeaveGroupRsp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LeaveGroupRsp::has_result() const {
  return _internal_has_result();
}
inline void LeaveGroupRsp::clear_result() {
  _impl_.result_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t LeaveGroupRsp::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t LeaveGroupRsp::result() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupRsp.result)
  return _internal_result();
}
inline void LeaveGroupRsp::_internal_set_result(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.result_ = value;
}
inline void LeaveGroupRsp::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupRsp.result)
}

// required string msg = 7;
inline bool LeaveGroupRsp::_internal_has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LeaveGroupRsp::has_msg() const {
  return _internal_has_msg();
}
inline void LeaveGroupRsp::clear_msg() {
  _impl_.msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LeaveGroupRsp::msg() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupRsp.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LeaveGroupRsp::set_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupRsp.msg)
}
inline std::string* LeaveGroupRsp::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:jukey.prot.LeaveGroupRsp.msg)
  return _s;
}
inline const std::string& LeaveGroupRsp::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void LeaveGroupRsp::_internal_set_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* LeaveGroupRsp::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* LeaveGroupRsp::release_msg() {
  // @@protoc_insertion_point(field_release:jukey.prot.LeaveGroupRsp.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LeaveGroupRsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.LeaveGroupRsp.msg)
}

// -------------------------------------------------------------------

// LeaveGroupNotify

// required uint32 app_id = 1;
inline bool LeaveGroupNotify::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LeaveGroupNotify::has_app_id() const {
  return _internal_has_app_id();
}
inline void LeaveGroupNotify::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t LeaveGroupNotify::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t LeaveGroupNotify::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupNotify.app_id)
  return _internal_app_id();
}
inline void LeaveGroupNotify::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_id_ = value;
}
inline void LeaveGroupNotify::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupNotify.app_id)
}

// required uint32 group_id = 2;
inline bool LeaveGroupNotify::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LeaveGroupNotify::has_group_id() const {
  return _internal_has_group_id();
}
inline void LeaveGroupNotify::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t LeaveGroupNotify::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t LeaveGroupNotify::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupNotify.group_id)
  return _internal_group_id();
}
inline void LeaveGroupNotify::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_id_ = value;
}
inline void LeaveGroupNotify::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupNotify.group_id)
}

// required uint32 user_type = 3;
inline bool LeaveGroupNotify::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LeaveGroupNotify::has_user_type() const {
  return _internal_has_user_type();
}
inline void LeaveGroupNotify::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LeaveGroupNotify::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t LeaveGroupNotify::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupNotify.user_type)
  return _internal_user_type();
}
inline void LeaveGroupNotify::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.user_type_ = value;
}
inline void LeaveGroupNotify::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupNotify.user_type)
}

// required uint32 user_id = 4;
inline bool LeaveGroupNotify::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LeaveGroupNotify::has_user_id() const {
  return _internal_has_user_id();
}
inline void LeaveGroupNotify::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t LeaveGroupNotify::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t LeaveGroupNotify::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.LeaveGroupNotify.user_id)
  return _internal_user_id();
}
inline void LeaveGroupNotify::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_id_ = value;
}
inline void LeaveGroupNotify::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.LeaveGroupNotify.user_id)
}

// -------------------------------------------------------------------

// PublishMediaReq

// required uint32 app_id = 1;
inline bool PublishMediaReq::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishMediaReq::has_app_id() const {
  return _internal_has_app_id();
}
inline void PublishMediaReq::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PublishMediaReq::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t PublishMediaReq::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaReq.app_id)
  return _internal_app_id();
}
inline void PublishMediaReq::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void PublishMediaReq::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaReq.app_id)
}

// required uint32 group_id = 2;
inline bool PublishMediaReq::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishMediaReq::has_group_id() const {
  return _internal_has_group_id();
}
inline void PublishMediaReq::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PublishMediaReq::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t PublishMediaReq::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaReq.group_id)
  return _internal_group_id();
}
inline void PublishMediaReq::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void PublishMediaReq::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaReq.group_id)
}

// required uint32 user_type = 3;
inline bool PublishMediaReq::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PublishMediaReq::has_user_type() const {
  return _internal_has_user_type();
}
inline void PublishMediaReq::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PublishMediaReq::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t PublishMediaReq::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaReq.user_type)
  return _internal_user_type();
}
inline void PublishMediaReq::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_type_ = value;
}
inline void PublishMediaReq::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaReq.user_type)
}

// required uint32 user_id = 4;
inline bool PublishMediaReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublishMediaReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void PublishMediaReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PublishMediaReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t PublishMediaReq::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaReq.user_id)
  return _internal_user_id();
}
inline void PublishMediaReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_id_ = value;
}
inline void PublishMediaReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaReq.user_id)
}

// required uint32 login_id = 5;
inline bool PublishMediaReq::_internal_has_login_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PublishMediaReq::has_login_id() const {
  return _internal_has_login_id();
}
inline void PublishMediaReq::clear_login_id() {
  _impl_.login_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t PublishMediaReq::_internal_login_id() const {
  return _impl_.login_id_;
}
inline uint32_t PublishMediaReq::login_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaReq.login_id)
  return _internal_login_id();
}
inline void PublishMediaReq::_internal_set_login_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.login_id_ = value;
}
inline void PublishMediaReq::set_login_id(uint32_t value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaReq.login_id)
}

// required .jukey.prot.MediaEntry media_entry = 6;
inline bool PublishMediaReq::_internal_has_media_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.media_entry_ != nullptr);
  return value;
}
inline bool PublishMediaReq::has_media_entry() const {
  return _internal_has_media_entry();
}
inline void PublishMediaReq::clear_media_entry() {
  if (_impl_.media_entry_ != nullptr) _impl_.media_entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::jukey::prot::MediaEntry& PublishMediaReq::_internal_media_entry() const {
  const ::jukey::prot::MediaEntry* p = _impl_.media_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::jukey::prot::MediaEntry&>(
      ::jukey::prot::_MediaEntry_default_instance_);
}
inline const ::jukey::prot::MediaEntry& PublishMediaReq::media_entry() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaReq.media_entry)
  return _internal_media_entry();
}
inline void PublishMediaReq::unsafe_arena_set_allocated_media_entry(
    ::jukey::prot::MediaEntry* media_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_entry_);
  }
  _impl_.media_entry_ = media_entry;
  if (media_entry) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jukey.prot.PublishMediaReq.media_entry)
}
inline ::jukey::prot::MediaEntry* PublishMediaReq::release_media_entry() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::jukey::prot::MediaEntry* PublishMediaReq::unsafe_arena_release_media_entry() {
  // @@protoc_insertion_point(field_release:jukey.prot.PublishMediaReq.media_entry)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
  return temp;
}
inline ::jukey::prot::MediaEntry* PublishMediaReq::_internal_mutable_media_entry() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.media_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::jukey::prot::MediaEntry>(GetArenaForAllocation());
    _impl_.media_entry_ = p;
  }
  return _impl_.media_entry_;
}
inline ::jukey::prot::MediaEntry* PublishMediaReq::mutable_media_entry() {
  ::jukey::prot::MediaEntry* _msg = _internal_mutable_media_entry();
  // @@protoc_insertion_point(field_mutable:jukey.prot.PublishMediaReq.media_entry)
  return _msg;
}
inline void PublishMediaReq::set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.media_entry_;
  }
  if (media_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media_entry);
    if (message_arena != submessage_arena) {
      media_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_entry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.media_entry_ = media_entry;
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.PublishMediaReq.media_entry)
}

// -------------------------------------------------------------------

// PublishMediaRsp

// required uint32 app_id = 1;
inline bool PublishMediaRsp::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishMediaRsp::has_app_id() const {
  return _internal_has_app_id();
}
inline void PublishMediaRsp::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PublishMediaRsp::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t PublishMediaRsp::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaRsp.app_id)
  return _internal_app_id();
}
inline void PublishMediaRsp::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.app_id_ = value;
}
inline void PublishMediaRsp::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaRsp.app_id)
}

// required uint32 group_id = 2;
inline bool PublishMediaRsp::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PublishMediaRsp::has_group_id() const {
  return _internal_has_group_id();
}
inline void PublishMediaRsp::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PublishMediaRsp::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t PublishMediaRsp::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaRsp.group_id)
  return _internal_group_id();
}
inline void PublishMediaRsp::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.group_id_ = value;
}
inline void PublishMediaRsp::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaRsp.group_id)
}

// required uint32 user_type = 3;
inline bool PublishMediaRsp::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublishMediaRsp::has_user_type() const {
  return _internal_has_user_type();
}
inline void PublishMediaRsp::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PublishMediaRsp::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t PublishMediaRsp::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaRsp.user_type)
  return _internal_user_type();
}
inline void PublishMediaRsp::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_type_ = value;
}
inline void PublishMediaRsp::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaRsp.user_type)
}

// required uint32 user_id = 4;
inline bool PublishMediaRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PublishMediaRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void PublishMediaRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t PublishMediaRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t PublishMediaRsp::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaRsp.user_id)
  return _internal_user_id();
}
inline void PublishMediaRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.user_id_ = value;
}
inline void PublishMediaRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaRsp.user_id)
}

// required uint32 login_id = 5;
inline bool PublishMediaRsp::_internal_has_login_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PublishMediaRsp::has_login_id() const {
  return _internal_has_login_id();
}
inline void PublishMediaRsp::clear_login_id() {
  _impl_.login_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t PublishMediaRsp::_internal_login_id() const {
  return _impl_.login_id_;
}
inline uint32_t PublishMediaRsp::login_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaRsp.login_id)
  return _internal_login_id();
}
inline void PublishMediaRsp::_internal_set_login_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.login_id_ = value;
}
inline void PublishMediaRsp::set_login_id(uint32_t value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaRsp.login_id)
}

// required .jukey.prot.MediaEntry media_entry = 6;
inline bool PublishMediaRsp::_internal_has_media_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.media_entry_ != nullptr);
  return value;
}
inline bool PublishMediaRsp::has_media_entry() const {
  return _internal_has_media_entry();
}
inline void PublishMediaRsp::clear_media_entry() {
  if (_impl_.media_entry_ != nullptr) _impl_.media_entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::jukey::prot::MediaEntry& PublishMediaRsp::_internal_media_entry() const {
  const ::jukey::prot::MediaEntry* p = _impl_.media_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::jukey::prot::MediaEntry&>(
      ::jukey::prot::_MediaEntry_default_instance_);
}
inline const ::jukey::prot::MediaEntry& PublishMediaRsp::media_entry() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaRsp.media_entry)
  return _internal_media_entry();
}
inline void PublishMediaRsp::unsafe_arena_set_allocated_media_entry(
    ::jukey::prot::MediaEntry* media_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_entry_);
  }
  _impl_.media_entry_ = media_entry;
  if (media_entry) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jukey.prot.PublishMediaRsp.media_entry)
}
inline ::jukey::prot::MediaEntry* PublishMediaRsp::release_media_entry() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::jukey::prot::MediaEntry* PublishMediaRsp::unsafe_arena_release_media_entry() {
  // @@protoc_insertion_point(field_release:jukey.prot.PublishMediaRsp.media_entry)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
  return temp;
}
inline ::jukey::prot::MediaEntry* PublishMediaRsp::_internal_mutable_media_entry() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.media_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::jukey::prot::MediaEntry>(GetArenaForAllocation());
    _impl_.media_entry_ = p;
  }
  return _impl_.media_entry_;
}
inline ::jukey::prot::MediaEntry* PublishMediaRsp::mutable_media_entry() {
  ::jukey::prot::MediaEntry* _msg = _internal_mutable_media_entry();
  // @@protoc_insertion_point(field_mutable:jukey.prot.PublishMediaRsp.media_entry)
  return _msg;
}
inline void PublishMediaRsp::set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.media_entry_;
  }
  if (media_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media_entry);
    if (message_arena != submessage_arena) {
      media_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_entry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.media_entry_ = media_entry;
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.PublishMediaRsp.media_entry)
}

// required uint32 result = 7;
inline bool PublishMediaRsp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PublishMediaRsp::has_result() const {
  return _internal_has_result();
}
inline void PublishMediaRsp::clear_result() {
  _impl_.result_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t PublishMediaRsp::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t PublishMediaRsp::result() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaRsp.result)
  return _internal_result();
}
inline void PublishMediaRsp::_internal_set_result(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.result_ = value;
}
inline void PublishMediaRsp::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaRsp.result)
}

// required string msg = 8;
inline bool PublishMediaRsp::_internal_has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishMediaRsp::has_msg() const {
  return _internal_has_msg();
}
inline void PublishMediaRsp::clear_msg() {
  _impl_.msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishMediaRsp::msg() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaRsp.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishMediaRsp::set_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaRsp.msg)
}
inline std::string* PublishMediaRsp::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:jukey.prot.PublishMediaRsp.msg)
  return _s;
}
inline const std::string& PublishMediaRsp::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void PublishMediaRsp::_internal_set_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* PublishMediaRsp::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* PublishMediaRsp::release_msg() {
  // @@protoc_insertion_point(field_release:jukey.prot.PublishMediaRsp.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishMediaRsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.PublishMediaRsp.msg)
}

// -------------------------------------------------------------------

// PublishMediaNotify

// required uint32 app_id = 1;
inline bool PublishMediaNotify::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishMediaNotify::has_app_id() const {
  return _internal_has_app_id();
}
inline void PublishMediaNotify::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PublishMediaNotify::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t PublishMediaNotify::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaNotify.app_id)
  return _internal_app_id();
}
inline void PublishMediaNotify::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void PublishMediaNotify::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaNotify.app_id)
}

// required uint32 group_id = 2;
inline bool PublishMediaNotify::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishMediaNotify::has_group_id() const {
  return _internal_has_group_id();
}
inline void PublishMediaNotify::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PublishMediaNotify::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t PublishMediaNotify::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaNotify.group_id)
  return _internal_group_id();
}
inline void PublishMediaNotify::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void PublishMediaNotify::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaNotify.group_id)
}

// required uint32 user_type = 3;
inline bool PublishMediaNotify::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PublishMediaNotify::has_user_type() const {
  return _internal_has_user_type();
}
inline void PublishMediaNotify::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PublishMediaNotify::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t PublishMediaNotify::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaNotify.user_type)
  return _internal_user_type();
}
inline void PublishMediaNotify::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_type_ = value;
}
inline void PublishMediaNotify::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaNotify.user_type)
}

// required uint32 user_id = 4;
inline bool PublishMediaNotify::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublishMediaNotify::has_user_id() const {
  return _internal_has_user_id();
}
inline void PublishMediaNotify::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PublishMediaNotify::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t PublishMediaNotify::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaNotify.user_id)
  return _internal_user_id();
}
inline void PublishMediaNotify::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_id_ = value;
}
inline void PublishMediaNotify::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaNotify.user_id)
}

// required .jukey.prot.MediaEntry media_entry = 5;
inline bool PublishMediaNotify::_internal_has_media_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.media_entry_ != nullptr);
  return value;
}
inline bool PublishMediaNotify::has_media_entry() const {
  return _internal_has_media_entry();
}
inline void PublishMediaNotify::clear_media_entry() {
  if (_impl_.media_entry_ != nullptr) _impl_.media_entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::jukey::prot::MediaEntry& PublishMediaNotify::_internal_media_entry() const {
  const ::jukey::prot::MediaEntry* p = _impl_.media_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::jukey::prot::MediaEntry&>(
      ::jukey::prot::_MediaEntry_default_instance_);
}
inline const ::jukey::prot::MediaEntry& PublishMediaNotify::media_entry() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaNotify.media_entry)
  return _internal_media_entry();
}
inline void PublishMediaNotify::unsafe_arena_set_allocated_media_entry(
    ::jukey::prot::MediaEntry* media_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_entry_);
  }
  _impl_.media_entry_ = media_entry;
  if (media_entry) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jukey.prot.PublishMediaNotify.media_entry)
}
inline ::jukey::prot::MediaEntry* PublishMediaNotify::release_media_entry() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::jukey::prot::MediaEntry* PublishMediaNotify::unsafe_arena_release_media_entry() {
  // @@protoc_insertion_point(field_release:jukey.prot.PublishMediaNotify.media_entry)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
  return temp;
}
inline ::jukey::prot::MediaEntry* PublishMediaNotify::_internal_mutable_media_entry() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.media_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::jukey::prot::MediaEntry>(GetArenaForAllocation());
    _impl_.media_entry_ = p;
  }
  return _impl_.media_entry_;
}
inline ::jukey::prot::MediaEntry* PublishMediaNotify::mutable_media_entry() {
  ::jukey::prot::MediaEntry* _msg = _internal_mutable_media_entry();
  // @@protoc_insertion_point(field_mutable:jukey.prot.PublishMediaNotify.media_entry)
  return _msg;
}
inline void PublishMediaNotify::set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.media_entry_;
  }
  if (media_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media_entry);
    if (message_arena != submessage_arena) {
      media_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_entry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.media_entry_ = media_entry;
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.PublishMediaNotify.media_entry)
}

// required bool need_ack = 6;
inline bool PublishMediaNotify::_internal_has_need_ack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PublishMediaNotify::has_need_ack() const {
  return _internal_has_need_ack();
}
inline void PublishMediaNotify::clear_need_ack() {
  _impl_.need_ack_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool PublishMediaNotify::_internal_need_ack() const {
  return _impl_.need_ack_;
}
inline bool PublishMediaNotify::need_ack() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaNotify.need_ack)
  return _internal_need_ack();
}
inline void PublishMediaNotify::_internal_set_need_ack(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.need_ack_ = value;
}
inline void PublishMediaNotify::set_need_ack(bool value) {
  _internal_set_need_ack(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaNotify.need_ack)
}

// -------------------------------------------------------------------

// PublishMediaAck

// required uint32 app_id = 1;
inline bool PublishMediaAck::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishMediaAck::has_app_id() const {
  return _internal_has_app_id();
}
inline void PublishMediaAck::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PublishMediaAck::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t PublishMediaAck::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaAck.app_id)
  return _internal_app_id();
}
inline void PublishMediaAck::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void PublishMediaAck::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaAck.app_id)
}

// required uint32 group_id = 2;
inline bool PublishMediaAck::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishMediaAck::has_group_id() const {
  return _internal_has_group_id();
}
inline void PublishMediaAck::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PublishMediaAck::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t PublishMediaAck::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaAck.group_id)
  return _internal_group_id();
}
inline void PublishMediaAck::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void PublishMediaAck::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaAck.group_id)
}

// required uint32 user_type = 3;
inline bool PublishMediaAck::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PublishMediaAck::has_user_type() const {
  return _internal_has_user_type();
}
inline void PublishMediaAck::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PublishMediaAck::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t PublishMediaAck::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaAck.user_type)
  return _internal_user_type();
}
inline void PublishMediaAck::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_type_ = value;
}
inline void PublishMediaAck::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaAck.user_type)
}

// required uint32 user_id = 4;
inline bool PublishMediaAck::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublishMediaAck::has_user_id() const {
  return _internal_has_user_id();
}
inline void PublishMediaAck::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t PublishMediaAck::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t PublishMediaAck::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaAck.user_id)
  return _internal_user_id();
}
inline void PublishMediaAck::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_id_ = value;
}
inline void PublishMediaAck::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaAck.user_id)
}

// required .jukey.prot.MediaEntry media_entry = 5;
inline bool PublishMediaAck::_internal_has_media_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.media_entry_ != nullptr);
  return value;
}
inline bool PublishMediaAck::has_media_entry() const {
  return _internal_has_media_entry();
}
inline void PublishMediaAck::clear_media_entry() {
  if (_impl_.media_entry_ != nullptr) _impl_.media_entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::jukey::prot::MediaEntry& PublishMediaAck::_internal_media_entry() const {
  const ::jukey::prot::MediaEntry* p = _impl_.media_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::jukey::prot::MediaEntry&>(
      ::jukey::prot::_MediaEntry_default_instance_);
}
inline const ::jukey::prot::MediaEntry& PublishMediaAck::media_entry() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaAck.media_entry)
  return _internal_media_entry();
}
inline void PublishMediaAck::unsafe_arena_set_allocated_media_entry(
    ::jukey::prot::MediaEntry* media_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_entry_);
  }
  _impl_.media_entry_ = media_entry;
  if (media_entry) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jukey.prot.PublishMediaAck.media_entry)
}
inline ::jukey::prot::MediaEntry* PublishMediaAck::release_media_entry() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::jukey::prot::MediaEntry* PublishMediaAck::unsafe_arena_release_media_entry() {
  // @@protoc_insertion_point(field_release:jukey.prot.PublishMediaAck.media_entry)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
  return temp;
}
inline ::jukey::prot::MediaEntry* PublishMediaAck::_internal_mutable_media_entry() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.media_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::jukey::prot::MediaEntry>(GetArenaForAllocation());
    _impl_.media_entry_ = p;
  }
  return _impl_.media_entry_;
}
inline ::jukey::prot::MediaEntry* PublishMediaAck::mutable_media_entry() {
  ::jukey::prot::MediaEntry* _msg = _internal_mutable_media_entry();
  // @@protoc_insertion_point(field_mutable:jukey.prot.PublishMediaAck.media_entry)
  return _msg;
}
inline void PublishMediaAck::set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.media_entry_;
  }
  if (media_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media_entry);
    if (message_arena != submessage_arena) {
      media_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_entry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.media_entry_ = media_entry;
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.PublishMediaAck.media_entry)
}

// required uint32 ack_user_id = 6;
inline bool PublishMediaAck::_internal_has_ack_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PublishMediaAck::has_ack_user_id() const {
  return _internal_has_ack_user_id();
}
inline void PublishMediaAck::clear_ack_user_id() {
  _impl_.ack_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t PublishMediaAck::_internal_ack_user_id() const {
  return _impl_.ack_user_id_;
}
inline uint32_t PublishMediaAck::ack_user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaAck.ack_user_id)
  return _internal_ack_user_id();
}
inline void PublishMediaAck::_internal_set_ack_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ack_user_id_ = value;
}
inline void PublishMediaAck::set_ack_user_id(uint32_t value) {
  _internal_set_ack_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaAck.ack_user_id)
}

// required uint32 ack_user_type = 7;
inline bool PublishMediaAck::_internal_has_ack_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PublishMediaAck::has_ack_user_type() const {
  return _internal_has_ack_user_type();
}
inline void PublishMediaAck::clear_ack_user_type() {
  _impl_.ack_user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t PublishMediaAck::_internal_ack_user_type() const {
  return _impl_.ack_user_type_;
}
inline uint32_t PublishMediaAck::ack_user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.PublishMediaAck.ack_user_type)
  return _internal_ack_user_type();
}
inline void PublishMediaAck::_internal_set_ack_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ack_user_type_ = value;
}
inline void PublishMediaAck::set_ack_user_type(uint32_t value) {
  _internal_set_ack_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.PublishMediaAck.ack_user_type)
}

// -------------------------------------------------------------------

// UnpublishMediaReq

// required uint32 app_id = 1;
inline bool UnpublishMediaReq::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnpublishMediaReq::has_app_id() const {
  return _internal_has_app_id();
}
inline void UnpublishMediaReq::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t UnpublishMediaReq::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t UnpublishMediaReq::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaReq.app_id)
  return _internal_app_id();
}
inline void UnpublishMediaReq::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void UnpublishMediaReq::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaReq.app_id)
}

// required uint32 group_id = 2;
inline bool UnpublishMediaReq::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UnpublishMediaReq::has_group_id() const {
  return _internal_has_group_id();
}
inline void UnpublishMediaReq::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t UnpublishMediaReq::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t UnpublishMediaReq::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaReq.group_id)
  return _internal_group_id();
}
inline void UnpublishMediaReq::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void UnpublishMediaReq::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaReq.group_id)
}

// required uint32 user_type = 3;
inline bool UnpublishMediaReq::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UnpublishMediaReq::has_user_type() const {
  return _internal_has_user_type();
}
inline void UnpublishMediaReq::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t UnpublishMediaReq::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t UnpublishMediaReq::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaReq.user_type)
  return _internal_user_type();
}
inline void UnpublishMediaReq::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_type_ = value;
}
inline void UnpublishMediaReq::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaReq.user_type)
}

// required uint32 user_id = 4;
inline bool UnpublishMediaReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UnpublishMediaReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void UnpublishMediaReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t UnpublishMediaReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t UnpublishMediaReq::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaReq.user_id)
  return _internal_user_id();
}
inline void UnpublishMediaReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_id_ = value;
}
inline void UnpublishMediaReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaReq.user_id)
}

// required uint32 login_id = 5;
inline bool UnpublishMediaReq::_internal_has_login_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UnpublishMediaReq::has_login_id() const {
  return _internal_has_login_id();
}
inline void UnpublishMediaReq::clear_login_id() {
  _impl_.login_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t UnpublishMediaReq::_internal_login_id() const {
  return _impl_.login_id_;
}
inline uint32_t UnpublishMediaReq::login_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaReq.login_id)
  return _internal_login_id();
}
inline void UnpublishMediaReq::_internal_set_login_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.login_id_ = value;
}
inline void UnpublishMediaReq::set_login_id(uint32_t value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaReq.login_id)
}

// required .jukey.prot.MediaEntry media_entry = 6;
inline bool UnpublishMediaReq::_internal_has_media_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.media_entry_ != nullptr);
  return value;
}
inline bool UnpublishMediaReq::has_media_entry() const {
  return _internal_has_media_entry();
}
inline void UnpublishMediaReq::clear_media_entry() {
  if (_impl_.media_entry_ != nullptr) _impl_.media_entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::jukey::prot::MediaEntry& UnpublishMediaReq::_internal_media_entry() const {
  const ::jukey::prot::MediaEntry* p = _impl_.media_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::jukey::prot::MediaEntry&>(
      ::jukey::prot::_MediaEntry_default_instance_);
}
inline const ::jukey::prot::MediaEntry& UnpublishMediaReq::media_entry() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaReq.media_entry)
  return _internal_media_entry();
}
inline void UnpublishMediaReq::unsafe_arena_set_allocated_media_entry(
    ::jukey::prot::MediaEntry* media_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_entry_);
  }
  _impl_.media_entry_ = media_entry;
  if (media_entry) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jukey.prot.UnpublishMediaReq.media_entry)
}
inline ::jukey::prot::MediaEntry* UnpublishMediaReq::release_media_entry() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaReq::unsafe_arena_release_media_entry() {
  // @@protoc_insertion_point(field_release:jukey.prot.UnpublishMediaReq.media_entry)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
  return temp;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaReq::_internal_mutable_media_entry() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.media_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::jukey::prot::MediaEntry>(GetArenaForAllocation());
    _impl_.media_entry_ = p;
  }
  return _impl_.media_entry_;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaReq::mutable_media_entry() {
  ::jukey::prot::MediaEntry* _msg = _internal_mutable_media_entry();
  // @@protoc_insertion_point(field_mutable:jukey.prot.UnpublishMediaReq.media_entry)
  return _msg;
}
inline void UnpublishMediaReq::set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.media_entry_;
  }
  if (media_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media_entry);
    if (message_arena != submessage_arena) {
      media_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_entry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.media_entry_ = media_entry;
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.UnpublishMediaReq.media_entry)
}

// -------------------------------------------------------------------

// UnpublishMediaRsp

// required uint32 app_id = 1;
inline bool UnpublishMediaRsp::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UnpublishMediaRsp::has_app_id() const {
  return _internal_has_app_id();
}
inline void UnpublishMediaRsp::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t UnpublishMediaRsp::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t UnpublishMediaRsp::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaRsp.app_id)
  return _internal_app_id();
}
inline void UnpublishMediaRsp::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.app_id_ = value;
}
inline void UnpublishMediaRsp::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaRsp.app_id)
}

// required uint32 group_id = 2;
inline bool UnpublishMediaRsp::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UnpublishMediaRsp::has_group_id() const {
  return _internal_has_group_id();
}
inline void UnpublishMediaRsp::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t UnpublishMediaRsp::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t UnpublishMediaRsp::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaRsp.group_id)
  return _internal_group_id();
}
inline void UnpublishMediaRsp::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.group_id_ = value;
}
inline void UnpublishMediaRsp::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaRsp.group_id)
}

// required uint32 user_type = 3;
inline bool UnpublishMediaRsp::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UnpublishMediaRsp::has_user_type() const {
  return _internal_has_user_type();
}
inline void UnpublishMediaRsp::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t UnpublishMediaRsp::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t UnpublishMediaRsp::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaRsp.user_type)
  return _internal_user_type();
}
inline void UnpublishMediaRsp::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_type_ = value;
}
inline void UnpublishMediaRsp::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaRsp.user_type)
}

// required uint32 user_id = 4;
inline bool UnpublishMediaRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UnpublishMediaRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void UnpublishMediaRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t UnpublishMediaRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t UnpublishMediaRsp::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaRsp.user_id)
  return _internal_user_id();
}
inline void UnpublishMediaRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.user_id_ = value;
}
inline void UnpublishMediaRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaRsp.user_id)
}

// required uint32 login_id = 5;
inline bool UnpublishMediaRsp::_internal_has_login_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UnpublishMediaRsp::has_login_id() const {
  return _internal_has_login_id();
}
inline void UnpublishMediaRsp::clear_login_id() {
  _impl_.login_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t UnpublishMediaRsp::_internal_login_id() const {
  return _impl_.login_id_;
}
inline uint32_t UnpublishMediaRsp::login_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaRsp.login_id)
  return _internal_login_id();
}
inline void UnpublishMediaRsp::_internal_set_login_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.login_id_ = value;
}
inline void UnpublishMediaRsp::set_login_id(uint32_t value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaRsp.login_id)
}

// required .jukey.prot.MediaEntry media_entry = 6;
inline bool UnpublishMediaRsp::_internal_has_media_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.media_entry_ != nullptr);
  return value;
}
inline bool UnpublishMediaRsp::has_media_entry() const {
  return _internal_has_media_entry();
}
inline void UnpublishMediaRsp::clear_media_entry() {
  if (_impl_.media_entry_ != nullptr) _impl_.media_entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::jukey::prot::MediaEntry& UnpublishMediaRsp::_internal_media_entry() const {
  const ::jukey::prot::MediaEntry* p = _impl_.media_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::jukey::prot::MediaEntry&>(
      ::jukey::prot::_MediaEntry_default_instance_);
}
inline const ::jukey::prot::MediaEntry& UnpublishMediaRsp::media_entry() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaRsp.media_entry)
  return _internal_media_entry();
}
inline void UnpublishMediaRsp::unsafe_arena_set_allocated_media_entry(
    ::jukey::prot::MediaEntry* media_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_entry_);
  }
  _impl_.media_entry_ = media_entry;
  if (media_entry) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jukey.prot.UnpublishMediaRsp.media_entry)
}
inline ::jukey::prot::MediaEntry* UnpublishMediaRsp::release_media_entry() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaRsp::unsafe_arena_release_media_entry() {
  // @@protoc_insertion_point(field_release:jukey.prot.UnpublishMediaRsp.media_entry)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
  return temp;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaRsp::_internal_mutable_media_entry() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.media_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::jukey::prot::MediaEntry>(GetArenaForAllocation());
    _impl_.media_entry_ = p;
  }
  return _impl_.media_entry_;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaRsp::mutable_media_entry() {
  ::jukey::prot::MediaEntry* _msg = _internal_mutable_media_entry();
  // @@protoc_insertion_point(field_mutable:jukey.prot.UnpublishMediaRsp.media_entry)
  return _msg;
}
inline void UnpublishMediaRsp::set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.media_entry_;
  }
  if (media_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media_entry);
    if (message_arena != submessage_arena) {
      media_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_entry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.media_entry_ = media_entry;
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.UnpublishMediaRsp.media_entry)
}

// required uint32 result = 7;
inline bool UnpublishMediaRsp::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UnpublishMediaRsp::has_result() const {
  return _internal_has_result();
}
inline void UnpublishMediaRsp::clear_result() {
  _impl_.result_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t UnpublishMediaRsp::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t UnpublishMediaRsp::result() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaRsp.result)
  return _internal_result();
}
inline void UnpublishMediaRsp::_internal_set_result(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.result_ = value;
}
inline void UnpublishMediaRsp::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaRsp.result)
}

// required string msg = 8;
inline bool UnpublishMediaRsp::_internal_has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnpublishMediaRsp::has_msg() const {
  return _internal_has_msg();
}
inline void UnpublishMediaRsp::clear_msg() {
  _impl_.msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UnpublishMediaRsp::msg() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaRsp.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnpublishMediaRsp::set_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaRsp.msg)
}
inline std::string* UnpublishMediaRsp::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:jukey.prot.UnpublishMediaRsp.msg)
  return _s;
}
inline const std::string& UnpublishMediaRsp::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void UnpublishMediaRsp::_internal_set_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* UnpublishMediaRsp::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* UnpublishMediaRsp::release_msg() {
  // @@protoc_insertion_point(field_release:jukey.prot.UnpublishMediaRsp.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UnpublishMediaRsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.UnpublishMediaRsp.msg)
}

// -------------------------------------------------------------------

// UnpublishMediaNotify

// required uint32 app_id = 1;
inline bool UnpublishMediaNotify::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnpublishMediaNotify::has_app_id() const {
  return _internal_has_app_id();
}
inline void UnpublishMediaNotify::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t UnpublishMediaNotify::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t UnpublishMediaNotify::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaNotify.app_id)
  return _internal_app_id();
}
inline void UnpublishMediaNotify::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void UnpublishMediaNotify::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaNotify.app_id)
}

// required uint32 group_id = 2;
inline bool UnpublishMediaNotify::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UnpublishMediaNotify::has_group_id() const {
  return _internal_has_group_id();
}
inline void UnpublishMediaNotify::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t UnpublishMediaNotify::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t UnpublishMediaNotify::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaNotify.group_id)
  return _internal_group_id();
}
inline void UnpublishMediaNotify::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void UnpublishMediaNotify::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaNotify.group_id)
}

// required uint32 user_type = 3;
inline bool UnpublishMediaNotify::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UnpublishMediaNotify::has_user_type() const {
  return _internal_has_user_type();
}
inline void UnpublishMediaNotify::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t UnpublishMediaNotify::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t UnpublishMediaNotify::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaNotify.user_type)
  return _internal_user_type();
}
inline void UnpublishMediaNotify::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_type_ = value;
}
inline void UnpublishMediaNotify::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaNotify.user_type)
}

// required uint32 user_id = 4;
inline bool UnpublishMediaNotify::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UnpublishMediaNotify::has_user_id() const {
  return _internal_has_user_id();
}
inline void UnpublishMediaNotify::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t UnpublishMediaNotify::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t UnpublishMediaNotify::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaNotify.user_id)
  return _internal_user_id();
}
inline void UnpublishMediaNotify::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_id_ = value;
}
inline void UnpublishMediaNotify::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaNotify.user_id)
}

// required .jukey.prot.MediaEntry media_entry = 5;
inline bool UnpublishMediaNotify::_internal_has_media_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.media_entry_ != nullptr);
  return value;
}
inline bool UnpublishMediaNotify::has_media_entry() const {
  return _internal_has_media_entry();
}
inline void UnpublishMediaNotify::clear_media_entry() {
  if (_impl_.media_entry_ != nullptr) _impl_.media_entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::jukey::prot::MediaEntry& UnpublishMediaNotify::_internal_media_entry() const {
  const ::jukey::prot::MediaEntry* p = _impl_.media_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::jukey::prot::MediaEntry&>(
      ::jukey::prot::_MediaEntry_default_instance_);
}
inline const ::jukey::prot::MediaEntry& UnpublishMediaNotify::media_entry() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaNotify.media_entry)
  return _internal_media_entry();
}
inline void UnpublishMediaNotify::unsafe_arena_set_allocated_media_entry(
    ::jukey::prot::MediaEntry* media_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_entry_);
  }
  _impl_.media_entry_ = media_entry;
  if (media_entry) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jukey.prot.UnpublishMediaNotify.media_entry)
}
inline ::jukey::prot::MediaEntry* UnpublishMediaNotify::release_media_entry() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaNotify::unsafe_arena_release_media_entry() {
  // @@protoc_insertion_point(field_release:jukey.prot.UnpublishMediaNotify.media_entry)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
  return temp;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaNotify::_internal_mutable_media_entry() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.media_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::jukey::prot::MediaEntry>(GetArenaForAllocation());
    _impl_.media_entry_ = p;
  }
  return _impl_.media_entry_;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaNotify::mutable_media_entry() {
  ::jukey::prot::MediaEntry* _msg = _internal_mutable_media_entry();
  // @@protoc_insertion_point(field_mutable:jukey.prot.UnpublishMediaNotify.media_entry)
  return _msg;
}
inline void UnpublishMediaNotify::set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.media_entry_;
  }
  if (media_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media_entry);
    if (message_arena != submessage_arena) {
      media_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_entry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.media_entry_ = media_entry;
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.UnpublishMediaNotify.media_entry)
}

// required bool need_ack = 6;
inline bool UnpublishMediaNotify::_internal_has_need_ack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UnpublishMediaNotify::has_need_ack() const {
  return _internal_has_need_ack();
}
inline void UnpublishMediaNotify::clear_need_ack() {
  _impl_.need_ack_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool UnpublishMediaNotify::_internal_need_ack() const {
  return _impl_.need_ack_;
}
inline bool UnpublishMediaNotify::need_ack() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaNotify.need_ack)
  return _internal_need_ack();
}
inline void UnpublishMediaNotify::_internal_set_need_ack(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.need_ack_ = value;
}
inline void UnpublishMediaNotify::set_need_ack(bool value) {
  _internal_set_need_ack(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaNotify.need_ack)
}

// -------------------------------------------------------------------

// UnpublishMediaAck

// required uint32 app_id = 1;
inline bool UnpublishMediaAck::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnpublishMediaAck::has_app_id() const {
  return _internal_has_app_id();
}
inline void UnpublishMediaAck::clear_app_id() {
  _impl_.app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t UnpublishMediaAck::_internal_app_id() const {
  return _impl_.app_id_;
}
inline uint32_t UnpublishMediaAck::app_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaAck.app_id)
  return _internal_app_id();
}
inline void UnpublishMediaAck::_internal_set_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void UnpublishMediaAck::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaAck.app_id)
}

// required uint32 group_id = 2;
inline bool UnpublishMediaAck::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UnpublishMediaAck::has_group_id() const {
  return _internal_has_group_id();
}
inline void UnpublishMediaAck::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t UnpublishMediaAck::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t UnpublishMediaAck::group_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaAck.group_id)
  return _internal_group_id();
}
inline void UnpublishMediaAck::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void UnpublishMediaAck::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaAck.group_id)
}

// required uint32 user_type = 3;
inline bool UnpublishMediaAck::_internal_has_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UnpublishMediaAck::has_user_type() const {
  return _internal_has_user_type();
}
inline void UnpublishMediaAck::clear_user_type() {
  _impl_.user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t UnpublishMediaAck::_internal_user_type() const {
  return _impl_.user_type_;
}
inline uint32_t UnpublishMediaAck::user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaAck.user_type)
  return _internal_user_type();
}
inline void UnpublishMediaAck::_internal_set_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_type_ = value;
}
inline void UnpublishMediaAck::set_user_type(uint32_t value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaAck.user_type)
}

// required uint32 user_id = 4;
inline bool UnpublishMediaAck::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UnpublishMediaAck::has_user_id() const {
  return _internal_has_user_id();
}
inline void UnpublishMediaAck::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t UnpublishMediaAck::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t UnpublishMediaAck::user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaAck.user_id)
  return _internal_user_id();
}
inline void UnpublishMediaAck::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.user_id_ = value;
}
inline void UnpublishMediaAck::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaAck.user_id)
}

// required .jukey.prot.MediaEntry media_entry = 5;
inline bool UnpublishMediaAck::_internal_has_media_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.media_entry_ != nullptr);
  return value;
}
inline bool UnpublishMediaAck::has_media_entry() const {
  return _internal_has_media_entry();
}
inline void UnpublishMediaAck::clear_media_entry() {
  if (_impl_.media_entry_ != nullptr) _impl_.media_entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::jukey::prot::MediaEntry& UnpublishMediaAck::_internal_media_entry() const {
  const ::jukey::prot::MediaEntry* p = _impl_.media_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::jukey::prot::MediaEntry&>(
      ::jukey::prot::_MediaEntry_default_instance_);
}
inline const ::jukey::prot::MediaEntry& UnpublishMediaAck::media_entry() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaAck.media_entry)
  return _internal_media_entry();
}
inline void UnpublishMediaAck::unsafe_arena_set_allocated_media_entry(
    ::jukey::prot::MediaEntry* media_entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.media_entry_);
  }
  _impl_.media_entry_ = media_entry;
  if (media_entry) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jukey.prot.UnpublishMediaAck.media_entry)
}
inline ::jukey::prot::MediaEntry* UnpublishMediaAck::release_media_entry() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaAck::unsafe_arena_release_media_entry() {
  // @@protoc_insertion_point(field_release:jukey.prot.UnpublishMediaAck.media_entry)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::jukey::prot::MediaEntry* temp = _impl_.media_entry_;
  _impl_.media_entry_ = nullptr;
  return temp;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaAck::_internal_mutable_media_entry() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.media_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::jukey::prot::MediaEntry>(GetArenaForAllocation());
    _impl_.media_entry_ = p;
  }
  return _impl_.media_entry_;
}
inline ::jukey::prot::MediaEntry* UnpublishMediaAck::mutable_media_entry() {
  ::jukey::prot::MediaEntry* _msg = _internal_mutable_media_entry();
  // @@protoc_insertion_point(field_mutable:jukey.prot.UnpublishMediaAck.media_entry)
  return _msg;
}
inline void UnpublishMediaAck::set_allocated_media_entry(::jukey::prot::MediaEntry* media_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.media_entry_;
  }
  if (media_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(media_entry);
    if (message_arena != submessage_arena) {
      media_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_entry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.media_entry_ = media_entry;
  // @@protoc_insertion_point(field_set_allocated:jukey.prot.UnpublishMediaAck.media_entry)
}

// required uint32 ack_user_id = 6;
inline bool UnpublishMediaAck::_internal_has_ack_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UnpublishMediaAck::has_ack_user_id() const {
  return _internal_has_ack_user_id();
}
inline void UnpublishMediaAck::clear_ack_user_id() {
  _impl_.ack_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t UnpublishMediaAck::_internal_ack_user_id() const {
  return _impl_.ack_user_id_;
}
inline uint32_t UnpublishMediaAck::ack_user_id() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaAck.ack_user_id)
  return _internal_ack_user_id();
}
inline void UnpublishMediaAck::_internal_set_ack_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ack_user_id_ = value;
}
inline void UnpublishMediaAck::set_ack_user_id(uint32_t value) {
  _internal_set_ack_user_id(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaAck.ack_user_id)
}

// required uint32 ack_user_type = 7;
inline bool UnpublishMediaAck::_internal_has_ack_user_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UnpublishMediaAck::has_ack_user_type() const {
  return _internal_has_ack_user_type();
}
inline void UnpublishMediaAck::clear_ack_user_type() {
  _impl_.ack_user_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t UnpublishMediaAck::_internal_ack_user_type() const {
  return _impl_.ack_user_type_;
}
inline uint32_t UnpublishMediaAck::ack_user_type() const {
  // @@protoc_insertion_point(field_get:jukey.prot.UnpublishMediaAck.ack_user_type)
  return _internal_ack_user_type();
}
inline void UnpublishMediaAck::_internal_set_ack_user_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ack_user_type_ = value;
}
inline void UnpublishMediaAck::set_ack_user_type(uint32_t value) {
  _internal_set_ack_user_type(value);
  // @@protoc_insertion_point(field_set:jukey.prot.UnpublishMediaAck.ack_user_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prot
}  // namespace jukey

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_group_2eproto
