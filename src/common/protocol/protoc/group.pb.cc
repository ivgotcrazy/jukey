// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#include "group.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace jukey {
namespace prot {
PROTOBUF_CONSTEXPR MediaEntry::MediaEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.media_src_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_type_)*/0u
  , /*decltype(_impl_.media_src_type_)*/0u} {}
struct MediaEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaEntryDefaultTypeInternal() {}
  union {
    MediaEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaEntryDefaultTypeInternal _MediaEntry_default_instance_;
PROTOBUF_CONSTEXPR JoinGroupReq::JoinGroupReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_entries_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u} {}
struct JoinGroupReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinGroupReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinGroupReqDefaultTypeInternal() {}
  union {
    JoinGroupReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinGroupReqDefaultTypeInternal _JoinGroupReq_default_instance_;
PROTOBUF_CONSTEXPR MediaStateEntry::MediaStateEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_entry_)*/nullptr
  , /*decltype(_impl_.media_state_)*/0u} {}
struct MediaStateEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaStateEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaStateEntryDefaultTypeInternal() {}
  union {
    MediaStateEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaStateEntryDefaultTypeInternal _MediaStateEntry_default_instance_;
PROTOBUF_CONSTEXPR GroupUser::GroupUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_state_entries_)*/{}
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u} {}
struct GroupUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupUserDefaultTypeInternal() {}
  union {
    GroupUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupUserDefaultTypeInternal _GroupUser_default_instance_;
PROTOBUF_CONSTEXPR JoinGroupRsp::JoinGroupRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_users_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct JoinGroupRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinGroupRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinGroupRspDefaultTypeInternal() {}
  union {
    JoinGroupRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinGroupRspDefaultTypeInternal _JoinGroupRsp_default_instance_;
PROTOBUF_CONSTEXPR JoinGroupNotify::JoinGroupNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_entries_)*/{}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u} {}
struct JoinGroupNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinGroupNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinGroupNotifyDefaultTypeInternal() {}
  union {
    JoinGroupNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinGroupNotifyDefaultTypeInternal _JoinGroupNotify_default_instance_;
PROTOBUF_CONSTEXPR LeaveGroupReq::LeaveGroupReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u} {}
struct LeaveGroupReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveGroupReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveGroupReqDefaultTypeInternal() {}
  union {
    LeaveGroupReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveGroupReqDefaultTypeInternal _LeaveGroupReq_default_instance_;
PROTOBUF_CONSTEXPR LeaveGroupRsp::LeaveGroupRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct LeaveGroupRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveGroupRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveGroupRspDefaultTypeInternal() {}
  union {
    LeaveGroupRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveGroupRspDefaultTypeInternal _LeaveGroupRsp_default_instance_;
PROTOBUF_CONSTEXPR LeaveGroupNotify::LeaveGroupNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u} {}
struct LeaveGroupNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveGroupNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveGroupNotifyDefaultTypeInternal() {}
  union {
    LeaveGroupNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveGroupNotifyDefaultTypeInternal _LeaveGroupNotify_default_instance_;
PROTOBUF_CONSTEXPR PublishMediaReq::PublishMediaReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_entry_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u} {}
struct PublishMediaReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishMediaReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishMediaReqDefaultTypeInternal() {}
  union {
    PublishMediaReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishMediaReqDefaultTypeInternal _PublishMediaReq_default_instance_;
PROTOBUF_CONSTEXPR PublishMediaRsp::PublishMediaRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.media_entry_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct PublishMediaRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishMediaRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishMediaRspDefaultTypeInternal() {}
  union {
    PublishMediaRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishMediaRspDefaultTypeInternal _PublishMediaRsp_default_instance_;
PROTOBUF_CONSTEXPR PublishMediaNotify::PublishMediaNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_entry_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.need_ack_)*/false} {}
struct PublishMediaNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishMediaNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishMediaNotifyDefaultTypeInternal() {}
  union {
    PublishMediaNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishMediaNotifyDefaultTypeInternal _PublishMediaNotify_default_instance_;
PROTOBUF_CONSTEXPR PublishMediaAck::PublishMediaAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_entry_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.ack_user_id_)*/0u
  , /*decltype(_impl_.ack_user_type_)*/0u} {}
struct PublishMediaAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishMediaAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishMediaAckDefaultTypeInternal() {}
  union {
    PublishMediaAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishMediaAckDefaultTypeInternal _PublishMediaAck_default_instance_;
PROTOBUF_CONSTEXPR UnpublishMediaReq::UnpublishMediaReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_entry_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u} {}
struct UnpublishMediaReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnpublishMediaReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnpublishMediaReqDefaultTypeInternal() {}
  union {
    UnpublishMediaReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnpublishMediaReqDefaultTypeInternal _UnpublishMediaReq_default_instance_;
PROTOBUF_CONSTEXPR UnpublishMediaRsp::UnpublishMediaRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.media_entry_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct UnpublishMediaRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnpublishMediaRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnpublishMediaRspDefaultTypeInternal() {}
  union {
    UnpublishMediaRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnpublishMediaRspDefaultTypeInternal _UnpublishMediaRsp_default_instance_;
PROTOBUF_CONSTEXPR UnpublishMediaNotify::UnpublishMediaNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_entry_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.need_ack_)*/false} {}
struct UnpublishMediaNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnpublishMediaNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnpublishMediaNotifyDefaultTypeInternal() {}
  union {
    UnpublishMediaNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnpublishMediaNotifyDefaultTypeInternal _UnpublishMediaNotify_default_instance_;
PROTOBUF_CONSTEXPR UnpublishMediaAck::UnpublishMediaAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.media_entry_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.ack_user_id_)*/0u
  , /*decltype(_impl_.ack_user_type_)*/0u} {}
struct UnpublishMediaAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnpublishMediaAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnpublishMediaAckDefaultTypeInternal() {}
  union {
    UnpublishMediaAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnpublishMediaAckDefaultTypeInternal _UnpublishMediaAck_default_instance_;
}  // namespace prot
}  // namespace jukey
static ::_pb::Metadata file_level_metadata_group_2eproto[17];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_group_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_group_2eproto = nullptr;

const uint32_t TableStruct_group_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::jukey::prot::MediaEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::MediaEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::MediaEntry, _impl_.stream_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::MediaEntry, _impl_.stream_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::MediaEntry, _impl_.media_src_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::MediaEntry, _impl_.media_src_id_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupReq, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupReq, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupReq, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupReq, _impl_.media_entries_),
  1,
  2,
  3,
  4,
  5,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::MediaStateEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::MediaStateEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::MediaStateEntry, _impl_.media_entry_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::MediaStateEntry, _impl_.media_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GroupUser, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GroupUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GroupUser, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GroupUser, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GroupUser, _impl_.media_state_entries_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupRsp, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupRsp, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupRsp, _impl_.group_users_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupRsp, _impl_.msg_),
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupNotify, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupNotify, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupNotify, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupNotify, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupNotify, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::JoinGroupNotify, _impl_.media_entries_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupReq, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupReq, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupReq, _impl_.token_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupRsp, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupRsp, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupRsp, _impl_.msg_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupNotify, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupNotify, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupNotify, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupNotify, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LeaveGroupNotify, _impl_.user_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaReq, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaReq, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaReq, _impl_.media_entry_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaRsp, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaRsp, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaRsp, _impl_.media_entry_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaRsp, _impl_.msg_),
  2,
  3,
  4,
  5,
  6,
  1,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaNotify, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaNotify, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaNotify, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaNotify, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaNotify, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaNotify, _impl_.media_entry_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaNotify, _impl_.need_ack_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaAck, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaAck, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaAck, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaAck, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaAck, _impl_.media_entry_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaAck, _impl_.ack_user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishMediaAck, _impl_.ack_user_type_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaReq, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaReq, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaReq, _impl_.media_entry_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaRsp, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaRsp, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaRsp, _impl_.media_entry_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaRsp, _impl_.msg_),
  2,
  3,
  4,
  5,
  6,
  1,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaNotify, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaNotify, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaNotify, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaNotify, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaNotify, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaNotify, _impl_.media_entry_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaNotify, _impl_.need_ack_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaAck, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaAck, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaAck, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaAck, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaAck, _impl_.media_entry_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaAck, _impl_.ack_user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishMediaAck, _impl_.ack_user_type_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::jukey::prot::MediaEntry)},
  { 14, 27, -1, sizeof(::jukey::prot::JoinGroupReq)},
  { 34, 42, -1, sizeof(::jukey::prot::MediaStateEntry)},
  { 44, 53, -1, sizeof(::jukey::prot::GroupUser)},
  { 56, 70, -1, sizeof(::jukey::prot::JoinGroupRsp)},
  { 78, 89, -1, sizeof(::jukey::prot::JoinGroupNotify)},
  { 94, 106, -1, sizeof(::jukey::prot::LeaveGroupReq)},
  { 112, 125, -1, sizeof(::jukey::prot::LeaveGroupRsp)},
  { 132, 142, -1, sizeof(::jukey::prot::LeaveGroupNotify)},
  { 146, 158, -1, sizeof(::jukey::prot::PublishMediaReq)},
  { 164, 178, -1, sizeof(::jukey::prot::PublishMediaRsp)},
  { 186, 198, -1, sizeof(::jukey::prot::PublishMediaNotify)},
  { 204, 217, -1, sizeof(::jukey::prot::PublishMediaAck)},
  { 224, 236, -1, sizeof(::jukey::prot::UnpublishMediaReq)},
  { 242, 256, -1, sizeof(::jukey::prot::UnpublishMediaRsp)},
  { 264, 276, -1, sizeof(::jukey::prot::UnpublishMediaNotify)},
  { 282, 295, -1, sizeof(::jukey::prot::UnpublishMediaAck)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::jukey::prot::_MediaEntry_default_instance_._instance,
  &::jukey::prot::_JoinGroupReq_default_instance_._instance,
  &::jukey::prot::_MediaStateEntry_default_instance_._instance,
  &::jukey::prot::_GroupUser_default_instance_._instance,
  &::jukey::prot::_JoinGroupRsp_default_instance_._instance,
  &::jukey::prot::_JoinGroupNotify_default_instance_._instance,
  &::jukey::prot::_LeaveGroupReq_default_instance_._instance,
  &::jukey::prot::_LeaveGroupRsp_default_instance_._instance,
  &::jukey::prot::_LeaveGroupNotify_default_instance_._instance,
  &::jukey::prot::_PublishMediaReq_default_instance_._instance,
  &::jukey::prot::_PublishMediaRsp_default_instance_._instance,
  &::jukey::prot::_PublishMediaNotify_default_instance_._instance,
  &::jukey::prot::_PublishMediaAck_default_instance_._instance,
  &::jukey::prot::_UnpublishMediaReq_default_instance_._instance,
  &::jukey::prot::_UnpublishMediaRsp_default_instance_._instance,
  &::jukey::prot::_UnpublishMediaNotify_default_instance_._instance,
  &::jukey::prot::_UnpublishMediaAck_default_instance_._instance,
};

const char descriptor_table_protodef_group_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013group.proto\022\njukey.prot\"b\n\nMediaEntry\022"
  "\023\n\013stream_type\030\001 \002(\r\022\021\n\tstream_id\030\002 \002(\t\022"
  "\026\n\016media_src_type\030\003 \002(\r\022\024\n\014media_src_id\030"
  "\004 \002(\t\"\244\001\n\014JoinGroupReq\022\016\n\006app_id\030\001 \002(\r\022\020"
  "\n\010group_id\030\002 \002(\r\022\021\n\tuser_type\030\003 \002(\r\022\017\n\007u"
  "ser_id\030\004 \002(\r\022\020\n\010login_id\030\005 \002(\r\022\r\n\005token\030"
  "\006 \002(\t\022-\n\rmedia_entries\030\007 \003(\0132\026.jukey.pro"
  "t.MediaEntry\"S\n\017MediaStateEntry\022+\n\013media"
  "_entry\030\001 \002(\0132\026.jukey.prot.MediaEntry\022\023\n\013"
  "media_state\030\002 \002(\r\"i\n\tGroupUser\022\021\n\tuser_t"
  "ype\030\001 \002(\r\022\017\n\007user_id\030\002 \002(\r\0228\n\023media_stat"
  "e_entries\030\003 \003(\0132\033.jukey.prot.MediaStateE"
  "ntry\"\257\001\n\014JoinGroupRsp\022\016\n\006app_id\030\001 \002(\r\022\020\n"
  "\010group_id\030\002 \002(\r\022\021\n\tuser_type\030\003 \002(\r\022\017\n\007us"
  "er_id\030\004 \002(\r\022\020\n\010login_id\030\005 \002(\r\022*\n\013group_u"
  "sers\030\006 \003(\0132\025.jukey.prot.GroupUser\022\016\n\006res"
  "ult\030\007 \002(\r\022\013\n\003msg\030\010 \002(\t\"\206\001\n\017JoinGroupNoti"
  "fy\022\016\n\006app_id\030\001 \002(\r\022\020\n\010group_id\030\002 \002(\r\022\021\n\t"
  "user_type\030\003 \002(\r\022\017\n\007user_id\030\004 \002(\r\022-\n\rmedi"
  "a_entries\030\005 \003(\0132\026.jukey.prot.MediaEntry\""
  "v\n\rLeaveGroupReq\022\016\n\006app_id\030\001 \002(\r\022\020\n\010grou"
  "p_id\030\002 \002(\r\022\021\n\tuser_type\030\003 \002(\r\022\017\n\007user_id"
  "\030\004 \002(\r\022\020\n\010login_id\030\005 \002(\r\022\r\n\005token\030\006 \002(\t\""
  "\204\001\n\rLeaveGroupRsp\022\016\n\006app_id\030\001 \002(\r\022\020\n\010gro"
  "up_id\030\002 \002(\r\022\021\n\tuser_type\030\003 \002(\r\022\017\n\007user_i"
  "d\030\004 \002(\r\022\020\n\010login_id\030\005 \002(\r\022\016\n\006result\030\006 \002("
  "\r\022\013\n\003msg\030\007 \002(\t\"X\n\020LeaveGroupNotify\022\016\n\006ap"
  "p_id\030\001 \002(\r\022\020\n\010group_id\030\002 \002(\r\022\021\n\tuser_typ"
  "e\030\003 \002(\r\022\017\n\007user_id\030\004 \002(\r\"\226\001\n\017PublishMedi"
  "aReq\022\016\n\006app_id\030\001 \002(\r\022\020\n\010group_id\030\002 \002(\r\022\021"
  "\n\tuser_type\030\003 \002(\r\022\017\n\007user_id\030\004 \002(\r\022\020\n\010lo"
  "gin_id\030\005 \002(\r\022+\n\013media_entry\030\006 \002(\0132\026.juke"
  "y.prot.MediaEntry\"\263\001\n\017PublishMediaRsp\022\016\n"
  "\006app_id\030\001 \002(\r\022\020\n\010group_id\030\002 \002(\r\022\021\n\tuser_"
  "type\030\003 \002(\r\022\017\n\007user_id\030\004 \002(\r\022\020\n\010login_id\030"
  "\005 \002(\r\022+\n\013media_entry\030\006 \002(\0132\026.jukey.prot."
  "MediaEntry\022\016\n\006result\030\007 \002(\r\022\013\n\003msg\030\010 \002(\t\""
  "\231\001\n\022PublishMediaNotify\022\016\n\006app_id\030\001 \002(\r\022\020"
  "\n\010group_id\030\002 \002(\r\022\021\n\tuser_type\030\003 \002(\r\022\017\n\007u"
  "ser_id\030\004 \002(\r\022+\n\013media_entry\030\005 \002(\0132\026.juke"
  "y.prot.MediaEntry\022\020\n\010need_ack\030\006 \002(\010\"\260\001\n\017"
  "PublishMediaAck\022\016\n\006app_id\030\001 \002(\r\022\020\n\010group"
  "_id\030\002 \002(\r\022\021\n\tuser_type\030\003 \002(\r\022\017\n\007user_id\030"
  "\004 \002(\r\022+\n\013media_entry\030\005 \002(\0132\026.jukey.prot."
  "MediaEntry\022\023\n\013ack_user_id\030\006 \002(\r\022\025\n\rack_u"
  "ser_type\030\007 \002(\r\"\230\001\n\021UnpublishMediaReq\022\016\n\006"
  "app_id\030\001 \002(\r\022\020\n\010group_id\030\002 \002(\r\022\021\n\tuser_t"
  "ype\030\003 \002(\r\022\017\n\007user_id\030\004 \002(\r\022\020\n\010login_id\030\005"
  " \002(\r\022+\n\013media_entry\030\006 \002(\0132\026.jukey.prot.M"
  "ediaEntry\"\265\001\n\021UnpublishMediaRsp\022\016\n\006app_i"
  "d\030\001 \002(\r\022\020\n\010group_id\030\002 \002(\r\022\021\n\tuser_type\030\003"
  " \002(\r\022\017\n\007user_id\030\004 \002(\r\022\020\n\010login_id\030\005 \002(\r\022"
  "+\n\013media_entry\030\006 \002(\0132\026.jukey.prot.MediaE"
  "ntry\022\016\n\006result\030\007 \002(\r\022\013\n\003msg\030\010 \002(\t\"\233\001\n\024Un"
  "publishMediaNotify\022\016\n\006app_id\030\001 \002(\r\022\020\n\010gr"
  "oup_id\030\002 \002(\r\022\021\n\tuser_type\030\003 \002(\r\022\017\n\007user_"
  "id\030\004 \002(\r\022+\n\013media_entry\030\005 \002(\0132\026.jukey.pr"
  "ot.MediaEntry\022\020\n\010need_ack\030\006 \002(\010\"\262\001\n\021Unpu"
  "blishMediaAck\022\016\n\006app_id\030\001 \002(\r\022\020\n\010group_i"
  "d\030\002 \002(\r\022\021\n\tuser_type\030\003 \002(\r\022\017\n\007user_id\030\004 "
  "\002(\r\022+\n\013media_entry\030\005 \002(\0132\026.jukey.prot.Me"
  "diaEntry\022\023\n\013ack_user_id\030\006 \002(\r\022\025\n\rack_use"
  "r_type\030\007 \002(\r"
  ;
static ::_pbi::once_flag descriptor_table_group_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_group_2eproto = {
    false, false, 2492, descriptor_table_protodef_group_2eproto,
    "group.proto",
    &descriptor_table_group_2eproto_once, nullptr, 0, 17,
    schemas, file_default_instances, TableStruct_group_2eproto::offsets,
    file_level_metadata_group_2eproto, file_level_enum_descriptors_group_2eproto,
    file_level_service_descriptors_group_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_group_2eproto_getter() {
  return &descriptor_table_group_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_group_2eproto(&descriptor_table_group_2eproto);
namespace jukey {
namespace prot {

// ===================================================================

class MediaEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaEntry>()._impl_._has_bits_);
  static void set_has_stream_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_media_src_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_media_src_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

MediaEntry::MediaEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.MediaEntry)
}
MediaEntry::MediaEntry(const MediaEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.media_src_id_){}
    , decltype(_impl_.stream_type_){}
    , decltype(_impl_.media_src_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stream_id()) {
    _this->_impl_.stream_id_.Set(from._internal_stream_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.media_src_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_src_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_media_src_id()) {
    _this->_impl_.media_src_id_.Set(from._internal_media_src_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.stream_type_, &from._impl_.stream_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.media_src_type_) -
    reinterpret_cast<char*>(&_impl_.stream_type_)) + sizeof(_impl_.media_src_type_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.MediaEntry)
}

inline void MediaEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_id_){}
    , decltype(_impl_.media_src_id_){}
    , decltype(_impl_.stream_type_){0u}
    , decltype(_impl_.media_src_type_){0u}
  };
  _impl_.stream_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.media_src_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_src_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MediaEntry::~MediaEntry() {
  // @@protoc_insertion_point(destructor:jukey.prot.MediaEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_id_.Destroy();
  _impl_.media_src_id_.Destroy();
}

void MediaEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.MediaEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stream_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.media_src_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.stream_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.media_src_type_) -
        reinterpret_cast<char*>(&_impl_.stream_type_)) + sizeof(_impl_.media_src_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 stream_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stream_type(&has_bits);
          _impl_.stream_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.MediaEntry.stream_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 media_src_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_media_src_type(&has_bits);
          _impl_.media_src_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string media_src_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_media_src_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.MediaEntry.media_src_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.MediaEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 stream_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stream_type(), target);
  }

  // required string stream_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.MediaEntry.stream_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stream_id(), target);
  }

  // required uint32 media_src_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_media_src_type(), target);
  }

  // required string media_src_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_media_src_id().data(), static_cast<int>(this->_internal_media_src_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.MediaEntry.media_src_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_media_src_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.MediaEntry)
  return target;
}

size_t MediaEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.MediaEntry)
  size_t total_size = 0;

  if (_internal_has_stream_id()) {
    // required string stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  if (_internal_has_media_src_id()) {
    // required string media_src_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_src_id());
  }

  if (_internal_has_stream_type()) {
    // required uint32 stream_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stream_type());
  }

  if (_internal_has_media_src_type()) {
    // required uint32 media_src_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_media_src_type());
  }

  return total_size;
}
size_t MediaEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.MediaEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string stream_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());

    // required string media_src_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_src_id());

    // required uint32 stream_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stream_type());

    // required uint32 media_src_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_media_src_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaEntry::GetClassData() const { return &_class_data_; }


void MediaEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaEntry*>(&to_msg);
  auto& from = static_cast<const MediaEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.MediaEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stream_id(from._internal_stream_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_media_src_id(from._internal_media_src_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.stream_type_ = from._impl_.stream_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.media_src_type_ = from._impl_.media_src_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaEntry::CopyFrom(const MediaEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.MediaEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MediaEntry::InternalSwap(MediaEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_id_, lhs_arena,
      &other->_impl_.stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.media_src_id_, lhs_arena,
      &other->_impl_.media_src_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaEntry, _impl_.media_src_type_)
      + sizeof(MediaEntry::_impl_.media_src_type_)
      - PROTOBUF_FIELD_OFFSET(MediaEntry, _impl_.stream_type_)>(
          reinterpret_cast<char*>(&_impl_.stream_type_),
          reinterpret_cast<char*>(&other->_impl_.stream_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[0]);
}

// ===================================================================

class JoinGroupReq::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinGroupReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

JoinGroupReq::JoinGroupReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.JoinGroupReq)
}
JoinGroupReq::JoinGroupReq(const JoinGroupReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinGroupReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entries_){from._impl_.media_entries_}
    , decltype(_impl_.token_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.login_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.JoinGroupReq)
}

inline void JoinGroupReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entries_){arena}
    , decltype(_impl_.token_){}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JoinGroupReq::~JoinGroupReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.JoinGroupReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinGroupReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_entries_.~RepeatedPtrField();
  _impl_.token_.Destroy();
}

void JoinGroupReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinGroupReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.JoinGroupReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.login_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGroupReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.JoinGroupReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .jukey.prot.MediaEntry media_entries = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_media_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinGroupReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.JoinGroupReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_login_id(), target);
  }

  // required string token = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.JoinGroupReq.token");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_token(), target);
  }

  // repeated .jukey.prot.MediaEntry media_entries = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_media_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_media_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.JoinGroupReq)
  return target;
}

size_t JoinGroupReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.JoinGroupReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  return total_size;
}
size_t JoinGroupReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.JoinGroupReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string token = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jukey.prot.MediaEntry media_entries = 7;
  total_size += 1UL * this->_internal_media_entries_size();
  for (const auto& msg : this->_impl_.media_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinGroupReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinGroupReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinGroupReq::GetClassData() const { return &_class_data_; }


void JoinGroupReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinGroupReq*>(&to_msg);
  auto& from = static_cast<const JoinGroupReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.JoinGroupReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.media_entries_.MergeFrom(from._impl_.media_entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinGroupReq::CopyFrom(const JoinGroupReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.JoinGroupReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.media_entries_))
    return false;
  return true;
}

void JoinGroupReq::InternalSwap(JoinGroupReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.media_entries_.InternalSwap(&other->_impl_.media_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinGroupReq, _impl_.login_id_)
      + sizeof(JoinGroupReq::_impl_.login_id_)
      - PROTOBUF_FIELD_OFFSET(JoinGroupReq, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGroupReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[1]);
}

// ===================================================================

class MediaStateEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaStateEntry>()._impl_._has_bits_);
  static const ::jukey::prot::MediaEntry& media_entry(const MediaStateEntry* msg);
  static void set_has_media_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_media_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::jukey::prot::MediaEntry&
MediaStateEntry::_Internal::media_entry(const MediaStateEntry* msg) {
  return *msg->_impl_.media_entry_;
}
MediaStateEntry::MediaStateEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.MediaStateEntry)
}
MediaStateEntry::MediaStateEntry(const MediaStateEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaStateEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.media_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_media_entry()) {
    _this->_impl_.media_entry_ = new ::jukey::prot::MediaEntry(*from._impl_.media_entry_);
  }
  _this->_impl_.media_state_ = from._impl_.media_state_;
  // @@protoc_insertion_point(copy_constructor:jukey.prot.MediaStateEntry)
}

inline void MediaStateEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.media_state_){0u}
  };
}

MediaStateEntry::~MediaStateEntry() {
  // @@protoc_insertion_point(destructor:jukey.prot.MediaStateEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaStateEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.media_entry_;
}

void MediaStateEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaStateEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.MediaStateEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.media_entry_ != nullptr);
    _impl_.media_entry_->Clear();
  }
  _impl_.media_state_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaStateEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.MediaEntry media_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 media_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_media_state(&has_bits);
          _impl_.media_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaStateEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.MediaStateEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.MediaEntry media_entry = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::media_entry(this),
        _Internal::media_entry(this).GetCachedSize(), target, stream);
  }

  // required uint32 media_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_media_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.MediaStateEntry)
  return target;
}

size_t MediaStateEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.MediaStateEntry)
  size_t total_size = 0;

  if (_internal_has_media_entry()) {
    // required .jukey.prot.MediaEntry media_entry = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);
  }

  if (_internal_has_media_state()) {
    // required uint32 media_state = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_media_state());
  }

  return total_size;
}
size_t MediaStateEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.MediaStateEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .jukey.prot.MediaEntry media_entry = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);

    // required uint32 media_state = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_media_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaStateEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaStateEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaStateEntry::GetClassData() const { return &_class_data_; }


void MediaStateEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaStateEntry*>(&to_msg);
  auto& from = static_cast<const MediaStateEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.MediaStateEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_media_entry()->::jukey::prot::MediaEntry::MergeFrom(
          from._internal_media_entry());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.media_state_ = from._impl_.media_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaStateEntry::CopyFrom(const MediaStateEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.MediaStateEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStateEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_media_entry()) {
    if (!_impl_.media_entry_->IsInitialized()) return false;
  }
  return true;
}

void MediaStateEntry::InternalSwap(MediaStateEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaStateEntry, _impl_.media_state_)
      + sizeof(MediaStateEntry::_impl_.media_state_)
      - PROTOBUF_FIELD_OFFSET(MediaStateEntry, _impl_.media_entry_)>(
          reinterpret_cast<char*>(&_impl_.media_entry_),
          reinterpret_cast<char*>(&other->_impl_.media_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaStateEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[2]);
}

// ===================================================================

class GroupUser::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupUser>()._impl_._has_bits_);
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GroupUser::GroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.GroupUser)
}
GroupUser::GroupUser(const GroupUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_state_entries_){from._impl_.media_state_entries_}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.user_type_, &from._impl_.user_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.user_type_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.GroupUser)
}

inline void GroupUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_state_entries_){arena}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
  };
}

GroupUser::~GroupUser() {
  // @@protoc_insertion_point(destructor:jukey.prot.GroupUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_state_entries_.~RepeatedPtrField();
}

void GroupUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupUser::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.GroupUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_state_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.user_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_id_) -
        reinterpret_cast<char*>(&_impl_.user_type_)) + sizeof(_impl_.user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 user_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .jukey.prot.MediaStateEntry media_state_entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_media_state_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.GroupUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 user_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // repeated .jukey.prot.MediaStateEntry media_state_entries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_media_state_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_media_state_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.GroupUser)
  return target;
}

size_t GroupUser::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.GroupUser)
  size_t total_size = 0;

  if (_internal_has_user_type()) {
    // required uint32 user_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return total_size;
}
size_t GroupUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.GroupUser)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 user_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jukey.prot.MediaStateEntry media_state_entries = 3;
  total_size += 1UL * this->_internal_media_state_entries_size();
  for (const auto& msg : this->_impl_.media_state_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupUser::GetClassData() const { return &_class_data_; }


void GroupUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupUser*>(&to_msg);
  auto& from = static_cast<const GroupUser&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.GroupUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.media_state_entries_.MergeFrom(from._impl_.media_state_entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupUser::CopyFrom(const GroupUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.GroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUser::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.media_state_entries_))
    return false;
  return true;
}

void GroupUser::InternalSwap(GroupUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.media_state_entries_.InternalSwap(&other->_impl_.media_state_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupUser, _impl_.user_id_)
      + sizeof(GroupUser::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(GroupUser, _impl_.user_type_)>(
          reinterpret_cast<char*>(&_impl_.user_type_),
          reinterpret_cast<char*>(&other->_impl_.user_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[3]);
}

// ===================================================================

class JoinGroupRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinGroupRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

JoinGroupRsp::JoinGroupRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.JoinGroupRsp)
}
JoinGroupRsp::JoinGroupRsp(const JoinGroupRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinGroupRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_users_){from._impl_.group_users_}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.JoinGroupRsp)
}

inline void JoinGroupRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_users_){arena}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JoinGroupRsp::~JoinGroupRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.JoinGroupRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinGroupRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_users_.~RepeatedPtrField();
  _impl_.msg_.Destroy();
}

void JoinGroupRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinGroupRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.JoinGroupRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_users_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.msg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGroupRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .jukey.prot.GroupUser group_users = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.JoinGroupRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinGroupRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.JoinGroupRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_login_id(), target);
  }

  // repeated .jukey.prot.GroupUser group_users = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_users(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required uint32 result = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_result(), target);
  }

  // required string msg = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.JoinGroupRsp.msg");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.JoinGroupRsp)
  return target;
}

size_t JoinGroupRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.JoinGroupRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t JoinGroupRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.JoinGroupRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string msg = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

    // required uint32 result = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jukey.prot.GroupUser group_users = 6;
  total_size += 1UL * this->_internal_group_users_size();
  for (const auto& msg : this->_impl_.group_users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinGroupRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinGroupRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinGroupRsp::GetClassData() const { return &_class_data_; }


void JoinGroupRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinGroupRsp*>(&to_msg);
  auto& from = static_cast<const JoinGroupRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.JoinGroupRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_users_.MergeFrom(from._impl_.group_users_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinGroupRsp::CopyFrom(const JoinGroupRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.JoinGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.group_users_))
    return false;
  return true;
}

void JoinGroupRsp::InternalSwap(JoinGroupRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_users_.InternalSwap(&other->_impl_.group_users_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinGroupRsp, _impl_.result_)
      + sizeof(JoinGroupRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(JoinGroupRsp, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGroupRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[4]);
}

// ===================================================================

class JoinGroupNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinGroupNotify>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

JoinGroupNotify::JoinGroupNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.JoinGroupNotify)
}
JoinGroupNotify::JoinGroupNotify(const JoinGroupNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinGroupNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entries_){from._impl_.media_entries_}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.JoinGroupNotify)
}

inline void JoinGroupNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entries_){arena}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
  };
}

JoinGroupNotify::~JoinGroupNotify() {
  // @@protoc_insertion_point(destructor:jukey.prot.JoinGroupNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinGroupNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.media_entries_.~RepeatedPtrField();
}

void JoinGroupNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinGroupNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.JoinGroupNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.media_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGroupNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .jukey.prot.MediaEntry media_entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_media_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinGroupNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.JoinGroupNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // repeated .jukey.prot.MediaEntry media_entries = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_media_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_media_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.JoinGroupNotify)
  return target;
}

size_t JoinGroupNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.JoinGroupNotify)
  size_t total_size = 0;

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return total_size;
}
size_t JoinGroupNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.JoinGroupNotify)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jukey.prot.MediaEntry media_entries = 5;
  total_size += 1UL * this->_internal_media_entries_size();
  for (const auto& msg : this->_impl_.media_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinGroupNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinGroupNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinGroupNotify::GetClassData() const { return &_class_data_; }


void JoinGroupNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinGroupNotify*>(&to_msg);
  auto& from = static_cast<const JoinGroupNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.JoinGroupNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.media_entries_.MergeFrom(from._impl_.media_entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinGroupNotify::CopyFrom(const JoinGroupNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.JoinGroupNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.media_entries_))
    return false;
  return true;
}

void JoinGroupNotify::InternalSwap(JoinGroupNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.media_entries_.InternalSwap(&other->_impl_.media_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinGroupNotify, _impl_.user_id_)
      + sizeof(JoinGroupNotify::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(JoinGroupNotify, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGroupNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[5]);
}

// ===================================================================

class LeaveGroupReq::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaveGroupReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

LeaveGroupReq::LeaveGroupReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LeaveGroupReq)
}
LeaveGroupReq::LeaveGroupReq(const LeaveGroupReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveGroupReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.login_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LeaveGroupReq)
}

inline void LeaveGroupReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LeaveGroupReq::~LeaveGroupReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.LeaveGroupReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveGroupReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void LeaveGroupReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveGroupReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LeaveGroupReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.login_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveGroupReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LeaveGroupReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveGroupReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LeaveGroupReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_login_id(), target);
  }

  // required string token = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LeaveGroupReq.token");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LeaveGroupReq)
  return target;
}

size_t LeaveGroupReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LeaveGroupReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  return total_size;
}
size_t LeaveGroupReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LeaveGroupReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string token = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveGroupReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveGroupReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveGroupReq::GetClassData() const { return &_class_data_; }


void LeaveGroupReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveGroupReq*>(&to_msg);
  auto& from = static_cast<const LeaveGroupReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LeaveGroupReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveGroupReq::CopyFrom(const LeaveGroupReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LeaveGroupReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroupReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LeaveGroupReq::InternalSwap(LeaveGroupReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveGroupReq, _impl_.login_id_)
      + sizeof(LeaveGroupReq::_impl_.login_id_)
      - PROTOBUF_FIELD_OFFSET(LeaveGroupReq, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveGroupReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[6]);
}

// ===================================================================

class LeaveGroupRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaveGroupRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

LeaveGroupRsp::LeaveGroupRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LeaveGroupRsp)
}
LeaveGroupRsp::LeaveGroupRsp(const LeaveGroupRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveGroupRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LeaveGroupRsp)
}

inline void LeaveGroupRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LeaveGroupRsp::~LeaveGroupRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.LeaveGroupRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveGroupRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void LeaveGroupRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveGroupRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LeaveGroupRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.msg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveGroupRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LeaveGroupRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveGroupRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LeaveGroupRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_login_id(), target);
  }

  // required uint32 result = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_result(), target);
  }

  // required string msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LeaveGroupRsp.msg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LeaveGroupRsp)
  return target;
}

size_t LeaveGroupRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LeaveGroupRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t LeaveGroupRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LeaveGroupRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveGroupRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveGroupRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveGroupRsp::GetClassData() const { return &_class_data_; }


void LeaveGroupRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveGroupRsp*>(&to_msg);
  auto& from = static_cast<const LeaveGroupRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LeaveGroupRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveGroupRsp::CopyFrom(const LeaveGroupRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LeaveGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroupRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LeaveGroupRsp::InternalSwap(LeaveGroupRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveGroupRsp, _impl_.result_)
      + sizeof(LeaveGroupRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(LeaveGroupRsp, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveGroupRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[7]);
}

// ===================================================================

class LeaveGroupNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaveGroupNotify>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

LeaveGroupNotify::LeaveGroupNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LeaveGroupNotify)
}
LeaveGroupNotify::LeaveGroupNotify(const LeaveGroupNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveGroupNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LeaveGroupNotify)
}

inline void LeaveGroupNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
  };
}

LeaveGroupNotify::~LeaveGroupNotify() {
  // @@protoc_insertion_point(destructor:jukey.prot.LeaveGroupNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveGroupNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaveGroupNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveGroupNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LeaveGroupNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveGroupNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveGroupNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LeaveGroupNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LeaveGroupNotify)
  return target;
}

size_t LeaveGroupNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LeaveGroupNotify)
  size_t total_size = 0;

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return total_size;
}
size_t LeaveGroupNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LeaveGroupNotify)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveGroupNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveGroupNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveGroupNotify::GetClassData() const { return &_class_data_; }


void LeaveGroupNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveGroupNotify*>(&to_msg);
  auto& from = static_cast<const LeaveGroupNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LeaveGroupNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveGroupNotify::CopyFrom(const LeaveGroupNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LeaveGroupNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroupNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LeaveGroupNotify::InternalSwap(LeaveGroupNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveGroupNotify, _impl_.user_id_)
      + sizeof(LeaveGroupNotify::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(LeaveGroupNotify, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveGroupNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[8]);
}

// ===================================================================

class PublishMediaReq::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishMediaReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::jukey::prot::MediaEntry& media_entry(const PublishMediaReq* msg);
  static void set_has_media_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::jukey::prot::MediaEntry&
PublishMediaReq::_Internal::media_entry(const PublishMediaReq* msg) {
  return *msg->_impl_.media_entry_;
}
PublishMediaReq::PublishMediaReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.PublishMediaReq)
}
PublishMediaReq::PublishMediaReq(const PublishMediaReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishMediaReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_media_entry()) {
    _this->_impl_.media_entry_ = new ::jukey::prot::MediaEntry(*from._impl_.media_entry_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.login_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.PublishMediaReq)
}

inline void PublishMediaReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
  };
}

PublishMediaReq::~PublishMediaReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.PublishMediaReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishMediaReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.media_entry_;
}

void PublishMediaReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishMediaReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.PublishMediaReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.media_entry_ != nullptr);
    _impl_.media_entry_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.login_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishMediaReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.MediaEntry media_entry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishMediaReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.PublishMediaReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_login_id(), target);
  }

  // required .jukey.prot.MediaEntry media_entry = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::media_entry(this),
        _Internal::media_entry(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.PublishMediaReq)
  return target;
}

size_t PublishMediaReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.PublishMediaReq)
  size_t total_size = 0;

  if (_internal_has_media_entry()) {
    // required .jukey.prot.MediaEntry media_entry = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  return total_size;
}
size_t PublishMediaReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.PublishMediaReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .jukey.prot.MediaEntry media_entry = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishMediaReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishMediaReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishMediaReq::GetClassData() const { return &_class_data_; }


void PublishMediaReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishMediaReq*>(&to_msg);
  auto& from = static_cast<const PublishMediaReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.PublishMediaReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_media_entry()->::jukey::prot::MediaEntry::MergeFrom(
          from._internal_media_entry());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishMediaReq::CopyFrom(const PublishMediaReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.PublishMediaReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMediaReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_media_entry()) {
    if (!_impl_.media_entry_->IsInitialized()) return false;
  }
  return true;
}

void PublishMediaReq::InternalSwap(PublishMediaReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishMediaReq, _impl_.login_id_)
      + sizeof(PublishMediaReq::_impl_.login_id_)
      - PROTOBUF_FIELD_OFFSET(PublishMediaReq, _impl_.media_entry_)>(
          reinterpret_cast<char*>(&_impl_.media_entry_),
          reinterpret_cast<char*>(&other->_impl_.media_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishMediaReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[9]);
}

// ===================================================================

class PublishMediaRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishMediaRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::jukey::prot::MediaEntry& media_entry(const PublishMediaRsp* msg);
  static void set_has_media_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::jukey::prot::MediaEntry&
PublishMediaRsp::_Internal::media_entry(const PublishMediaRsp* msg) {
  return *msg->_impl_.media_entry_;
}
PublishMediaRsp::PublishMediaRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.PublishMediaRsp)
}
PublishMediaRsp::PublishMediaRsp(const PublishMediaRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishMediaRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_media_entry()) {
    _this->_impl_.media_entry_ = new ::jukey::prot::MediaEntry(*from._impl_.media_entry_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.PublishMediaRsp)
}

inline void PublishMediaRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishMediaRsp::~PublishMediaRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.PublishMediaRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishMediaRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.media_entry_;
}

void PublishMediaRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishMediaRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.PublishMediaRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.media_entry_ != nullptr);
      _impl_.media_entry_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishMediaRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.MediaEntry media_entry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.PublishMediaRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishMediaRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.PublishMediaRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_login_id(), target);
  }

  // required .jukey.prot.MediaEntry media_entry = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::media_entry(this),
        _Internal::media_entry(this).GetCachedSize(), target, stream);
  }

  // required uint32 result = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_result(), target);
  }

  // required string msg = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.PublishMediaRsp.msg");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.PublishMediaRsp)
  return target;
}

size_t PublishMediaRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.PublishMediaRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_media_entry()) {
    // required .jukey.prot.MediaEntry media_entry = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t PublishMediaRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.PublishMediaRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string msg = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.MediaEntry media_entry = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

    // required uint32 result = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishMediaRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishMediaRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishMediaRsp::GetClassData() const { return &_class_data_; }


void PublishMediaRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishMediaRsp*>(&to_msg);
  auto& from = static_cast<const PublishMediaRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.PublishMediaRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_media_entry()->::jukey::prot::MediaEntry::MergeFrom(
          from._internal_media_entry());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishMediaRsp::CopyFrom(const PublishMediaRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.PublishMediaRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMediaRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_media_entry()) {
    if (!_impl_.media_entry_->IsInitialized()) return false;
  }
  return true;
}

void PublishMediaRsp::InternalSwap(PublishMediaRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishMediaRsp, _impl_.result_)
      + sizeof(PublishMediaRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(PublishMediaRsp, _impl_.media_entry_)>(
          reinterpret_cast<char*>(&_impl_.media_entry_),
          reinterpret_cast<char*>(&other->_impl_.media_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishMediaRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[10]);
}

// ===================================================================

class PublishMediaNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishMediaNotify>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::MediaEntry& media_entry(const PublishMediaNotify* msg);
  static void set_has_media_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_need_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::jukey::prot::MediaEntry&
PublishMediaNotify::_Internal::media_entry(const PublishMediaNotify* msg) {
  return *msg->_impl_.media_entry_;
}
PublishMediaNotify::PublishMediaNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.PublishMediaNotify)
}
PublishMediaNotify::PublishMediaNotify(const PublishMediaNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishMediaNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.need_ack_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_media_entry()) {
    _this->_impl_.media_entry_ = new ::jukey::prot::MediaEntry(*from._impl_.media_entry_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.need_ack_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.need_ack_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.PublishMediaNotify)
}

inline void PublishMediaNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.need_ack_){false}
  };
}

PublishMediaNotify::~PublishMediaNotify() {
  // @@protoc_insertion_point(destructor:jukey.prot.PublishMediaNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishMediaNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.media_entry_;
}

void PublishMediaNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishMediaNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.PublishMediaNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.media_entry_ != nullptr);
    _impl_.media_entry_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.need_ack_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.need_ack_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishMediaNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.MediaEntry media_entry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool need_ack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_need_ack(&has_bits);
          _impl_.need_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishMediaNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.PublishMediaNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required .jukey.prot.MediaEntry media_entry = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::media_entry(this),
        _Internal::media_entry(this).GetCachedSize(), target, stream);
  }

  // required bool need_ack = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_need_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.PublishMediaNotify)
  return target;
}

size_t PublishMediaNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.PublishMediaNotify)
  size_t total_size = 0;

  if (_internal_has_media_entry()) {
    // required .jukey.prot.MediaEntry media_entry = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_need_ack()) {
    // required bool need_ack = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PublishMediaNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.PublishMediaNotify)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .jukey.prot.MediaEntry media_entry = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required bool need_ack = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishMediaNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishMediaNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishMediaNotify::GetClassData() const { return &_class_data_; }


void PublishMediaNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishMediaNotify*>(&to_msg);
  auto& from = static_cast<const PublishMediaNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.PublishMediaNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_media_entry()->::jukey::prot::MediaEntry::MergeFrom(
          from._internal_media_entry());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.need_ack_ = from._impl_.need_ack_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishMediaNotify::CopyFrom(const PublishMediaNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.PublishMediaNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMediaNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_media_entry()) {
    if (!_impl_.media_entry_->IsInitialized()) return false;
  }
  return true;
}

void PublishMediaNotify::InternalSwap(PublishMediaNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishMediaNotify, _impl_.need_ack_)
      + sizeof(PublishMediaNotify::_impl_.need_ack_)
      - PROTOBUF_FIELD_OFFSET(PublishMediaNotify, _impl_.media_entry_)>(
          reinterpret_cast<char*>(&_impl_.media_entry_),
          reinterpret_cast<char*>(&other->_impl_.media_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishMediaNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[11]);
}

// ===================================================================

class PublishMediaAck::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishMediaAck>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::MediaEntry& media_entry(const PublishMediaAck* msg);
  static void set_has_media_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ack_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ack_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::jukey::prot::MediaEntry&
PublishMediaAck::_Internal::media_entry(const PublishMediaAck* msg) {
  return *msg->_impl_.media_entry_;
}
PublishMediaAck::PublishMediaAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.PublishMediaAck)
}
PublishMediaAck::PublishMediaAck(const PublishMediaAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishMediaAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.ack_user_id_){}
    , decltype(_impl_.ack_user_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_media_entry()) {
    _this->_impl_.media_entry_ = new ::jukey::prot::MediaEntry(*from._impl_.media_entry_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ack_user_type_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.ack_user_type_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.PublishMediaAck)
}

inline void PublishMediaAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.ack_user_id_){0u}
    , decltype(_impl_.ack_user_type_){0u}
  };
}

PublishMediaAck::~PublishMediaAck() {
  // @@protoc_insertion_point(destructor:jukey.prot.PublishMediaAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishMediaAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.media_entry_;
}

void PublishMediaAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishMediaAck::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.PublishMediaAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.media_entry_ != nullptr);
    _impl_.media_entry_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ack_user_type_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.ack_user_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishMediaAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.MediaEntry media_entry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 ack_user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ack_user_id(&has_bits);
          _impl_.ack_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 ack_user_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ack_user_type(&has_bits);
          _impl_.ack_user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishMediaAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.PublishMediaAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required .jukey.prot.MediaEntry media_entry = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::media_entry(this),
        _Internal::media_entry(this).GetCachedSize(), target, stream);
  }

  // required uint32 ack_user_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ack_user_id(), target);
  }

  // required uint32 ack_user_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ack_user_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.PublishMediaAck)
  return target;
}

size_t PublishMediaAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.PublishMediaAck)
  size_t total_size = 0;

  if (_internal_has_media_entry()) {
    // required .jukey.prot.MediaEntry media_entry = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_ack_user_id()) {
    // required uint32 ack_user_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ack_user_id());
  }

  if (_internal_has_ack_user_type()) {
    // required uint32 ack_user_type = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ack_user_type());
  }

  return total_size;
}
size_t PublishMediaAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.PublishMediaAck)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .jukey.prot.MediaEntry media_entry = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 ack_user_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ack_user_id());

    // required uint32 ack_user_type = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ack_user_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishMediaAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishMediaAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishMediaAck::GetClassData() const { return &_class_data_; }


void PublishMediaAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishMediaAck*>(&to_msg);
  auto& from = static_cast<const PublishMediaAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.PublishMediaAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_media_entry()->::jukey::prot::MediaEntry::MergeFrom(
          from._internal_media_entry());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ack_user_id_ = from._impl_.ack_user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ack_user_type_ = from._impl_.ack_user_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishMediaAck::CopyFrom(const PublishMediaAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.PublishMediaAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMediaAck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_media_entry()) {
    if (!_impl_.media_entry_->IsInitialized()) return false;
  }
  return true;
}

void PublishMediaAck::InternalSwap(PublishMediaAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishMediaAck, _impl_.ack_user_type_)
      + sizeof(PublishMediaAck::_impl_.ack_user_type_)
      - PROTOBUF_FIELD_OFFSET(PublishMediaAck, _impl_.media_entry_)>(
          reinterpret_cast<char*>(&_impl_.media_entry_),
          reinterpret_cast<char*>(&other->_impl_.media_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishMediaAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[12]);
}

// ===================================================================

class UnpublishMediaReq::_Internal {
 public:
  using HasBits = decltype(std::declval<UnpublishMediaReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::jukey::prot::MediaEntry& media_entry(const UnpublishMediaReq* msg);
  static void set_has_media_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::jukey::prot::MediaEntry&
UnpublishMediaReq::_Internal::media_entry(const UnpublishMediaReq* msg) {
  return *msg->_impl_.media_entry_;
}
UnpublishMediaReq::UnpublishMediaReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UnpublishMediaReq)
}
UnpublishMediaReq::UnpublishMediaReq(const UnpublishMediaReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnpublishMediaReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_media_entry()) {
    _this->_impl_.media_entry_ = new ::jukey::prot::MediaEntry(*from._impl_.media_entry_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.login_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UnpublishMediaReq)
}

inline void UnpublishMediaReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
  };
}

UnpublishMediaReq::~UnpublishMediaReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.UnpublishMediaReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnpublishMediaReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.media_entry_;
}

void UnpublishMediaReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnpublishMediaReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UnpublishMediaReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.media_entry_ != nullptr);
    _impl_.media_entry_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.login_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnpublishMediaReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.MediaEntry media_entry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnpublishMediaReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UnpublishMediaReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_login_id(), target);
  }

  // required .jukey.prot.MediaEntry media_entry = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::media_entry(this),
        _Internal::media_entry(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UnpublishMediaReq)
  return target;
}

size_t UnpublishMediaReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UnpublishMediaReq)
  size_t total_size = 0;

  if (_internal_has_media_entry()) {
    // required .jukey.prot.MediaEntry media_entry = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  return total_size;
}
size_t UnpublishMediaReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UnpublishMediaReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .jukey.prot.MediaEntry media_entry = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnpublishMediaReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnpublishMediaReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnpublishMediaReq::GetClassData() const { return &_class_data_; }


void UnpublishMediaReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnpublishMediaReq*>(&to_msg);
  auto& from = static_cast<const UnpublishMediaReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UnpublishMediaReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_media_entry()->::jukey::prot::MediaEntry::MergeFrom(
          from._internal_media_entry());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnpublishMediaReq::CopyFrom(const UnpublishMediaReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UnpublishMediaReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpublishMediaReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_media_entry()) {
    if (!_impl_.media_entry_->IsInitialized()) return false;
  }
  return true;
}

void UnpublishMediaReq::InternalSwap(UnpublishMediaReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnpublishMediaReq, _impl_.login_id_)
      + sizeof(UnpublishMediaReq::_impl_.login_id_)
      - PROTOBUF_FIELD_OFFSET(UnpublishMediaReq, _impl_.media_entry_)>(
          reinterpret_cast<char*>(&_impl_.media_entry_),
          reinterpret_cast<char*>(&other->_impl_.media_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnpublishMediaReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[13]);
}

// ===================================================================

class UnpublishMediaRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<UnpublishMediaRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::jukey::prot::MediaEntry& media_entry(const UnpublishMediaRsp* msg);
  static void set_has_media_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::jukey::prot::MediaEntry&
UnpublishMediaRsp::_Internal::media_entry(const UnpublishMediaRsp* msg) {
  return *msg->_impl_.media_entry_;
}
UnpublishMediaRsp::UnpublishMediaRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UnpublishMediaRsp)
}
UnpublishMediaRsp::UnpublishMediaRsp(const UnpublishMediaRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnpublishMediaRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_media_entry()) {
    _this->_impl_.media_entry_ = new ::jukey::prot::MediaEntry(*from._impl_.media_entry_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UnpublishMediaRsp)
}

inline void UnpublishMediaRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnpublishMediaRsp::~UnpublishMediaRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.UnpublishMediaRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnpublishMediaRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.media_entry_;
}

void UnpublishMediaRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnpublishMediaRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UnpublishMediaRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.media_entry_ != nullptr);
      _impl_.media_entry_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnpublishMediaRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.MediaEntry media_entry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.UnpublishMediaRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnpublishMediaRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UnpublishMediaRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_login_id(), target);
  }

  // required .jukey.prot.MediaEntry media_entry = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::media_entry(this),
        _Internal::media_entry(this).GetCachedSize(), target, stream);
  }

  // required uint32 result = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_result(), target);
  }

  // required string msg = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.UnpublishMediaRsp.msg");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UnpublishMediaRsp)
  return target;
}

size_t UnpublishMediaRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UnpublishMediaRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_media_entry()) {
    // required .jukey.prot.MediaEntry media_entry = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t UnpublishMediaRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UnpublishMediaRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string msg = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.MediaEntry media_entry = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

    // required uint32 result = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnpublishMediaRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnpublishMediaRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnpublishMediaRsp::GetClassData() const { return &_class_data_; }


void UnpublishMediaRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnpublishMediaRsp*>(&to_msg);
  auto& from = static_cast<const UnpublishMediaRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UnpublishMediaRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_media_entry()->::jukey::prot::MediaEntry::MergeFrom(
          from._internal_media_entry());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnpublishMediaRsp::CopyFrom(const UnpublishMediaRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UnpublishMediaRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpublishMediaRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_media_entry()) {
    if (!_impl_.media_entry_->IsInitialized()) return false;
  }
  return true;
}

void UnpublishMediaRsp::InternalSwap(UnpublishMediaRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnpublishMediaRsp, _impl_.result_)
      + sizeof(UnpublishMediaRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(UnpublishMediaRsp, _impl_.media_entry_)>(
          reinterpret_cast<char*>(&_impl_.media_entry_),
          reinterpret_cast<char*>(&other->_impl_.media_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnpublishMediaRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[14]);
}

// ===================================================================

class UnpublishMediaNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<UnpublishMediaNotify>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::MediaEntry& media_entry(const UnpublishMediaNotify* msg);
  static void set_has_media_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_need_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::jukey::prot::MediaEntry&
UnpublishMediaNotify::_Internal::media_entry(const UnpublishMediaNotify* msg) {
  return *msg->_impl_.media_entry_;
}
UnpublishMediaNotify::UnpublishMediaNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UnpublishMediaNotify)
}
UnpublishMediaNotify::UnpublishMediaNotify(const UnpublishMediaNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnpublishMediaNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.need_ack_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_media_entry()) {
    _this->_impl_.media_entry_ = new ::jukey::prot::MediaEntry(*from._impl_.media_entry_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.need_ack_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.need_ack_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UnpublishMediaNotify)
}

inline void UnpublishMediaNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.need_ack_){false}
  };
}

UnpublishMediaNotify::~UnpublishMediaNotify() {
  // @@protoc_insertion_point(destructor:jukey.prot.UnpublishMediaNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnpublishMediaNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.media_entry_;
}

void UnpublishMediaNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnpublishMediaNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UnpublishMediaNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.media_entry_ != nullptr);
    _impl_.media_entry_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.need_ack_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.need_ack_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnpublishMediaNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.MediaEntry media_entry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool need_ack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_need_ack(&has_bits);
          _impl_.need_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnpublishMediaNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UnpublishMediaNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required .jukey.prot.MediaEntry media_entry = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::media_entry(this),
        _Internal::media_entry(this).GetCachedSize(), target, stream);
  }

  // required bool need_ack = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_need_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UnpublishMediaNotify)
  return target;
}

size_t UnpublishMediaNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UnpublishMediaNotify)
  size_t total_size = 0;

  if (_internal_has_media_entry()) {
    // required .jukey.prot.MediaEntry media_entry = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_need_ack()) {
    // required bool need_ack = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t UnpublishMediaNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UnpublishMediaNotify)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .jukey.prot.MediaEntry media_entry = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required bool need_ack = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnpublishMediaNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnpublishMediaNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnpublishMediaNotify::GetClassData() const { return &_class_data_; }


void UnpublishMediaNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnpublishMediaNotify*>(&to_msg);
  auto& from = static_cast<const UnpublishMediaNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UnpublishMediaNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_media_entry()->::jukey::prot::MediaEntry::MergeFrom(
          from._internal_media_entry());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.need_ack_ = from._impl_.need_ack_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnpublishMediaNotify::CopyFrom(const UnpublishMediaNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UnpublishMediaNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpublishMediaNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_media_entry()) {
    if (!_impl_.media_entry_->IsInitialized()) return false;
  }
  return true;
}

void UnpublishMediaNotify::InternalSwap(UnpublishMediaNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnpublishMediaNotify, _impl_.need_ack_)
      + sizeof(UnpublishMediaNotify::_impl_.need_ack_)
      - PROTOBUF_FIELD_OFFSET(UnpublishMediaNotify, _impl_.media_entry_)>(
          reinterpret_cast<char*>(&_impl_.media_entry_),
          reinterpret_cast<char*>(&other->_impl_.media_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnpublishMediaNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[15]);
}

// ===================================================================

class UnpublishMediaAck::_Internal {
 public:
  using HasBits = decltype(std::declval<UnpublishMediaAck>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::MediaEntry& media_entry(const UnpublishMediaAck* msg);
  static void set_has_media_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ack_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ack_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::jukey::prot::MediaEntry&
UnpublishMediaAck::_Internal::media_entry(const UnpublishMediaAck* msg) {
  return *msg->_impl_.media_entry_;
}
UnpublishMediaAck::UnpublishMediaAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UnpublishMediaAck)
}
UnpublishMediaAck::UnpublishMediaAck(const UnpublishMediaAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnpublishMediaAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.ack_user_id_){}
    , decltype(_impl_.ack_user_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_media_entry()) {
    _this->_impl_.media_entry_ = new ::jukey::prot::MediaEntry(*from._impl_.media_entry_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ack_user_type_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.ack_user_type_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UnpublishMediaAck)
}

inline void UnpublishMediaAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.media_entry_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.ack_user_id_){0u}
    , decltype(_impl_.ack_user_type_){0u}
  };
}

UnpublishMediaAck::~UnpublishMediaAck() {
  // @@protoc_insertion_point(destructor:jukey.prot.UnpublishMediaAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnpublishMediaAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.media_entry_;
}

void UnpublishMediaAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnpublishMediaAck::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UnpublishMediaAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.media_entry_ != nullptr);
    _impl_.media_entry_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ack_user_type_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.ack_user_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnpublishMediaAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.MediaEntry media_entry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 ack_user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ack_user_id(&has_bits);
          _impl_.ack_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 ack_user_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ack_user_type(&has_bits);
          _impl_.ack_user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnpublishMediaAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UnpublishMediaAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // required .jukey.prot.MediaEntry media_entry = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::media_entry(this),
        _Internal::media_entry(this).GetCachedSize(), target, stream);
  }

  // required uint32 ack_user_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ack_user_id(), target);
  }

  // required uint32 ack_user_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ack_user_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UnpublishMediaAck)
  return target;
}

size_t UnpublishMediaAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UnpublishMediaAck)
  size_t total_size = 0;

  if (_internal_has_media_entry()) {
    // required .jukey.prot.MediaEntry media_entry = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_ack_user_id()) {
    // required uint32 ack_user_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ack_user_id());
  }

  if (_internal_has_ack_user_type()) {
    // required uint32 ack_user_type = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ack_user_type());
  }

  return total_size;
}
size_t UnpublishMediaAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UnpublishMediaAck)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .jukey.prot.MediaEntry media_entry = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.media_entry_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 ack_user_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ack_user_id());

    // required uint32 ack_user_type = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ack_user_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnpublishMediaAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnpublishMediaAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnpublishMediaAck::GetClassData() const { return &_class_data_; }


void UnpublishMediaAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnpublishMediaAck*>(&to_msg);
  auto& from = static_cast<const UnpublishMediaAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UnpublishMediaAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_media_entry()->::jukey::prot::MediaEntry::MergeFrom(
          from._internal_media_entry());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ack_user_id_ = from._impl_.ack_user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ack_user_type_ = from._impl_.ack_user_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnpublishMediaAck::CopyFrom(const UnpublishMediaAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UnpublishMediaAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpublishMediaAck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_media_entry()) {
    if (!_impl_.media_entry_->IsInitialized()) return false;
  }
  return true;
}

void UnpublishMediaAck::InternalSwap(UnpublishMediaAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnpublishMediaAck, _impl_.ack_user_type_)
      + sizeof(UnpublishMediaAck::_impl_.ack_user_type_)
      - PROTOBUF_FIELD_OFFSET(UnpublishMediaAck, _impl_.media_entry_)>(
          reinterpret_cast<char*>(&_impl_.media_entry_),
          reinterpret_cast<char*>(&other->_impl_.media_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnpublishMediaAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_group_2eproto_getter, &descriptor_table_group_2eproto_once,
      file_level_metadata_group_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prot
}  // namespace jukey
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jukey::prot::MediaEntry*
Arena::CreateMaybeMessage< ::jukey::prot::MediaEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::MediaEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::JoinGroupReq*
Arena::CreateMaybeMessage< ::jukey::prot::JoinGroupReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::JoinGroupReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::MediaStateEntry*
Arena::CreateMaybeMessage< ::jukey::prot::MediaStateEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::MediaStateEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::GroupUser*
Arena::CreateMaybeMessage< ::jukey::prot::GroupUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::GroupUser >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::JoinGroupRsp*
Arena::CreateMaybeMessage< ::jukey::prot::JoinGroupRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::JoinGroupRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::JoinGroupNotify*
Arena::CreateMaybeMessage< ::jukey::prot::JoinGroupNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::JoinGroupNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LeaveGroupReq*
Arena::CreateMaybeMessage< ::jukey::prot::LeaveGroupReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LeaveGroupReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LeaveGroupRsp*
Arena::CreateMaybeMessage< ::jukey::prot::LeaveGroupRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LeaveGroupRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LeaveGroupNotify*
Arena::CreateMaybeMessage< ::jukey::prot::LeaveGroupNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LeaveGroupNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::PublishMediaReq*
Arena::CreateMaybeMessage< ::jukey::prot::PublishMediaReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::PublishMediaReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::PublishMediaRsp*
Arena::CreateMaybeMessage< ::jukey::prot::PublishMediaRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::PublishMediaRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::PublishMediaNotify*
Arena::CreateMaybeMessage< ::jukey::prot::PublishMediaNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::PublishMediaNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::PublishMediaAck*
Arena::CreateMaybeMessage< ::jukey::prot::PublishMediaAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::PublishMediaAck >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UnpublishMediaReq*
Arena::CreateMaybeMessage< ::jukey::prot::UnpublishMediaReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UnpublishMediaReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UnpublishMediaRsp*
Arena::CreateMaybeMessage< ::jukey::prot::UnpublishMediaRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UnpublishMediaRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UnpublishMediaNotify*
Arena::CreateMaybeMessage< ::jukey::prot::UnpublishMediaNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UnpublishMediaNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UnpublishMediaAck*
Arena::CreateMaybeMessage< ::jukey::prot::UnpublishMediaAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UnpublishMediaAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
