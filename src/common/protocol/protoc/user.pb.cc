// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace jukey {
namespace prot {
PROTOBUF_CONSTEXPR UserLoginReq::UserLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.client_id_)*/0u
  , /*decltype(_impl_.register_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u} {}
struct UserLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLoginReqDefaultTypeInternal() {}
  union {
    UserLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLoginReqDefaultTypeInternal _UserLoginReq_default_instance_;
PROTOBUF_CONSTEXPR UserLoginRsp::UserLoginRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.client_id_)*/0u
  , /*decltype(_impl_.register_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct UserLoginRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLoginRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLoginRspDefaultTypeInternal() {}
  union {
    UserLoginRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLoginRspDefaultTypeInternal _UserLoginRsp_default_instance_;
PROTOBUF_CONSTEXPR UserLogoutReq::UserLogoutReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.client_id_)*/0u
  , /*decltype(_impl_.register_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u} {}
struct UserLogoutReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLogoutReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLogoutReqDefaultTypeInternal() {}
  union {
    UserLogoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLogoutReqDefaultTypeInternal _UserLogoutReq_default_instance_;
PROTOBUF_CONSTEXPR UserLogoutRsp::UserLogoutRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.client_id_)*/0u
  , /*decltype(_impl_.register_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct UserLogoutRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLogoutRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLogoutRspDefaultTypeInternal() {}
  union {
    UserLogoutRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLogoutRspDefaultTypeInternal _UserLogoutRsp_default_instance_;
PROTOBUF_CONSTEXPR UserOfflineNotify::UserOfflineNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.client_id_)*/0u
  , /*decltype(_impl_.register_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.login_id_)*/0u} {}
struct UserOfflineNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserOfflineNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserOfflineNotifyDefaultTypeInternal() {}
  union {
    UserOfflineNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserOfflineNotifyDefaultTypeInternal _UserOfflineNotify_default_instance_;
}  // namespace prot
}  // namespace jukey
static ::_pb::Metadata file_level_metadata_user_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_user_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_user_2eproto = nullptr;

const uint32_t TableStruct_user_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginReq, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginReq, _impl_.register_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginReq, _impl_.token_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginRsp, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginRsp, _impl_.register_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginRsp, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLoginRsp, _impl_.msg_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutReq, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutReq, _impl_.register_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutReq, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutReq, _impl_.token_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutRsp, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutRsp, _impl_.register_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutRsp, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserLogoutRsp, _impl_.msg_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserOfflineNotify, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserOfflineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserOfflineNotify, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserOfflineNotify, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserOfflineNotify, _impl_.register_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserOfflineNotify, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserOfflineNotify, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UserOfflineNotify, _impl_.login_id_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::jukey::prot::UserLoginReq)},
  { 18, 32, -1, sizeof(::jukey::prot::UserLoginRsp)},
  { 40, 53, -1, sizeof(::jukey::prot::UserLogoutReq)},
  { 60, 74, -1, sizeof(::jukey::prot::UserLogoutRsp)},
  { 82, 94, -1, sizeof(::jukey::prot::UserOfflineNotify)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::jukey::prot::_UserLoginReq_default_instance_._instance,
  &::jukey::prot::_UserLoginRsp_default_instance_._instance,
  &::jukey::prot::_UserLogoutReq_default_instance_._instance,
  &::jukey::prot::_UserLogoutRsp_default_instance_._instance,
  &::jukey::prot::_UserOfflineNotify_default_instance_._instance,
};

const char descriptor_table_protodef_user_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nuser.proto\022\njukey.prot\"y\n\014UserLoginReq"
  "\022\016\n\006app_id\030\001 \002(\r\022\021\n\tclient_id\030\002 \002(\r\022\023\n\013r"
  "egister_id\030\003 \002(\r\022\021\n\tuser_type\030\004 \002(\r\022\017\n\007u"
  "ser_id\030\005 \002(\r\022\r\n\005token\030\006 \002(\t\"\231\001\n\014UserLogi"
  "nRsp\022\016\n\006app_id\030\001 \002(\r\022\021\n\tclient_id\030\002 \002(\r\022"
  "\023\n\013register_id\030\003 \002(\r\022\021\n\tuser_type\030\004 \002(\r\022"
  "\017\n\007user_id\030\005 \002(\r\022\020\n\010login_id\030\006 \002(\r\022\016\n\006re"
  "sult\030\007 \002(\r\022\013\n\003msg\030\010 \002(\t\"\214\001\n\rUserLogoutRe"
  "q\022\016\n\006app_id\030\001 \002(\r\022\021\n\tclient_id\030\002 \002(\r\022\023\n\013"
  "register_id\030\003 \002(\r\022\021\n\tuser_type\030\004 \002(\r\022\017\n\007"
  "user_id\030\005 \002(\r\022\020\n\010login_id\030\006 \002(\r\022\r\n\005token"
  "\030\007 \002(\t\"\232\001\n\rUserLogoutRsp\022\016\n\006app_id\030\001 \002(\r"
  "\022\021\n\tclient_id\030\002 \002(\r\022\023\n\013register_id\030\003 \002(\r"
  "\022\021\n\tuser_type\030\004 \002(\r\022\017\n\007user_id\030\005 \002(\r\022\020\n\010"
  "login_id\030\006 \002(\r\022\016\n\006result\030\007 \002(\r\022\013\n\003msg\030\010 "
  "\002(\t\"\201\001\n\021UserOfflineNotify\022\016\n\006app_id\030\001 \002("
  "\r\022\021\n\tclient_id\030\002 \002(\r\022\023\n\013register_id\030\003 \002("
  "\r\022\021\n\tuser_type\030\004 \002(\r\022\017\n\007user_id\030\005 \002(\r\022\020\n"
  "\010login_id\030\006 \002(\r"
  ;
static ::_pbi::once_flag descriptor_table_user_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_user_2eproto = {
    false, false, 735, descriptor_table_protodef_user_2eproto,
    "user.proto",
    &descriptor_table_user_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_user_2eproto::offsets,
    file_level_metadata_user_2eproto, file_level_enum_descriptors_user_2eproto,
    file_level_service_descriptors_user_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_user_2eproto_getter() {
  return &descriptor_table_user_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_user_2eproto(&descriptor_table_user_2eproto);
namespace jukey {
namespace prot {

// ===================================================================

class UserLoginReq::_Internal {
 public:
  using HasBits = decltype(std::declval<UserLoginReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_register_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

UserLoginReq::UserLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UserLoginReq)
}
UserLoginReq::UserLoginReq(const UserLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.register_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UserLoginReq)
}

inline void UserLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.client_id_){0u}
    , decltype(_impl_.register_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLoginReq::~UserLoginReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.UserLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void UserLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UserLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_id(&has_bits);
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 register_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_register_id(&has_bits);
          _impl_.register_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.UserLoginReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UserLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 client_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_id(), target);
  }

  // required uint32 register_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_register_id(), target);
  }

  // required uint32 user_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // required string token = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.UserLoginReq.token");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UserLoginReq)
  return target;
}

size_t UserLoginReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UserLoginReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_client_id()) {
    // required uint32 client_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_id());
  }

  if (_internal_has_register_id()) {
    // required uint32 register_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return total_size;
}
size_t UserLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UserLoginReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string token = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 client_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_id());

    // required uint32 register_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_id());

    // required uint32 user_type = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLoginReq::GetClassData() const { return &_class_data_; }


void UserLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLoginReq*>(&to_msg);
  auto& from = static_cast<const UserLoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UserLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_id_ = from._impl_.client_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.register_id_ = from._impl_.register_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLoginReq::CopyFrom(const UserLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UserLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UserLoginReq::InternalSwap(UserLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLoginReq, _impl_.user_id_)
      + sizeof(UserLoginReq::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(UserLoginReq, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[0]);
}

// ===================================================================

class UserLoginRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<UserLoginRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_register_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

UserLoginRsp::UserLoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UserLoginRsp)
}
UserLoginRsp::UserLoginRsp(const UserLoginRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLoginRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.register_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UserLoginRsp)
}

inline void UserLoginRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.client_id_){0u}
    , decltype(_impl_.register_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLoginRsp::~UserLoginRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.UserLoginRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLoginRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void UserLoginRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLoginRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UserLoginRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.msg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLoginRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_id(&has_bits);
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 register_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_register_id(&has_bits);
          _impl_.register_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.UserLoginRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLoginRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UserLoginRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 client_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_id(), target);
  }

  // required uint32 register_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_register_id(), target);
  }

  // required uint32 user_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_login_id(), target);
  }

  // required uint32 result = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_result(), target);
  }

  // required string msg = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.UserLoginRsp.msg");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UserLoginRsp)
  return target;
}

size_t UserLoginRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UserLoginRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_client_id()) {
    // required uint32 client_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_id());
  }

  if (_internal_has_register_id()) {
    // required uint32 register_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t UserLoginRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UserLoginRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string msg = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 client_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_id());

    // required uint32 register_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_id());

    // required uint32 user_type = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

    // required uint32 result = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLoginRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLoginRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLoginRsp::GetClassData() const { return &_class_data_; }


void UserLoginRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLoginRsp*>(&to_msg);
  auto& from = static_cast<const UserLoginRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UserLoginRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_id_ = from._impl_.client_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.register_id_ = from._impl_.register_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLoginRsp::CopyFrom(const UserLoginRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UserLoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UserLoginRsp::InternalSwap(UserLoginRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLoginRsp, _impl_.result_)
      + sizeof(UserLoginRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(UserLoginRsp, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLoginRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[1]);
}

// ===================================================================

class UserLogoutReq::_Internal {
 public:
  using HasBits = decltype(std::declval<UserLogoutReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_register_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

UserLogoutReq::UserLogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UserLogoutReq)
}
UserLogoutReq::UserLogoutReq(const UserLogoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLogoutReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.register_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.login_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UserLogoutReq)
}

inline void UserLogoutReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.client_id_){0u}
    , decltype(_impl_.register_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLogoutReq::~UserLogoutReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.UserLogoutReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLogoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void UserLogoutReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UserLogoutReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.token_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.login_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogoutReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_id(&has_bits);
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 register_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_register_id(&has_bits);
          _impl_.register_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.UserLogoutReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLogoutReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UserLogoutReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 client_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_id(), target);
  }

  // required uint32 register_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_register_id(), target);
  }

  // required uint32 user_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_login_id(), target);
  }

  // required string token = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.UserLogoutReq.token");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UserLogoutReq)
  return target;
}

size_t UserLogoutReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UserLogoutReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_client_id()) {
    // required uint32 client_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_id());
  }

  if (_internal_has_register_id()) {
    // required uint32 register_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  return total_size;
}
size_t UserLogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UserLogoutReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string token = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 client_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_id());

    // required uint32 register_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_id());

    // required uint32 user_type = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogoutReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLogoutReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogoutReq::GetClassData() const { return &_class_data_; }


void UserLogoutReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLogoutReq*>(&to_msg);
  auto& from = static_cast<const UserLogoutReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UserLogoutReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_id_ = from._impl_.client_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.register_id_ = from._impl_.register_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogoutReq::CopyFrom(const UserLogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UserLogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogoutReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UserLogoutReq::InternalSwap(UserLogoutReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLogoutReq, _impl_.login_id_)
      + sizeof(UserLogoutReq::_impl_.login_id_)
      - PROTOBUF_FIELD_OFFSET(UserLogoutReq, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogoutReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[2]);
}

// ===================================================================

class UserLogoutRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<UserLogoutRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_register_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

UserLogoutRsp::UserLogoutRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UserLogoutRsp)
}
UserLogoutRsp::UserLogoutRsp(const UserLogoutRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLogoutRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.register_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UserLogoutRsp)
}

inline void UserLogoutRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.client_id_){0u}
    , decltype(_impl_.register_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLogoutRsp::~UserLogoutRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.UserLogoutRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLogoutRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void UserLogoutRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UserLogoutRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.msg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogoutRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_id(&has_bits);
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 register_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_register_id(&has_bits);
          _impl_.register_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.UserLogoutRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLogoutRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UserLogoutRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 client_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_id(), target);
  }

  // required uint32 register_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_register_id(), target);
  }

  // required uint32 user_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_login_id(), target);
  }

  // required uint32 result = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_result(), target);
  }

  // required string msg = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.UserLogoutRsp.msg");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UserLogoutRsp)
  return target;
}

size_t UserLogoutRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UserLogoutRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_client_id()) {
    // required uint32 client_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_id());
  }

  if (_internal_has_register_id()) {
    // required uint32 register_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t UserLogoutRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UserLogoutRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string msg = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 client_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_id());

    // required uint32 register_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_id());

    // required uint32 user_type = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

    // required uint32 result = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogoutRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLogoutRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogoutRsp::GetClassData() const { return &_class_data_; }


void UserLogoutRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLogoutRsp*>(&to_msg);
  auto& from = static_cast<const UserLogoutRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UserLogoutRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_id_ = from._impl_.client_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.register_id_ = from._impl_.register_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogoutRsp::CopyFrom(const UserLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UserLogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogoutRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UserLogoutRsp::InternalSwap(UserLogoutRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLogoutRsp, _impl_.result_)
      + sizeof(UserLogoutRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(UserLogoutRsp, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogoutRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[3]);
}

// ===================================================================

class UserOfflineNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<UserOfflineNotify>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_register_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_login_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

UserOfflineNotify::UserOfflineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UserOfflineNotify)
}
UserOfflineNotify::UserOfflineNotify(const UserOfflineNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserOfflineNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.register_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.login_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.login_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UserOfflineNotify)
}

inline void UserOfflineNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.client_id_){0u}
    , decltype(_impl_.register_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.login_id_){0u}
  };
}

UserOfflineNotify::~UserOfflineNotify() {
  // @@protoc_insertion_point(destructor:jukey.prot.UserOfflineNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserOfflineNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserOfflineNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserOfflineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UserOfflineNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.login_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.login_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserOfflineNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_id(&has_bits);
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 register_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_register_id(&has_bits);
          _impl_.register_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 login_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_login_id(&has_bits);
          _impl_.login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserOfflineNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UserOfflineNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 client_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_id(), target);
  }

  // required uint32 register_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_register_id(), target);
  }

  // required uint32 user_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // required uint32 login_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_login_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UserOfflineNotify)
  return target;
}

size_t UserOfflineNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UserOfflineNotify)
  size_t total_size = 0;

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_client_id()) {
    // required uint32 client_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_id());
  }

  if (_internal_has_register_id()) {
    // required uint32 register_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_login_id()) {
    // required uint32 login_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());
  }

  return total_size;
}
size_t UserOfflineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UserOfflineNotify)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 client_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_id());

    // required uint32 register_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_register_id());

    // required uint32 user_type = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 login_id = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_login_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserOfflineNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserOfflineNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserOfflineNotify::GetClassData() const { return &_class_data_; }


void UserOfflineNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserOfflineNotify*>(&to_msg);
  auto& from = static_cast<const UserOfflineNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UserOfflineNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.client_id_ = from._impl_.client_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.register_id_ = from._impl_.register_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.login_id_ = from._impl_.login_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserOfflineNotify::CopyFrom(const UserOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UserOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOfflineNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UserOfflineNotify::InternalSwap(UserOfflineNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserOfflineNotify, _impl_.login_id_)
      + sizeof(UserOfflineNotify::_impl_.login_id_)
      - PROTOBUF_FIELD_OFFSET(UserOfflineNotify, _impl_.app_id_)>(
          reinterpret_cast<char*>(&_impl_.app_id_),
          reinterpret_cast<char*>(&other->_impl_.app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserOfflineNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prot
}  // namespace jukey
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jukey::prot::UserLoginReq*
Arena::CreateMaybeMessage< ::jukey::prot::UserLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UserLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UserLoginRsp*
Arena::CreateMaybeMessage< ::jukey::prot::UserLoginRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UserLoginRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UserLogoutReq*
Arena::CreateMaybeMessage< ::jukey::prot::UserLogoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UserLogoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UserLogoutRsp*
Arena::CreateMaybeMessage< ::jukey::prot::UserLogoutRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UserLogoutRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UserOfflineNotify*
Arena::CreateMaybeMessage< ::jukey::prot::UserOfflineNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UserOfflineNotify >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
