// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#include "stream.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace jukey {
namespace prot {
PROTOBUF_CONSTEXPR PublishStreamReq::PublishStreamReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u} {}
struct PublishStreamReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishStreamReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishStreamReqDefaultTypeInternal() {}
  union {
    PublishStreamReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishStreamReqDefaultTypeInternal _PublishStreamReq_default_instance_;
PROTOBUF_CONSTEXPR PublishStreamRsp::PublishStreamRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct PublishStreamRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishStreamRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishStreamRspDefaultTypeInternal() {}
  union {
    PublishStreamRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishStreamRspDefaultTypeInternal _PublishStreamRsp_default_instance_;
PROTOBUF_CONSTEXPR UnpublishStreamReq::UnpublishStreamReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u} {}
struct UnpublishStreamReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnpublishStreamReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnpublishStreamReqDefaultTypeInternal() {}
  union {
    UnpublishStreamReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnpublishStreamReqDefaultTypeInternal _UnpublishStreamReq_default_instance_;
PROTOBUF_CONSTEXPR UnpublishStreamRsp::UnpublishStreamRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct UnpublishStreamRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnpublishStreamRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnpublishStreamRspDefaultTypeInternal() {}
  union {
    UnpublishStreamRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnpublishStreamRspDefaultTypeInternal _UnpublishStreamRsp_default_instance_;
PROTOBUF_CONSTEXPR SubscribeStreamReq::SubscribeStreamReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u} {}
struct SubscribeStreamReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeStreamReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeStreamReqDefaultTypeInternal() {}
  union {
    SubscribeStreamReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeStreamReqDefaultTypeInternal _SubscribeStreamReq_default_instance_;
PROTOBUF_CONSTEXPR SubscribeStreamRsp::SubscribeStreamRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct SubscribeStreamRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeStreamRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeStreamRspDefaultTypeInternal() {}
  union {
    SubscribeStreamRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeStreamRspDefaultTypeInternal _SubscribeStreamRsp_default_instance_;
PROTOBUF_CONSTEXPR UnsubscribeStreamReq::UnsubscribeStreamReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u} {}
struct UnsubscribeStreamReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsubscribeStreamReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsubscribeStreamReqDefaultTypeInternal() {}
  union {
    UnsubscribeStreamReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsubscribeStreamReqDefaultTypeInternal _UnsubscribeStreamReq_default_instance_;
PROTOBUF_CONSTEXPR UnsubscribeStreamRsp::UnsubscribeStreamRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct UnsubscribeStreamRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsubscribeStreamRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsubscribeStreamRspDefaultTypeInternal() {}
  union {
    UnsubscribeStreamRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsubscribeStreamRspDefaultTypeInternal _UnsubscribeStreamRsp_default_instance_;
PROTOBUF_CONSTEXPR LoginSendChannelNotify::LoginSendChannelNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u} {}
struct LoginSendChannelNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginSendChannelNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginSendChannelNotifyDefaultTypeInternal() {}
  union {
    LoginSendChannelNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginSendChannelNotifyDefaultTypeInternal _LoginSendChannelNotify_default_instance_;
PROTOBUF_CONSTEXPR LoginSendChannelAck::LoginSendChannelAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct LoginSendChannelAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginSendChannelAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginSendChannelAckDefaultTypeInternal() {}
  union {
    LoginSendChannelAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginSendChannelAckDefaultTypeInternal _LoginSendChannelAck_default_instance_;
PROTOBUF_CONSTEXPR GetParentNodeReq::GetParentNodeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instance_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.service_type_)*/0u} {}
struct GetParentNodeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetParentNodeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetParentNodeReqDefaultTypeInternal() {}
  union {
    GetParentNodeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetParentNodeReqDefaultTypeInternal _GetParentNodeReq_default_instance_;
PROTOBUF_CONSTEXPR StreamNode::StreamNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instance_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_type_)*/0u} {}
struct StreamNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamNodeDefaultTypeInternal() {}
  union {
    StreamNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamNodeDefaultTypeInternal _StreamNode_default_instance_;
PROTOBUF_CONSTEXPR GetParentNodeRsp::GetParentNodeRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.stream_)*/nullptr} {}
struct GetParentNodeRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetParentNodeRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetParentNodeRspDefaultTypeInternal() {}
  union {
    GetParentNodeRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetParentNodeRspDefaultTypeInternal _GetParentNodeRsp_default_instance_;
}  // namespace prot
}  // namespace jukey
static ::_pb::Metadata file_level_metadata_stream_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_stream_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_stream_2eproto = nullptr;

const uint32_t TableStruct_stream_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamReq, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamReq, _impl_.token_),
  2,
  3,
  4,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PublishStreamRsp, _impl_.msg_),
  2,
  3,
  4,
  1,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamReq, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamReq, _impl_.token_),
  2,
  3,
  4,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnpublishStreamRsp, _impl_.msg_),
  2,
  3,
  4,
  1,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamReq, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamReq, _impl_.token_),
  2,
  3,
  4,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamRsp, _impl_.stream_addr_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::SubscribeStreamRsp, _impl_.msg_),
  3,
  4,
  5,
  2,
  0,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamReq, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamReq, _impl_.token_),
  2,
  3,
  4,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::UnsubscribeStreamRsp, _impl_.msg_),
  2,
  3,
  4,
  1,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelNotify, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelNotify, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelNotify, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelNotify, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelNotify, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelNotify, _impl_.stream_addr_),
  2,
  3,
  4,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelAck, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelAck, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelAck, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelAck, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelAck, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelAck, _impl_.msg_),
  2,
  3,
  4,
  1,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GetParentNodeReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GetParentNodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GetParentNodeReq, _impl_.service_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GetParentNodeReq, _impl_.instance_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GetParentNodeReq, _impl_.service_addr_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GetParentNodeReq, _impl_.stream_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StreamNode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StreamNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StreamNode, _impl_.service_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StreamNode, _impl_.instance_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StreamNode, _impl_.service_addr_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GetParentNodeRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GetParentNodeRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GetParentNodeRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::GetParentNodeRsp, _impl_.nodes_),
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::jukey::prot::PublishStreamReq)},
  { 16, 28, -1, sizeof(::jukey::prot::PublishStreamRsp)},
  { 34, 45, -1, sizeof(::jukey::prot::UnpublishStreamReq)},
  { 50, 62, -1, sizeof(::jukey::prot::UnpublishStreamRsp)},
  { 68, 79, -1, sizeof(::jukey::prot::SubscribeStreamReq)},
  { 84, 97, -1, sizeof(::jukey::prot::SubscribeStreamRsp)},
  { 104, 115, -1, sizeof(::jukey::prot::UnsubscribeStreamReq)},
  { 120, 132, -1, sizeof(::jukey::prot::UnsubscribeStreamRsp)},
  { 138, 149, -1, sizeof(::jukey::prot::LoginSendChannelNotify)},
  { 154, 166, -1, sizeof(::jukey::prot::LoginSendChannelAck)},
  { 172, 182, -1, sizeof(::jukey::prot::GetParentNodeReq)},
  { 186, 195, -1, sizeof(::jukey::prot::StreamNode)},
  { 198, 206, -1, sizeof(::jukey::prot::GetParentNodeRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::jukey::prot::_PublishStreamReq_default_instance_._instance,
  &::jukey::prot::_PublishStreamRsp_default_instance_._instance,
  &::jukey::prot::_UnpublishStreamReq_default_instance_._instance,
  &::jukey::prot::_UnpublishStreamRsp_default_instance_._instance,
  &::jukey::prot::_SubscribeStreamReq_default_instance_._instance,
  &::jukey::prot::_SubscribeStreamRsp_default_instance_._instance,
  &::jukey::prot::_UnsubscribeStreamReq_default_instance_._instance,
  &::jukey::prot::_UnsubscribeStreamRsp_default_instance_._instance,
  &::jukey::prot::_LoginSendChannelNotify_default_instance_._instance,
  &::jukey::prot::_LoginSendChannelAck_default_instance_._instance,
  &::jukey::prot::_GetParentNodeReq_default_instance_._instance,
  &::jukey::prot::_StreamNode_default_instance_._instance,
  &::jukey::prot::_GetParentNodeRsp_default_instance_._instance,
};

const char descriptor_table_protodef_stream_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014stream.proto\022\njukey.prot\032\014common.proto"
  "\"|\n\020PublishStreamReq\022\016\n\006app_id\030\001 \002(\r\022\021\n\t"
  "user_type\030\002 \002(\r\022\017\n\007user_id\030\003 \002(\r\022%\n\006stre"
  "am\030\004 \002(\0132\025.jukey.prot.NetStream\022\r\n\005token"
  "\030\005 \002(\t\"\212\001\n\020PublishStreamRsp\022\016\n\006app_id\030\001 "
  "\002(\r\022\021\n\tuser_type\030\002 \002(\r\022\017\n\007user_id\030\003 \002(\r\022"
  "%\n\006stream\030\004 \002(\0132\025.jukey.prot.NetStream\022\016"
  "\n\006result\030\005 \002(\r\022\013\n\003msg\030\006 \002(\t\"~\n\022Unpublish"
  "StreamReq\022\016\n\006app_id\030\001 \002(\r\022\021\n\tuser_type\030\002"
  " \002(\r\022\017\n\007user_id\030\003 \002(\r\022%\n\006stream\030\004 \002(\0132\025."
  "jukey.prot.NetStream\022\r\n\005token\030\005 \002(\t\"\214\001\n\022"
  "UnpublishStreamRsp\022\016\n\006app_id\030\001 \002(\r\022\021\n\tus"
  "er_type\030\002 \002(\r\022\017\n\007user_id\030\003 \002(\r\022%\n\006stream"
  "\030\004 \002(\0132\025.jukey.prot.NetStream\022\016\n\006result\030"
  "\005 \002(\r\022\013\n\003msg\030\006 \002(\t\"~\n\022SubscribeStreamReq"
  "\022\016\n\006app_id\030\001 \002(\r\022\021\n\tuser_type\030\002 \002(\r\022\017\n\007u"
  "ser_id\030\003 \002(\r\022%\n\006stream\030\004 \002(\0132\025.jukey.pro"
  "t.NetStream\022\r\n\005token\030\005 \002(\t\"\241\001\n\022Subscribe"
  "StreamRsp\022\016\n\006app_id\030\001 \002(\r\022\021\n\tuser_type\030\002"
  " \002(\r\022\017\n\007user_id\030\003 \002(\r\022%\n\006stream\030\004 \002(\0132\025."
  "jukey.prot.NetStream\022\023\n\013stream_addr\030\005 \002("
  "\t\022\016\n\006result\030\006 \002(\r\022\013\n\003msg\030\007 \002(\t\"\200\001\n\024Unsub"
  "scribeStreamReq\022\016\n\006app_id\030\001 \002(\r\022\021\n\tuser_"
  "type\030\002 \002(\r\022\017\n\007user_id\030\003 \002(\r\022%\n\006stream\030\004 "
  "\002(\0132\025.jukey.prot.NetStream\022\r\n\005token\030\005 \002("
  "\t\"\216\001\n\024UnsubscribeStreamRsp\022\016\n\006app_id\030\001 \002"
  "(\r\022\021\n\tuser_type\030\002 \002(\r\022\017\n\007user_id\030\003 \002(\r\022%"
  "\n\006stream\030\004 \002(\0132\025.jukey.prot.NetStream\022\016\n"
  "\006result\030\005 \002(\r\022\013\n\003msg\030\006 \002(\t\"\210\001\n\026LoginSend"
  "ChannelNotify\022\016\n\006app_id\030\001 \002(\r\022\017\n\007user_id"
  "\030\002 \002(\r\022\021\n\tuser_type\030\003 \002(\r\022%\n\006stream\030\004 \002("
  "\0132\025.jukey.prot.NetStream\022\023\n\013stream_addr\030"
  "\005 \002(\t\"\215\001\n\023LoginSendChannelAck\022\016\n\006app_id\030"
  "\001 \002(\r\022\017\n\007user_id\030\002 \002(\r\022\021\n\tuser_type\030\003 \002("
  "\r\022%\n\006stream\030\004 \002(\0132\025.jukey.prot.NetStream"
  "\022\016\n\006result\030\005 \002(\r\022\013\n\003msg\030\006 \002(\t\"z\n\020GetPare"
  "ntNodeReq\022\024\n\014service_type\030\001 \002(\r\022\023\n\013insta"
  "nce_id\030\002 \002(\t\022\024\n\014service_addr\030\003 \002(\t\022%\n\006st"
  "ream\030\004 \002(\0132\025.jukey.prot.NetStream\"M\n\nStr"
  "eamNode\022\024\n\014service_type\030\001 \002(\r\022\023\n\013instanc"
  "e_id\030\002 \002(\t\022\024\n\014service_addr\030\003 \002(\t\"`\n\020GetP"
  "arentNodeRsp\022%\n\006stream\030\001 \002(\0132\025.jukey.pro"
  "t.NetStream\022%\n\005nodes\030\002 \003(\0132\026.jukey.prot."
  "StreamNode"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_stream_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_stream_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_stream_2eproto = {
    false, false, 1730, descriptor_table_protodef_stream_2eproto,
    "stream.proto",
    &descriptor_table_stream_2eproto_once, descriptor_table_stream_2eproto_deps, 1, 13,
    schemas, file_default_instances, TableStruct_stream_2eproto::offsets,
    file_level_metadata_stream_2eproto, file_level_enum_descriptors_stream_2eproto,
    file_level_service_descriptors_stream_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_stream_2eproto_getter() {
  return &descriptor_table_stream_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_stream_2eproto(&descriptor_table_stream_2eproto);
namespace jukey {
namespace prot {

// ===================================================================

class PublishStreamReq::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishStreamReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const PublishStreamReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::jukey::prot::NetStream&
PublishStreamReq::_Internal::stream(const PublishStreamReq* msg) {
  return *msg->_impl_.stream_;
}
void PublishStreamReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PublishStreamReq::PublishStreamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.PublishStreamReq)
}
PublishStreamReq::PublishStreamReq(const PublishStreamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishStreamReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.PublishStreamReq)
}

inline void PublishStreamReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishStreamReq::~PublishStreamReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.PublishStreamReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishStreamReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void PublishStreamReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishStreamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.PublishStreamReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishStreamReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.PublishStreamReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishStreamReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.PublishStreamReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required string token = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.PublishStreamReq.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.PublishStreamReq)
  return target;
}

size_t PublishStreamReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.PublishStreamReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return total_size;
}
size_t PublishStreamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.PublishStreamReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishStreamReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishStreamReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishStreamReq::GetClassData() const { return &_class_data_; }


void PublishStreamReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishStreamReq*>(&to_msg);
  auto& from = static_cast<const PublishStreamReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.PublishStreamReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishStreamReq::CopyFrom(const PublishStreamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.PublishStreamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishStreamReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void PublishStreamReq::InternalSwap(PublishStreamReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishStreamReq, _impl_.user_id_)
      + sizeof(PublishStreamReq::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(PublishStreamReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishStreamReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[0]);
}

// ===================================================================

class PublishStreamRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishStreamRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const PublishStreamRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::jukey::prot::NetStream&
PublishStreamRsp::_Internal::stream(const PublishStreamRsp* msg) {
  return *msg->_impl_.stream_;
}
void PublishStreamRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PublishStreamRsp::PublishStreamRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.PublishStreamRsp)
}
PublishStreamRsp::PublishStreamRsp(const PublishStreamRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishStreamRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.PublishStreamRsp)
}

inline void PublishStreamRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishStreamRsp::~PublishStreamRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.PublishStreamRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishStreamRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void PublishStreamRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.PublishStreamRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishStreamRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.PublishStreamRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishStreamRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.PublishStreamRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 result = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_result(), target);
  }

  // required string msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.PublishStreamRsp.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.PublishStreamRsp)
  return target;
}

size_t PublishStreamRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.PublishStreamRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t PublishStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.PublishStreamRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string msg = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 result = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishStreamRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishStreamRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishStreamRsp::GetClassData() const { return &_class_data_; }


void PublishStreamRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishStreamRsp*>(&to_msg);
  auto& from = static_cast<const PublishStreamRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.PublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishStreamRsp::CopyFrom(const PublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.PublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishStreamRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void PublishStreamRsp::InternalSwap(PublishStreamRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishStreamRsp, _impl_.result_)
      + sizeof(PublishStreamRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(PublishStreamRsp, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishStreamRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[1]);
}

// ===================================================================

class UnpublishStreamReq::_Internal {
 public:
  using HasBits = decltype(std::declval<UnpublishStreamReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const UnpublishStreamReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::jukey::prot::NetStream&
UnpublishStreamReq::_Internal::stream(const UnpublishStreamReq* msg) {
  return *msg->_impl_.stream_;
}
void UnpublishStreamReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UnpublishStreamReq::UnpublishStreamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UnpublishStreamReq)
}
UnpublishStreamReq::UnpublishStreamReq(const UnpublishStreamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnpublishStreamReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UnpublishStreamReq)
}

inline void UnpublishStreamReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnpublishStreamReq::~UnpublishStreamReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.UnpublishStreamReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnpublishStreamReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void UnpublishStreamReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnpublishStreamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UnpublishStreamReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnpublishStreamReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.UnpublishStreamReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnpublishStreamReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UnpublishStreamReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required string token = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.UnpublishStreamReq.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UnpublishStreamReq)
  return target;
}

size_t UnpublishStreamReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UnpublishStreamReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return total_size;
}
size_t UnpublishStreamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UnpublishStreamReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnpublishStreamReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnpublishStreamReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnpublishStreamReq::GetClassData() const { return &_class_data_; }


void UnpublishStreamReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnpublishStreamReq*>(&to_msg);
  auto& from = static_cast<const UnpublishStreamReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UnpublishStreamReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnpublishStreamReq::CopyFrom(const UnpublishStreamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UnpublishStreamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpublishStreamReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void UnpublishStreamReq::InternalSwap(UnpublishStreamReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnpublishStreamReq, _impl_.user_id_)
      + sizeof(UnpublishStreamReq::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(UnpublishStreamReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnpublishStreamReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[2]);
}

// ===================================================================

class UnpublishStreamRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<UnpublishStreamRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const UnpublishStreamRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::jukey::prot::NetStream&
UnpublishStreamRsp::_Internal::stream(const UnpublishStreamRsp* msg) {
  return *msg->_impl_.stream_;
}
void UnpublishStreamRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UnpublishStreamRsp::UnpublishStreamRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UnpublishStreamRsp)
}
UnpublishStreamRsp::UnpublishStreamRsp(const UnpublishStreamRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnpublishStreamRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UnpublishStreamRsp)
}

inline void UnpublishStreamRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnpublishStreamRsp::~UnpublishStreamRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.UnpublishStreamRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnpublishStreamRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void UnpublishStreamRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnpublishStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UnpublishStreamRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnpublishStreamRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.UnpublishStreamRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnpublishStreamRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UnpublishStreamRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 result = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_result(), target);
  }

  // required string msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.UnpublishStreamRsp.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UnpublishStreamRsp)
  return target;
}

size_t UnpublishStreamRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UnpublishStreamRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t UnpublishStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UnpublishStreamRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string msg = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 result = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnpublishStreamRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnpublishStreamRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnpublishStreamRsp::GetClassData() const { return &_class_data_; }


void UnpublishStreamRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnpublishStreamRsp*>(&to_msg);
  auto& from = static_cast<const UnpublishStreamRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UnpublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnpublishStreamRsp::CopyFrom(const UnpublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UnpublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpublishStreamRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void UnpublishStreamRsp::InternalSwap(UnpublishStreamRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnpublishStreamRsp, _impl_.result_)
      + sizeof(UnpublishStreamRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(UnpublishStreamRsp, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnpublishStreamRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[3]);
}

// ===================================================================

class SubscribeStreamReq::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeStreamReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const SubscribeStreamReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::jukey::prot::NetStream&
SubscribeStreamReq::_Internal::stream(const SubscribeStreamReq* msg) {
  return *msg->_impl_.stream_;
}
void SubscribeStreamReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SubscribeStreamReq::SubscribeStreamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.SubscribeStreamReq)
}
SubscribeStreamReq::SubscribeStreamReq(const SubscribeStreamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeStreamReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.SubscribeStreamReq)
}

inline void SubscribeStreamReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeStreamReq::~SubscribeStreamReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.SubscribeStreamReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeStreamReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void SubscribeStreamReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeStreamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.SubscribeStreamReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeStreamReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.SubscribeStreamReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeStreamReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.SubscribeStreamReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required string token = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.SubscribeStreamReq.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.SubscribeStreamReq)
  return target;
}

size_t SubscribeStreamReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.SubscribeStreamReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return total_size;
}
size_t SubscribeStreamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.SubscribeStreamReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeStreamReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeStreamReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeStreamReq::GetClassData() const { return &_class_data_; }


void SubscribeStreamReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeStreamReq*>(&to_msg);
  auto& from = static_cast<const SubscribeStreamReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.SubscribeStreamReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeStreamReq::CopyFrom(const SubscribeStreamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.SubscribeStreamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeStreamReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeStreamReq::InternalSwap(SubscribeStreamReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeStreamReq, _impl_.user_id_)
      + sizeof(SubscribeStreamReq::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(SubscribeStreamReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeStreamReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[4]);
}

// ===================================================================

class SubscribeStreamRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeStreamRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::jukey::prot::NetStream& stream(const SubscribeStreamRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::jukey::prot::NetStream&
SubscribeStreamRsp::_Internal::stream(const SubscribeStreamRsp* msg) {
  return *msg->_impl_.stream_;
}
void SubscribeStreamRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
SubscribeStreamRsp::SubscribeStreamRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.SubscribeStreamRsp)
}
SubscribeStreamRsp::SubscribeStreamRsp(const SubscribeStreamRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeStreamRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_addr_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stream_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stream_addr()) {
    _this->_impl_.stream_addr_.Set(from._internal_stream_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.SubscribeStreamRsp)
}

inline void SubscribeStreamRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_addr_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.stream_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscribeStreamRsp::~SubscribeStreamRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.SubscribeStreamRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeStreamRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_addr_.Destroy();
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void SubscribeStreamRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.SubscribeStreamRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stream_addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeStreamRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string stream_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stream_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.SubscribeStreamRsp.stream_addr");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.SubscribeStreamRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeStreamRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.SubscribeStreamRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required string stream_addr = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_addr().data(), static_cast<int>(this->_internal_stream_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.SubscribeStreamRsp.stream_addr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stream_addr(), target);
  }

  // required uint32 result = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_result(), target);
  }

  // required string msg = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.SubscribeStreamRsp.msg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.SubscribeStreamRsp)
  return target;
}

size_t SubscribeStreamRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.SubscribeStreamRsp)
  size_t total_size = 0;

  if (_internal_has_stream_addr()) {
    // required string stream_addr = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_addr());
  }

  if (_internal_has_msg()) {
    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t SubscribeStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.SubscribeStreamRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string stream_addr = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_addr());

    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeStreamRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeStreamRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeStreamRsp::GetClassData() const { return &_class_data_; }


void SubscribeStreamRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeStreamRsp*>(&to_msg);
  auto& from = static_cast<const SubscribeStreamRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.SubscribeStreamRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stream_addr(from._internal_stream_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeStreamRsp::CopyFrom(const SubscribeStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.SubscribeStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeStreamRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void SubscribeStreamRsp::InternalSwap(SubscribeStreamRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_addr_, lhs_arena,
      &other->_impl_.stream_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeStreamRsp, _impl_.result_)
      + sizeof(SubscribeStreamRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(SubscribeStreamRsp, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeStreamRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[5]);
}

// ===================================================================

class UnsubscribeStreamReq::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsubscribeStreamReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const UnsubscribeStreamReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::jukey::prot::NetStream&
UnsubscribeStreamReq::_Internal::stream(const UnsubscribeStreamReq* msg) {
  return *msg->_impl_.stream_;
}
void UnsubscribeStreamReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UnsubscribeStreamReq::UnsubscribeStreamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UnsubscribeStreamReq)
}
UnsubscribeStreamReq::UnsubscribeStreamReq(const UnsubscribeStreamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsubscribeStreamReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UnsubscribeStreamReq)
}

inline void UnsubscribeStreamReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnsubscribeStreamReq::~UnsubscribeStreamReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.UnsubscribeStreamReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsubscribeStreamReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void UnsubscribeStreamReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsubscribeStreamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UnsubscribeStreamReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsubscribeStreamReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.UnsubscribeStreamReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsubscribeStreamReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UnsubscribeStreamReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required string token = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.UnsubscribeStreamReq.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UnsubscribeStreamReq)
  return target;
}

size_t UnsubscribeStreamReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UnsubscribeStreamReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return total_size;
}
size_t UnsubscribeStreamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UnsubscribeStreamReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsubscribeStreamReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsubscribeStreamReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsubscribeStreamReq::GetClassData() const { return &_class_data_; }


void UnsubscribeStreamReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsubscribeStreamReq*>(&to_msg);
  auto& from = static_cast<const UnsubscribeStreamReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UnsubscribeStreamReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsubscribeStreamReq::CopyFrom(const UnsubscribeStreamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UnsubscribeStreamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeStreamReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeStreamReq::InternalSwap(UnsubscribeStreamReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnsubscribeStreamReq, _impl_.user_id_)
      + sizeof(UnsubscribeStreamReq::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(UnsubscribeStreamReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeStreamReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[6]);
}

// ===================================================================

class UnsubscribeStreamRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<UnsubscribeStreamRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const UnsubscribeStreamRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::jukey::prot::NetStream&
UnsubscribeStreamRsp::_Internal::stream(const UnsubscribeStreamRsp* msg) {
  return *msg->_impl_.stream_;
}
void UnsubscribeStreamRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UnsubscribeStreamRsp::UnsubscribeStreamRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.UnsubscribeStreamRsp)
}
UnsubscribeStreamRsp::UnsubscribeStreamRsp(const UnsubscribeStreamRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsubscribeStreamRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.UnsubscribeStreamRsp)
}

inline void UnsubscribeStreamRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnsubscribeStreamRsp::~UnsubscribeStreamRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.UnsubscribeStreamRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsubscribeStreamRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void UnsubscribeStreamRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsubscribeStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.UnsubscribeStreamRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsubscribeStreamRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.UnsubscribeStreamRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsubscribeStreamRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.UnsubscribeStreamRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 result = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_result(), target);
  }

  // required string msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.UnsubscribeStreamRsp.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.UnsubscribeStreamRsp)
  return target;
}

size_t UnsubscribeStreamRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.UnsubscribeStreamRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t UnsubscribeStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.UnsubscribeStreamRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string msg = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 result = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsubscribeStreamRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsubscribeStreamRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsubscribeStreamRsp::GetClassData() const { return &_class_data_; }


void UnsubscribeStreamRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsubscribeStreamRsp*>(&to_msg);
  auto& from = static_cast<const UnsubscribeStreamRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.UnsubscribeStreamRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsubscribeStreamRsp::CopyFrom(const UnsubscribeStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.UnsubscribeStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeStreamRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeStreamRsp::InternalSwap(UnsubscribeStreamRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnsubscribeStreamRsp, _impl_.result_)
      + sizeof(UnsubscribeStreamRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(UnsubscribeStreamRsp, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeStreamRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[7]);
}

// ===================================================================

class LoginSendChannelNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginSendChannelNotify>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const LoginSendChannelNotify* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::jukey::prot::NetStream&
LoginSendChannelNotify::_Internal::stream(const LoginSendChannelNotify* msg) {
  return *msg->_impl_.stream_;
}
void LoginSendChannelNotify::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LoginSendChannelNotify::LoginSendChannelNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LoginSendChannelNotify)
}
LoginSendChannelNotify::LoginSendChannelNotify(const LoginSendChannelNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginSendChannelNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_addr_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.user_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stream_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stream_addr()) {
    _this->_impl_.stream_addr_.Set(from._internal_stream_addr(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_type_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_type_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LoginSendChannelNotify)
}

inline void LoginSendChannelNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_addr_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.user_type_){0u}
  };
  _impl_.stream_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginSendChannelNotify::~LoginSendChannelNotify() {
  // @@protoc_insertion_point(destructor:jukey.prot.LoginSendChannelNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginSendChannelNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_addr_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void LoginSendChannelNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginSendChannelNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LoginSendChannelNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stream_addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_type_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginSendChannelNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string stream_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stream_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LoginSendChannelNotify.stream_addr");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginSendChannelNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LoginSendChannelNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required string stream_addr = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_addr().data(), static_cast<int>(this->_internal_stream_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LoginSendChannelNotify.stream_addr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stream_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LoginSendChannelNotify)
  return target;
}

size_t LoginSendChannelNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LoginSendChannelNotify)
  size_t total_size = 0;

  if (_internal_has_stream_addr()) {
    // required string stream_addr = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_addr());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  return total_size;
}
size_t LoginSendChannelNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LoginSendChannelNotify)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string stream_addr = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_addr());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginSendChannelNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginSendChannelNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginSendChannelNotify::GetClassData() const { return &_class_data_; }


void LoginSendChannelNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginSendChannelNotify*>(&to_msg);
  auto& from = static_cast<const LoginSendChannelNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LoginSendChannelNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stream_addr(from._internal_stream_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginSendChannelNotify::CopyFrom(const LoginSendChannelNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LoginSendChannelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSendChannelNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void LoginSendChannelNotify::InternalSwap(LoginSendChannelNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_addr_, lhs_arena,
      &other->_impl_.stream_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginSendChannelNotify, _impl_.user_type_)
      + sizeof(LoginSendChannelNotify::_impl_.user_type_)
      - PROTOBUF_FIELD_OFFSET(LoginSendChannelNotify, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginSendChannelNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[8]);
}

// ===================================================================

class LoginSendChannelAck::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginSendChannelAck>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const LoginSendChannelAck* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::jukey::prot::NetStream&
LoginSendChannelAck::_Internal::stream(const LoginSendChannelAck* msg) {
  return *msg->_impl_.stream_;
}
void LoginSendChannelAck::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LoginSendChannelAck::LoginSendChannelAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LoginSendChannelAck)
}
LoginSendChannelAck::LoginSendChannelAck(const LoginSendChannelAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginSendChannelAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LoginSendChannelAck)
}

inline void LoginSendChannelAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginSendChannelAck::~LoginSendChannelAck() {
  // @@protoc_insertion_point(destructor:jukey.prot.LoginSendChannelAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginSendChannelAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void LoginSendChannelAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginSendChannelAck::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LoginSendChannelAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginSendChannelAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LoginSendChannelAck.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginSendChannelAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LoginSendChannelAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // required uint32 user_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_type(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 result = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_result(), target);
  }

  // required string msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LoginSendChannelAck.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LoginSendChannelAck)
  return target;
}

size_t LoginSendChannelAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LoginSendChannelAck)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_result()) {
    // required uint32 result = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t LoginSendChannelAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LoginSendChannelAck)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string msg = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 user_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 result = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginSendChannelAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginSendChannelAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginSendChannelAck::GetClassData() const { return &_class_data_; }


void LoginSendChannelAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginSendChannelAck*>(&to_msg);
  auto& from = static_cast<const LoginSendChannelAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LoginSendChannelAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginSendChannelAck::CopyFrom(const LoginSendChannelAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LoginSendChannelAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSendChannelAck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void LoginSendChannelAck::InternalSwap(LoginSendChannelAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginSendChannelAck, _impl_.result_)
      + sizeof(LoginSendChannelAck::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(LoginSendChannelAck, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginSendChannelAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[9]);
}

// ===================================================================

class GetParentNodeReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetParentNodeReq>()._impl_._has_bits_);
  static void set_has_service_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::jukey::prot::NetStream& stream(const GetParentNodeReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::jukey::prot::NetStream&
GetParentNodeReq::_Internal::stream(const GetParentNodeReq* msg) {
  return *msg->_impl_.stream_;
}
void GetParentNodeReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
GetParentNodeReq::GetParentNodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.GetParentNodeReq)
}
GetParentNodeReq::GetParentNodeReq(const GetParentNodeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetParentNodeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.service_addr_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.service_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instance_id()) {
    _this->_impl_.instance_id_.Set(from._internal_instance_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service_addr()) {
    _this->_impl_.service_addr_.Set(from._internal_service_addr(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  _this->_impl_.service_type_ = from._impl_.service_type_;
  // @@protoc_insertion_point(copy_constructor:jukey.prot.GetParentNodeReq)
}

inline void GetParentNodeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.service_addr_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.service_type_){0u}
  };
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetParentNodeReq::~GetParentNodeReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.GetParentNodeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetParentNodeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instance_id_.Destroy();
  _impl_.service_addr_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void GetParentNodeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetParentNodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.GetParentNodeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.instance_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.service_addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  _impl_.service_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetParentNodeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 service_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_service_type(&has_bits);
          _impl_.service_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.GetParentNodeReq.instance_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string service_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_service_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.GetParentNodeReq.service_addr");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetParentNodeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.GetParentNodeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 service_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_service_type(), target);
  }

  // required string instance_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_instance_id().data(), static_cast<int>(this->_internal_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.GetParentNodeReq.instance_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instance_id(), target);
  }

  // required string service_addr = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_service_addr().data(), static_cast<int>(this->_internal_service_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.GetParentNodeReq.service_addr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_addr(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.GetParentNodeReq)
  return target;
}

size_t GetParentNodeReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.GetParentNodeReq)
  size_t total_size = 0;

  if (_internal_has_instance_id()) {
    // required string instance_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_id());
  }

  if (_internal_has_service_addr()) {
    // required string service_addr = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_addr());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_service_type()) {
    // required uint32 service_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_service_type());
  }

  return total_size;
}
size_t GetParentNodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.GetParentNodeReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string instance_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_id());

    // required string service_addr = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_addr());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 service_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_service_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetParentNodeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetParentNodeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetParentNodeReq::GetClassData() const { return &_class_data_; }


void GetParentNodeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetParentNodeReq*>(&to_msg);
  auto& from = static_cast<const GetParentNodeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.GetParentNodeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_instance_id(from._internal_instance_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_service_addr(from._internal_service_addr());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.service_type_ = from._impl_.service_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetParentNodeReq::CopyFrom(const GetParentNodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.GetParentNodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetParentNodeReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void GetParentNodeReq::InternalSwap(GetParentNodeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_id_, lhs_arena,
      &other->_impl_.instance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_addr_, lhs_arena,
      &other->_impl_.service_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetParentNodeReq, _impl_.service_type_)
      + sizeof(GetParentNodeReq::_impl_.service_type_)
      - PROTOBUF_FIELD_OFFSET(GetParentNodeReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetParentNodeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[10]);
}

// ===================================================================

class StreamNode::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamNode>()._impl_._has_bits_);
  static void set_has_service_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

StreamNode::StreamNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.StreamNode)
}
StreamNode::StreamNode(const StreamNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.service_addr_){}
    , decltype(_impl_.service_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instance_id()) {
    _this->_impl_.instance_id_.Set(from._internal_instance_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service_addr()) {
    _this->_impl_.service_addr_.Set(from._internal_service_addr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.service_type_ = from._impl_.service_type_;
  // @@protoc_insertion_point(copy_constructor:jukey.prot.StreamNode)
}

inline void StreamNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.service_addr_){}
    , decltype(_impl_.service_type_){0u}
  };
  _impl_.instance_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamNode::~StreamNode() {
  // @@protoc_insertion_point(destructor:jukey.prot.StreamNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instance_id_.Destroy();
  _impl_.service_addr_.Destroy();
}

void StreamNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamNode::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.StreamNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.instance_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.service_addr_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.service_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 service_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_service_type(&has_bits);
          _impl_.service_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instance_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.StreamNode.instance_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string service_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_service_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.StreamNode.service_addr");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.StreamNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 service_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_service_type(), target);
  }

  // required string instance_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_instance_id().data(), static_cast<int>(this->_internal_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.StreamNode.instance_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instance_id(), target);
  }

  // required string service_addr = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_service_addr().data(), static_cast<int>(this->_internal_service_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.StreamNode.service_addr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.StreamNode)
  return target;
}

size_t StreamNode::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.StreamNode)
  size_t total_size = 0;

  if (_internal_has_instance_id()) {
    // required string instance_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_id());
  }

  if (_internal_has_service_addr()) {
    // required string service_addr = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_addr());
  }

  if (_internal_has_service_type()) {
    // required uint32 service_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_service_type());
  }

  return total_size;
}
size_t StreamNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.StreamNode)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string instance_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_id());

    // required string service_addr = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_addr());

    // required uint32 service_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_service_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamNode::GetClassData() const { return &_class_data_; }


void StreamNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamNode*>(&to_msg);
  auto& from = static_cast<const StreamNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.StreamNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_instance_id(from._internal_instance_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_service_addr(from._internal_service_addr());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.service_type_ = from._impl_.service_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamNode::CopyFrom(const StreamNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.StreamNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamNode::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StreamNode::InternalSwap(StreamNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_id_, lhs_arena,
      &other->_impl_.instance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_addr_, lhs_arena,
      &other->_impl_.service_addr_, rhs_arena
  );
  swap(_impl_.service_type_, other->_impl_.service_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[11]);
}

// ===================================================================

class GetParentNodeRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<GetParentNodeRsp>()._impl_._has_bits_);
  static const ::jukey::prot::NetStream& stream(const GetParentNodeRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::jukey::prot::NetStream&
GetParentNodeRsp::_Internal::stream(const GetParentNodeRsp* msg) {
  return *msg->_impl_.stream_;
}
void GetParentNodeRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetParentNodeRsp::GetParentNodeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.GetParentNodeRsp)
}
GetParentNodeRsp::GetParentNodeRsp(const GetParentNodeRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetParentNodeRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.stream_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  // @@protoc_insertion_point(copy_constructor:jukey.prot.GetParentNodeRsp)
}

inline void GetParentNodeRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nodes_){arena}
    , decltype(_impl_.stream_){nullptr}
  };
}

GetParentNodeRsp::~GetParentNodeRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.GetParentNodeRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetParentNodeRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void GetParentNodeRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetParentNodeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.GetParentNodeRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stream_ != nullptr);
    _impl_.stream_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetParentNodeRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.NetStream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .jukey.prot.StreamNode nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetParentNodeRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.GetParentNodeRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.NetStream stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // repeated .jukey.prot.StreamNode nodes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.GetParentNodeRsp)
  return target;
}

size_t GetParentNodeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.GetParentNodeRsp)
  size_t total_size = 0;

  // required .jukey.prot.NetStream stream = 1;
  if (_internal_has_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jukey.prot.StreamNode nodes = 2;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetParentNodeRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetParentNodeRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetParentNodeRsp::GetClassData() const { return &_class_data_; }


void GetParentNodeRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetParentNodeRsp*>(&to_msg);
  auto& from = static_cast<const GetParentNodeRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.GetParentNodeRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  if (from._internal_has_stream()) {
    _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
        from._internal_stream());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetParentNodeRsp::CopyFrom(const GetParentNodeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.GetParentNodeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetParentNodeRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.nodes_))
    return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void GetParentNodeRsp::InternalSwap(GetParentNodeRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  swap(_impl_.stream_, other->_impl_.stream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetParentNodeRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stream_2eproto_getter, &descriptor_table_stream_2eproto_once,
      file_level_metadata_stream_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prot
}  // namespace jukey
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jukey::prot::PublishStreamReq*
Arena::CreateMaybeMessage< ::jukey::prot::PublishStreamReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::PublishStreamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::PublishStreamRsp*
Arena::CreateMaybeMessage< ::jukey::prot::PublishStreamRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::PublishStreamRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UnpublishStreamReq*
Arena::CreateMaybeMessage< ::jukey::prot::UnpublishStreamReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UnpublishStreamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UnpublishStreamRsp*
Arena::CreateMaybeMessage< ::jukey::prot::UnpublishStreamRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UnpublishStreamRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::SubscribeStreamReq*
Arena::CreateMaybeMessage< ::jukey::prot::SubscribeStreamReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::SubscribeStreamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::SubscribeStreamRsp*
Arena::CreateMaybeMessage< ::jukey::prot::SubscribeStreamRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::SubscribeStreamRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UnsubscribeStreamReq*
Arena::CreateMaybeMessage< ::jukey::prot::UnsubscribeStreamReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UnsubscribeStreamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::UnsubscribeStreamRsp*
Arena::CreateMaybeMessage< ::jukey::prot::UnsubscribeStreamRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::UnsubscribeStreamRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LoginSendChannelNotify*
Arena::CreateMaybeMessage< ::jukey::prot::LoginSendChannelNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LoginSendChannelNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LoginSendChannelAck*
Arena::CreateMaybeMessage< ::jukey::prot::LoginSendChannelAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LoginSendChannelAck >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::GetParentNodeReq*
Arena::CreateMaybeMessage< ::jukey::prot::GetParentNodeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::GetParentNodeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::StreamNode*
Arena::CreateMaybeMessage< ::jukey::prot::StreamNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::StreamNode >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::GetParentNodeRsp*
Arena::CreateMaybeMessage< ::jukey::prot::GetParentNodeRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::GetParentNodeRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
