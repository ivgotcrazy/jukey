// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#include "transport.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace jukey {
namespace prot {
PROTOBUF_CONSTEXPR LoginSendChannelReq::LoginSendChannelReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u} {}
struct LoginSendChannelReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginSendChannelReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginSendChannelReqDefaultTypeInternal() {}
  union {
    LoginSendChannelReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginSendChannelReqDefaultTypeInternal _LoginSendChannelReq_default_instance_;
PROTOBUF_CONSTEXPR LoginSendChannelRsp::LoginSendChannelRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.channel_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct LoginSendChannelRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginSendChannelRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginSendChannelRspDefaultTypeInternal() {}
  union {
    LoginSendChannelRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginSendChannelRspDefaultTypeInternal _LoginSendChannelRsp_default_instance_;
PROTOBUF_CONSTEXPR LogoutSendChannelReq::LogoutSendChannelReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.channel_id_)*/0u} {}
struct LogoutSendChannelReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutSendChannelReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutSendChannelReqDefaultTypeInternal() {}
  union {
    LogoutSendChannelReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutSendChannelReqDefaultTypeInternal _LogoutSendChannelReq_default_instance_;
PROTOBUF_CONSTEXPR LogoutSendChannelRsp::LogoutSendChannelRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.channel_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct LogoutSendChannelRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutSendChannelRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutSendChannelRspDefaultTypeInternal() {}
  union {
    LogoutSendChannelRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutSendChannelRspDefaultTypeInternal _LogoutSendChannelRsp_default_instance_;
PROTOBUF_CONSTEXPR LoginRecvChannelReq::LoginRecvChannelReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u} {}
struct LoginRecvChannelReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRecvChannelReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRecvChannelReqDefaultTypeInternal() {}
  union {
    LoginRecvChannelReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRecvChannelReqDefaultTypeInternal _LoginRecvChannelReq_default_instance_;
PROTOBUF_CONSTEXPR LoginRecvChannelRsp::LoginRecvChannelRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.channel_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct LoginRecvChannelRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRecvChannelRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRecvChannelRspDefaultTypeInternal() {}
  union {
    LoginRecvChannelRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRecvChannelRspDefaultTypeInternal _LoginRecvChannelRsp_default_instance_;
PROTOBUF_CONSTEXPR LogoutRecvChannelReq::LogoutRecvChannelReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.channel_id_)*/0u} {}
struct LogoutRecvChannelReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutRecvChannelReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutRecvChannelReqDefaultTypeInternal() {}
  union {
    LogoutRecvChannelReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutRecvChannelReqDefaultTypeInternal _LogoutRecvChannelReq_default_instance_;
PROTOBUF_CONSTEXPR LogoutRecvChannelRsp::LogoutRecvChannelRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.app_id_)*/0u
  , /*decltype(_impl_.user_type_)*/0u
  , /*decltype(_impl_.user_id_)*/0u
  , /*decltype(_impl_.channel_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct LogoutRecvChannelRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutRecvChannelRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutRecvChannelRspDefaultTypeInternal() {}
  union {
    LogoutRecvChannelRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutRecvChannelRspDefaultTypeInternal _LogoutRecvChannelRsp_default_instance_;
PROTOBUF_CONSTEXPR NegotiateReq::NegotiateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.caps_)*/{}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/0u} {}
struct NegotiateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NegotiateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NegotiateReqDefaultTypeInternal() {}
  union {
    NegotiateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NegotiateReqDefaultTypeInternal _NegotiateReq_default_instance_;
PROTOBUF_CONSTEXPR NegotiateRsp::NegotiateRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cap_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct NegotiateRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NegotiateRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NegotiateRspDefaultTypeInternal() {}
  union {
    NegotiateRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NegotiateRspDefaultTypeInternal _NegotiateRsp_default_instance_;
PROTOBUF_CONSTEXPR StartSendStreamNotify::StartSendStreamNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/0u} {}
struct StartSendStreamNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartSendStreamNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartSendStreamNotifyDefaultTypeInternal() {}
  union {
    StartSendStreamNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartSendStreamNotifyDefaultTypeInternal _StartSendStreamNotify_default_instance_;
PROTOBUF_CONSTEXPR StartSendStreamAck::StartSendStreamAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct StartSendStreamAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartSendStreamAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartSendStreamAckDefaultTypeInternal() {}
  union {
    StartSendStreamAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartSendStreamAckDefaultTypeInternal _StartSendStreamAck_default_instance_;
PROTOBUF_CONSTEXPR StopSendStreamNotify::StopSendStreamNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/0u} {}
struct StopSendStreamNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopSendStreamNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopSendStreamNotifyDefaultTypeInternal() {}
  union {
    StopSendStreamNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopSendStreamNotifyDefaultTypeInternal _StopSendStreamNotify_default_instance_;
PROTOBUF_CONSTEXPR StopSendStreamAck::StopSendStreamAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct StopSendStreamAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopSendStreamAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopSendStreamAckDefaultTypeInternal() {}
  union {
    StopSendStreamAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopSendStreamAckDefaultTypeInternal _StopSendStreamAck_default_instance_;
PROTOBUF_CONSTEXPR PauseRecvStreamReq::PauseRecvStreamReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/0u} {}
struct PauseRecvStreamReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PauseRecvStreamReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PauseRecvStreamReqDefaultTypeInternal() {}
  union {
    PauseRecvStreamReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PauseRecvStreamReqDefaultTypeInternal _PauseRecvStreamReq_default_instance_;
PROTOBUF_CONSTEXPR PauseRecvStreamRsp::PauseRecvStreamRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct PauseRecvStreamRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PauseRecvStreamRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PauseRecvStreamRspDefaultTypeInternal() {}
  union {
    PauseRecvStreamRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PauseRecvStreamRspDefaultTypeInternal _PauseRecvStreamRsp_default_instance_;
PROTOBUF_CONSTEXPR ResumeRecvStreamReq::ResumeRecvStreamReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/0u} {}
struct ResumeRecvStreamReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResumeRecvStreamReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResumeRecvStreamReqDefaultTypeInternal() {}
  union {
    ResumeRecvStreamReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResumeRecvStreamReqDefaultTypeInternal _ResumeRecvStreamReq_default_instance_;
PROTOBUF_CONSTEXPR ResumeRecvStreamRsp::ResumeRecvStreamRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.channel_id_)*/0u
  , /*decltype(_impl_.result_)*/0u} {}
struct ResumeRecvStreamRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResumeRecvStreamRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResumeRecvStreamRspDefaultTypeInternal() {}
  union {
    ResumeRecvStreamRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResumeRecvStreamRspDefaultTypeInternal _ResumeRecvStreamRsp_default_instance_;
}  // namespace prot
}  // namespace jukey
static ::_pb::Metadata file_level_metadata_transport_2eproto[18];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transport_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transport_2eproto = nullptr;

const uint32_t TableStruct_transport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelReq, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelReq, _impl_.token_),
  2,
  3,
  4,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelRsp, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginSendChannelRsp, _impl_.msg_),
  2,
  3,
  4,
  1,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelReq, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelReq, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelReq, _impl_.token_),
  2,
  3,
  4,
  1,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelRsp, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutSendChannelRsp, _impl_.msg_),
  2,
  3,
  4,
  1,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelReq, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelReq, _impl_.token_),
  2,
  3,
  4,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelRsp, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LoginRecvChannelRsp, _impl_.msg_),
  2,
  3,
  4,
  1,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelReq, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelReq, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelReq, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelReq, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelReq, _impl_.token_),
  2,
  3,
  4,
  1,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelRsp, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelRsp, _impl_.user_type_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelRsp, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelRsp, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::LogoutRecvChannelRsp, _impl_.msg_),
  2,
  3,
  4,
  1,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateReq, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateReq, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateReq, _impl_.caps_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateRsp, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateRsp, _impl_.cap_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::NegotiateRsp, _impl_.msg_),
  2,
  3,
  0,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StartSendStreamNotify, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StartSendStreamNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StartSendStreamNotify, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StartSendStreamNotify, _impl_.channel_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StartSendStreamAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StartSendStreamAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StartSendStreamAck, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StartSendStreamAck, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StartSendStreamAck, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StartSendStreamAck, _impl_.msg_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StopSendStreamNotify, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StopSendStreamNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StopSendStreamNotify, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StopSendStreamNotify, _impl_.channel_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StopSendStreamAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StopSendStreamAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StopSendStreamAck, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StopSendStreamAck, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StopSendStreamAck, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::StopSendStreamAck, _impl_.msg_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PauseRecvStreamReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PauseRecvStreamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PauseRecvStreamReq, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PauseRecvStreamReq, _impl_.channel_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PauseRecvStreamRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PauseRecvStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PauseRecvStreamRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PauseRecvStreamRsp, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PauseRecvStreamRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::PauseRecvStreamRsp, _impl_.msg_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::ResumeRecvStreamReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::ResumeRecvStreamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::ResumeRecvStreamReq, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::ResumeRecvStreamReq, _impl_.channel_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::jukey::prot::ResumeRecvStreamRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::ResumeRecvStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::jukey::prot::ResumeRecvStreamRsp, _impl_.stream_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::ResumeRecvStreamRsp, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::ResumeRecvStreamRsp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::jukey::prot::ResumeRecvStreamRsp, _impl_.msg_),
  1,
  2,
  3,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::jukey::prot::LoginSendChannelReq)},
  { 16, 29, -1, sizeof(::jukey::prot::LoginSendChannelRsp)},
  { 36, 48, -1, sizeof(::jukey::prot::LogoutSendChannelReq)},
  { 54, 67, -1, sizeof(::jukey::prot::LogoutSendChannelRsp)},
  { 74, 85, -1, sizeof(::jukey::prot::LoginRecvChannelReq)},
  { 90, 103, -1, sizeof(::jukey::prot::LoginRecvChannelRsp)},
  { 110, 122, -1, sizeof(::jukey::prot::LogoutRecvChannelReq)},
  { 128, 141, -1, sizeof(::jukey::prot::LogoutRecvChannelRsp)},
  { 148, 157, -1, sizeof(::jukey::prot::NegotiateReq)},
  { 160, 171, -1, sizeof(::jukey::prot::NegotiateRsp)},
  { 176, 184, -1, sizeof(::jukey::prot::StartSendStreamNotify)},
  { 186, 196, -1, sizeof(::jukey::prot::StartSendStreamAck)},
  { 200, 208, -1, sizeof(::jukey::prot::StopSendStreamNotify)},
  { 210, 220, -1, sizeof(::jukey::prot::StopSendStreamAck)},
  { 224, 232, -1, sizeof(::jukey::prot::PauseRecvStreamReq)},
  { 234, 244, -1, sizeof(::jukey::prot::PauseRecvStreamRsp)},
  { 248, 256, -1, sizeof(::jukey::prot::ResumeRecvStreamReq)},
  { 258, 268, -1, sizeof(::jukey::prot::ResumeRecvStreamRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::jukey::prot::_LoginSendChannelReq_default_instance_._instance,
  &::jukey::prot::_LoginSendChannelRsp_default_instance_._instance,
  &::jukey::prot::_LogoutSendChannelReq_default_instance_._instance,
  &::jukey::prot::_LogoutSendChannelRsp_default_instance_._instance,
  &::jukey::prot::_LoginRecvChannelReq_default_instance_._instance,
  &::jukey::prot::_LoginRecvChannelRsp_default_instance_._instance,
  &::jukey::prot::_LogoutRecvChannelReq_default_instance_._instance,
  &::jukey::prot::_LogoutRecvChannelRsp_default_instance_._instance,
  &::jukey::prot::_NegotiateReq_default_instance_._instance,
  &::jukey::prot::_NegotiateRsp_default_instance_._instance,
  &::jukey::prot::_StartSendStreamNotify_default_instance_._instance,
  &::jukey::prot::_StartSendStreamAck_default_instance_._instance,
  &::jukey::prot::_StopSendStreamNotify_default_instance_._instance,
  &::jukey::prot::_StopSendStreamAck_default_instance_._instance,
  &::jukey::prot::_PauseRecvStreamReq_default_instance_._instance,
  &::jukey::prot::_PauseRecvStreamRsp_default_instance_._instance,
  &::jukey::prot::_ResumeRecvStreamReq_default_instance_._instance,
  &::jukey::prot::_ResumeRecvStreamRsp_default_instance_._instance,
};

const char descriptor_table_protodef_transport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017transport.proto\022\njukey.prot\032\014common.pr"
  "oto\"\177\n\023LoginSendChannelReq\022\016\n\006app_id\030\001 \002"
  "(\r\022\021\n\tuser_type\030\002 \002(\r\022\017\n\007user_id\030\003 \002(\r\022%"
  "\n\006stream\030\004 \002(\0132\025.jukey.prot.NetStream\022\r\n"
  "\005token\030\005 \002(\t\"\241\001\n\023LoginSendChannelRsp\022\016\n\006"
  "app_id\030\001 \002(\r\022\021\n\tuser_type\030\002 \002(\r\022\017\n\007user_"
  "id\030\003 \002(\r\022%\n\006stream\030\004 \002(\0132\025.jukey.prot.Ne"
  "tStream\022\022\n\nchannel_id\030\005 \002(\r\022\016\n\006result\030\006 "
  "\002(\r\022\013\n\003msg\030\007 \002(\t\"\224\001\n\024LogoutSendChannelRe"
  "q\022\016\n\006app_id\030\001 \002(\r\022\021\n\tuser_type\030\002 \002(\r\022\017\n\007"
  "user_id\030\003 \002(\r\022%\n\006stream\030\004 \002(\0132\025.jukey.pr"
  "ot.NetStream\022\022\n\nchannel_id\030\005 \002(\r\022\r\n\005toke"
  "n\030\006 \002(\t\"\242\001\n\024LogoutSendChannelRsp\022\016\n\006app_"
  "id\030\001 \002(\r\022\021\n\tuser_type\030\002 \002(\r\022\017\n\007user_id\030\003"
  " \002(\r\022%\n\006stream\030\004 \002(\0132\025.jukey.prot.NetStr"
  "eam\022\022\n\nchannel_id\030\005 \002(\r\022\016\n\006result\030\006 \002(\r\022"
  "\013\n\003msg\030\007 \002(\t\"\177\n\023LoginRecvChannelReq\022\016\n\006a"
  "pp_id\030\001 \002(\r\022\021\n\tuser_type\030\002 \002(\r\022\017\n\007user_i"
  "d\030\003 \002(\r\022%\n\006stream\030\004 \002(\0132\025.jukey.prot.Net"
  "Stream\022\r\n\005token\030\005 \002(\t\"\241\001\n\023LoginRecvChann"
  "elRsp\022\016\n\006app_id\030\001 \002(\r\022\021\n\tuser_type\030\002 \002(\r"
  "\022\017\n\007user_id\030\003 \002(\r\022%\n\006stream\030\004 \002(\0132\025.juke"
  "y.prot.NetStream\022\022\n\nchannel_id\030\005 \002(\r\022\016\n\006"
  "result\030\006 \002(\r\022\013\n\003msg\030\007 \002(\t\"\224\001\n\024LogoutRecv"
  "ChannelReq\022\016\n\006app_id\030\001 \002(\r\022\021\n\tuser_type\030"
  "\002 \002(\r\022\017\n\007user_id\030\003 \002(\r\022%\n\006stream\030\004 \002(\0132\025"
  ".jukey.prot.NetStream\022\022\n\nchannel_id\030\005 \002("
  "\r\022\r\n\005token\030\006 \002(\t\"\242\001\n\024LogoutRecvChannelRs"
  "p\022\016\n\006app_id\030\001 \002(\r\022\021\n\tuser_type\030\002 \002(\r\022\017\n\007"
  "user_id\030\003 \002(\r\022%\n\006stream\030\004 \002(\0132\025.jukey.pr"
  "ot.NetStream\022\022\n\nchannel_id\030\005 \002(\r\022\016\n\006resu"
  "lt\030\006 \002(\r\022\013\n\003msg\030\007 \002(\t\"W\n\014NegotiateReq\022%\n"
  "\006stream\030\001 \002(\0132\025.jukey.prot.NetStream\022\022\n\n"
  "channel_id\030\002 \002(\r\022\014\n\004caps\030\003 \003(\t\"s\n\014Negoti"
  "ateRsp\022%\n\006stream\030\001 \002(\0132\025.jukey.prot.NetS"
  "tream\022\022\n\nchannel_id\030\002 \002(\r\022\013\n\003cap\030\003 \002(\t\022\016"
  "\n\006result\030\004 \002(\r\022\013\n\003msg\030\005 \002(\t\"R\n\025StartSend"
  "StreamNotify\022%\n\006stream\030\001 \002(\0132\025.jukey.pro"
  "t.NetStream\022\022\n\nchannel_id\030\002 \002(\r\"l\n\022Start"
  "SendStreamAck\022%\n\006stream\030\001 \002(\0132\025.jukey.pr"
  "ot.NetStream\022\022\n\nchannel_id\030\002 \002(\r\022\016\n\006resu"
  "lt\030\003 \002(\r\022\013\n\003msg\030\004 \002(\t\"Q\n\024StopSendStreamN"
  "otify\022%\n\006stream\030\001 \002(\0132\025.jukey.prot.NetSt"
  "ream\022\022\n\nchannel_id\030\002 \002(\r\"k\n\021StopSendStre"
  "amAck\022%\n\006stream\030\001 \002(\0132\025.jukey.prot.NetSt"
  "ream\022\022\n\nchannel_id\030\002 \002(\r\022\016\n\006result\030\003 \002(\r"
  "\022\013\n\003msg\030\004 \002(\t\"O\n\022PauseRecvStreamReq\022%\n\006s"
  "tream\030\001 \002(\0132\025.jukey.prot.NetStream\022\022\n\nch"
  "annel_id\030\002 \002(\r\"l\n\022PauseRecvStreamRsp\022%\n\006"
  "stream\030\001 \002(\0132\025.jukey.prot.NetStream\022\022\n\nc"
  "hannel_id\030\002 \002(\r\022\016\n\006result\030\003 \002(\r\022\013\n\003msg\030\004"
  " \002(\t\"P\n\023ResumeRecvStreamReq\022%\n\006stream\030\001 "
  "\002(\0132\025.jukey.prot.NetStream\022\022\n\nchannel_id"
  "\030\002 \002(\r\"m\n\023ResumeRecvStreamRsp\022%\n\006stream\030"
  "\001 \002(\0132\025.jukey.prot.NetStream\022\022\n\nchannel_"
  "id\030\002 \002(\r\022\016\n\006result\030\003 \002(\r\022\013\n\003msg\030\004 \002(\t"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_transport_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_transport_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_2eproto = {
    false, false, 2237, descriptor_table_protodef_transport_2eproto,
    "transport.proto",
    &descriptor_table_transport_2eproto_once, descriptor_table_transport_2eproto_deps, 1, 18,
    schemas, file_default_instances, TableStruct_transport_2eproto::offsets,
    file_level_metadata_transport_2eproto, file_level_enum_descriptors_transport_2eproto,
    file_level_service_descriptors_transport_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_2eproto_getter() {
  return &descriptor_table_transport_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_2eproto(&descriptor_table_transport_2eproto);
namespace jukey {
namespace prot {

// ===================================================================

class LoginSendChannelReq::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginSendChannelReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const LoginSendChannelReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::jukey::prot::NetStream&
LoginSendChannelReq::_Internal::stream(const LoginSendChannelReq* msg) {
  return *msg->_impl_.stream_;
}
void LoginSendChannelReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LoginSendChannelReq::LoginSendChannelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LoginSendChannelReq)
}
LoginSendChannelReq::LoginSendChannelReq(const LoginSendChannelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginSendChannelReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LoginSendChannelReq)
}

inline void LoginSendChannelReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginSendChannelReq::~LoginSendChannelReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.LoginSendChannelReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginSendChannelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void LoginSendChannelReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginSendChannelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LoginSendChannelReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginSendChannelReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LoginSendChannelReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginSendChannelReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LoginSendChannelReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required string token = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LoginSendChannelReq.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LoginSendChannelReq)
  return target;
}

size_t LoginSendChannelReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LoginSendChannelReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return total_size;
}
size_t LoginSendChannelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LoginSendChannelReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginSendChannelReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginSendChannelReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginSendChannelReq::GetClassData() const { return &_class_data_; }


void LoginSendChannelReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginSendChannelReq*>(&to_msg);
  auto& from = static_cast<const LoginSendChannelReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LoginSendChannelReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginSendChannelReq::CopyFrom(const LoginSendChannelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LoginSendChannelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSendChannelReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void LoginSendChannelReq::InternalSwap(LoginSendChannelReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginSendChannelReq, _impl_.user_id_)
      + sizeof(LoginSendChannelReq::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(LoginSendChannelReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginSendChannelReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[0]);
}

// ===================================================================

class LoginSendChannelRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginSendChannelRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const LoginSendChannelRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::jukey::prot::NetStream&
LoginSendChannelRsp::_Internal::stream(const LoginSendChannelRsp* msg) {
  return *msg->_impl_.stream_;
}
void LoginSendChannelRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LoginSendChannelRsp::LoginSendChannelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LoginSendChannelRsp)
}
LoginSendChannelRsp::LoginSendChannelRsp(const LoginSendChannelRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginSendChannelRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LoginSendChannelRsp)
}

inline void LoginSendChannelRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.channel_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginSendChannelRsp::~LoginSendChannelRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.LoginSendChannelRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginSendChannelRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void LoginSendChannelRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginSendChannelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LoginSendChannelRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginSendChannelRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LoginSendChannelRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginSendChannelRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LoginSendChannelRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channel_id(), target);
  }

  // required uint32 result = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_result(), target);
  }

  // required string msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LoginSendChannelRsp.msg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LoginSendChannelRsp)
  return target;
}

size_t LoginSendChannelRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LoginSendChannelRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t LoginSendChannelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LoginSendChannelRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginSendChannelRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginSendChannelRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginSendChannelRsp::GetClassData() const { return &_class_data_; }


void LoginSendChannelRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginSendChannelRsp*>(&to_msg);
  auto& from = static_cast<const LoginSendChannelRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LoginSendChannelRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginSendChannelRsp::CopyFrom(const LoginSendChannelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LoginSendChannelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSendChannelRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void LoginSendChannelRsp::InternalSwap(LoginSendChannelRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginSendChannelRsp, _impl_.result_)
      + sizeof(LoginSendChannelRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(LoginSendChannelRsp, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginSendChannelRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[1]);
}

// ===================================================================

class LogoutSendChannelReq::_Internal {
 public:
  using HasBits = decltype(std::declval<LogoutSendChannelReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const LogoutSendChannelReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::jukey::prot::NetStream&
LogoutSendChannelReq::_Internal::stream(const LogoutSendChannelReq* msg) {
  return *msg->_impl_.stream_;
}
void LogoutSendChannelReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LogoutSendChannelReq::LogoutSendChannelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LogoutSendChannelReq)
}
LogoutSendChannelReq::LogoutSendChannelReq(const LogoutSendChannelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogoutSendChannelReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.channel_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.channel_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LogoutSendChannelReq)
}

inline void LogoutSendChannelReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.channel_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogoutSendChannelReq::~LogoutSendChannelReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.LogoutSendChannelReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogoutSendChannelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void LogoutSendChannelReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogoutSendChannelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LogoutSendChannelReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channel_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.channel_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutSendChannelReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LogoutSendChannelReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogoutSendChannelReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LogoutSendChannelReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channel_id(), target);
  }

  // required string token = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LogoutSendChannelReq.token");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LogoutSendChannelReq)
  return target;
}

size_t LogoutSendChannelReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LogoutSendChannelReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  return total_size;
}
size_t LogoutSendChannelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LogoutSendChannelReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string token = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutSendChannelReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogoutSendChannelReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutSendChannelReq::GetClassData() const { return &_class_data_; }


void LogoutSendChannelReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogoutSendChannelReq*>(&to_msg);
  auto& from = static_cast<const LogoutSendChannelReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LogoutSendChannelReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutSendChannelReq::CopyFrom(const LogoutSendChannelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LogoutSendChannelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutSendChannelReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void LogoutSendChannelReq::InternalSwap(LogoutSendChannelReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogoutSendChannelReq, _impl_.channel_id_)
      + sizeof(LogoutSendChannelReq::_impl_.channel_id_)
      - PROTOBUF_FIELD_OFFSET(LogoutSendChannelReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutSendChannelReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[2]);
}

// ===================================================================

class LogoutSendChannelRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<LogoutSendChannelRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const LogoutSendChannelRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::jukey::prot::NetStream&
LogoutSendChannelRsp::_Internal::stream(const LogoutSendChannelRsp* msg) {
  return *msg->_impl_.stream_;
}
void LogoutSendChannelRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LogoutSendChannelRsp::LogoutSendChannelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LogoutSendChannelRsp)
}
LogoutSendChannelRsp::LogoutSendChannelRsp(const LogoutSendChannelRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogoutSendChannelRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LogoutSendChannelRsp)
}

inline void LogoutSendChannelRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.channel_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogoutSendChannelRsp::~LogoutSendChannelRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.LogoutSendChannelRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogoutSendChannelRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void LogoutSendChannelRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogoutSendChannelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LogoutSendChannelRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutSendChannelRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LogoutSendChannelRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogoutSendChannelRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LogoutSendChannelRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channel_id(), target);
  }

  // required uint32 result = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_result(), target);
  }

  // required string msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LogoutSendChannelRsp.msg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LogoutSendChannelRsp)
  return target;
}

size_t LogoutSendChannelRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LogoutSendChannelRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t LogoutSendChannelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LogoutSendChannelRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutSendChannelRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogoutSendChannelRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutSendChannelRsp::GetClassData() const { return &_class_data_; }


void LogoutSendChannelRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogoutSendChannelRsp*>(&to_msg);
  auto& from = static_cast<const LogoutSendChannelRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LogoutSendChannelRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutSendChannelRsp::CopyFrom(const LogoutSendChannelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LogoutSendChannelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutSendChannelRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void LogoutSendChannelRsp::InternalSwap(LogoutSendChannelRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogoutSendChannelRsp, _impl_.result_)
      + sizeof(LogoutSendChannelRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(LogoutSendChannelRsp, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutSendChannelRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[3]);
}

// ===================================================================

class LoginRecvChannelReq::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginRecvChannelReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const LoginRecvChannelReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::jukey::prot::NetStream&
LoginRecvChannelReq::_Internal::stream(const LoginRecvChannelReq* msg) {
  return *msg->_impl_.stream_;
}
void LoginRecvChannelReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LoginRecvChannelReq::LoginRecvChannelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LoginRecvChannelReq)
}
LoginRecvChannelReq::LoginRecvChannelReq(const LoginRecvChannelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRecvChannelReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LoginRecvChannelReq)
}

inline void LoginRecvChannelReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRecvChannelReq::~LoginRecvChannelReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.LoginRecvChannelReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRecvChannelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void LoginRecvChannelReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRecvChannelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LoginRecvChannelReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRecvChannelReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LoginRecvChannelReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRecvChannelReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LoginRecvChannelReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required string token = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LoginRecvChannelReq.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LoginRecvChannelReq)
  return target;
}

size_t LoginRecvChannelReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LoginRecvChannelReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return total_size;
}
size_t LoginRecvChannelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LoginRecvChannelReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string token = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRecvChannelReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRecvChannelReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRecvChannelReq::GetClassData() const { return &_class_data_; }


void LoginRecvChannelReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRecvChannelReq*>(&to_msg);
  auto& from = static_cast<const LoginRecvChannelReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LoginRecvChannelReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRecvChannelReq::CopyFrom(const LoginRecvChannelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LoginRecvChannelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRecvChannelReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void LoginRecvChannelReq::InternalSwap(LoginRecvChannelReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginRecvChannelReq, _impl_.user_id_)
      + sizeof(LoginRecvChannelReq::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(LoginRecvChannelReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRecvChannelReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[4]);
}

// ===================================================================

class LoginRecvChannelRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginRecvChannelRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const LoginRecvChannelRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::jukey::prot::NetStream&
LoginRecvChannelRsp::_Internal::stream(const LoginRecvChannelRsp* msg) {
  return *msg->_impl_.stream_;
}
void LoginRecvChannelRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LoginRecvChannelRsp::LoginRecvChannelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LoginRecvChannelRsp)
}
LoginRecvChannelRsp::LoginRecvChannelRsp(const LoginRecvChannelRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRecvChannelRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LoginRecvChannelRsp)
}

inline void LoginRecvChannelRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.channel_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRecvChannelRsp::~LoginRecvChannelRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.LoginRecvChannelRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRecvChannelRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void LoginRecvChannelRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRecvChannelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LoginRecvChannelRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRecvChannelRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LoginRecvChannelRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRecvChannelRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LoginRecvChannelRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channel_id(), target);
  }

  // required uint32 result = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_result(), target);
  }

  // required string msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LoginRecvChannelRsp.msg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LoginRecvChannelRsp)
  return target;
}

size_t LoginRecvChannelRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LoginRecvChannelRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t LoginRecvChannelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LoginRecvChannelRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRecvChannelRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRecvChannelRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRecvChannelRsp::GetClassData() const { return &_class_data_; }


void LoginRecvChannelRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRecvChannelRsp*>(&to_msg);
  auto& from = static_cast<const LoginRecvChannelRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LoginRecvChannelRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRecvChannelRsp::CopyFrom(const LoginRecvChannelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LoginRecvChannelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRecvChannelRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void LoginRecvChannelRsp::InternalSwap(LoginRecvChannelRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginRecvChannelRsp, _impl_.result_)
      + sizeof(LoginRecvChannelRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(LoginRecvChannelRsp, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRecvChannelRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[5]);
}

// ===================================================================

class LogoutRecvChannelReq::_Internal {
 public:
  using HasBits = decltype(std::declval<LogoutRecvChannelReq>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const LogoutRecvChannelReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::jukey::prot::NetStream&
LogoutRecvChannelReq::_Internal::stream(const LogoutRecvChannelReq* msg) {
  return *msg->_impl_.stream_;
}
void LogoutRecvChannelReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LogoutRecvChannelReq::LogoutRecvChannelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LogoutRecvChannelReq)
}
LogoutRecvChannelReq::LogoutRecvChannelReq(const LogoutRecvChannelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogoutRecvChannelReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.channel_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_id_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.channel_id_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LogoutRecvChannelReq)
}

inline void LogoutRecvChannelReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.channel_id_){0u}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogoutRecvChannelReq::~LogoutRecvChannelReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.LogoutRecvChannelReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogoutRecvChannelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void LogoutRecvChannelReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogoutRecvChannelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LogoutRecvChannelReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channel_id_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.channel_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutRecvChannelReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LogoutRecvChannelReq.token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogoutRecvChannelReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LogoutRecvChannelReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channel_id(), target);
  }

  // required string token = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LogoutRecvChannelReq.token");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LogoutRecvChannelReq)
  return target;
}

size_t LogoutRecvChannelReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LogoutRecvChannelReq)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required string token = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  return total_size;
}
size_t LogoutRecvChannelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LogoutRecvChannelReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string token = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutRecvChannelReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogoutRecvChannelReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutRecvChannelReq::GetClassData() const { return &_class_data_; }


void LogoutRecvChannelReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogoutRecvChannelReq*>(&to_msg);
  auto& from = static_cast<const LogoutRecvChannelReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LogoutRecvChannelReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutRecvChannelReq::CopyFrom(const LogoutRecvChannelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LogoutRecvChannelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRecvChannelReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void LogoutRecvChannelReq::InternalSwap(LogoutRecvChannelReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogoutRecvChannelReq, _impl_.channel_id_)
      + sizeof(LogoutRecvChannelReq::_impl_.channel_id_)
      - PROTOBUF_FIELD_OFFSET(LogoutRecvChannelReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutRecvChannelReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[6]);
}

// ===================================================================

class LogoutRecvChannelRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<LogoutRecvChannelRsp>()._impl_._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::jukey::prot::NetStream& stream(const LogoutRecvChannelRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::jukey::prot::NetStream&
LogoutRecvChannelRsp::_Internal::stream(const LogoutRecvChannelRsp* msg) {
  return *msg->_impl_.stream_;
}
void LogoutRecvChannelRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LogoutRecvChannelRsp::LogoutRecvChannelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.LogoutRecvChannelRsp)
}
LogoutRecvChannelRsp::LogoutRecvChannelRsp(const LogoutRecvChannelRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogoutRecvChannelRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.user_type_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.app_id_, &from._impl_.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.LogoutRecvChannelRsp)
}

inline void LogoutRecvChannelRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.app_id_){0u}
    , decltype(_impl_.user_type_){0u}
    , decltype(_impl_.user_id_){0u}
    , decltype(_impl_.channel_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogoutRecvChannelRsp::~LogoutRecvChannelRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.LogoutRecvChannelRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogoutRecvChannelRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void LogoutRecvChannelRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogoutRecvChannelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.LogoutRecvChannelRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.app_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutRecvChannelRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_type(&has_bits);
          _impl_.user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .jukey.prot.NetStream stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.LogoutRecvChannelRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogoutRecvChannelRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.LogoutRecvChannelRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_type(), target);
  }

  // required uint32 user_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_user_id(), target);
  }

  // required .jukey.prot.NetStream stream = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channel_id(), target);
  }

  // required uint32 result = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_result(), target);
  }

  // required string msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.LogoutRecvChannelRsp.msg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.LogoutRecvChannelRsp)
  return target;
}

size_t LogoutRecvChannelRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.LogoutRecvChannelRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_app_id()) {
    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  if (_internal_has_user_type()) {
    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());
  }

  if (_internal_has_user_id()) {
    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t LogoutRecvChannelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.LogoutRecvChannelRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string msg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 app_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());

    // required uint32 user_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_type());

    // required uint32 user_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());

    // required uint32 channel_id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

    // required uint32 result = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutRecvChannelRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogoutRecvChannelRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutRecvChannelRsp::GetClassData() const { return &_class_data_; }


void LogoutRecvChannelRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogoutRecvChannelRsp*>(&to_msg);
  auto& from = static_cast<const LogoutRecvChannelRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.LogoutRecvChannelRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.user_type_ = from._impl_.user_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutRecvChannelRsp::CopyFrom(const LogoutRecvChannelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.LogoutRecvChannelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRecvChannelRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void LogoutRecvChannelRsp::InternalSwap(LogoutRecvChannelRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogoutRecvChannelRsp, _impl_.result_)
      + sizeof(LogoutRecvChannelRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(LogoutRecvChannelRsp, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutRecvChannelRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[7]);
}

// ===================================================================

class NegotiateReq::_Internal {
 public:
  using HasBits = decltype(std::declval<NegotiateReq>()._impl_._has_bits_);
  static const ::jukey::prot::NetStream& stream(const NegotiateReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::jukey::prot::NetStream&
NegotiateReq::_Internal::stream(const NegotiateReq* msg) {
  return *msg->_impl_.stream_;
}
void NegotiateReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NegotiateReq::NegotiateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.NegotiateReq)
}
NegotiateReq::NegotiateReq(const NegotiateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NegotiateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caps_){from._impl_.caps_}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:jukey.prot.NegotiateReq)
}

inline void NegotiateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caps_){arena}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){0u}
  };
}

NegotiateReq::~NegotiateReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.NegotiateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NegotiateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.caps_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void NegotiateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NegotiateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.NegotiateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.caps_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stream_ != nullptr);
    _impl_.stream_->Clear();
  }
  _impl_.channel_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NegotiateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.NetStream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string caps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_caps();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "jukey.prot.NegotiateReq.caps");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NegotiateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.NegotiateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.NetStream stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_id(), target);
  }

  // repeated string caps = 3;
  for (int i = 0, n = this->_internal_caps_size(); i < n; i++) {
    const auto& s = this->_internal_caps(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.NegotiateReq.caps");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.NegotiateReq)
  return target;
}

size_t NegotiateReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.NegotiateReq)
  size_t total_size = 0;

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  return total_size;
}
size_t NegotiateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.NegotiateReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string caps = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.caps_.size());
  for (int i = 0, n = _impl_.caps_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.caps_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NegotiateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NegotiateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NegotiateReq::GetClassData() const { return &_class_data_; }


void NegotiateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NegotiateReq*>(&to_msg);
  auto& from = static_cast<const NegotiateReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.NegotiateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.caps_.MergeFrom(from._impl_.caps_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NegotiateReq::CopyFrom(const NegotiateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.NegotiateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NegotiateReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void NegotiateReq::InternalSwap(NegotiateReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.caps_.InternalSwap(&other->_impl_.caps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NegotiateReq, _impl_.channel_id_)
      + sizeof(NegotiateReq::_impl_.channel_id_)
      - PROTOBUF_FIELD_OFFSET(NegotiateReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NegotiateReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[8]);
}

// ===================================================================

class NegotiateRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<NegotiateRsp>()._impl_._has_bits_);
  static const ::jukey::prot::NetStream& stream(const NegotiateRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::jukey::prot::NetStream&
NegotiateRsp::_Internal::stream(const NegotiateRsp* msg) {
  return *msg->_impl_.stream_;
}
void NegotiateRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
NegotiateRsp::NegotiateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.NegotiateRsp)
}
NegotiateRsp::NegotiateRsp(const NegotiateRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NegotiateRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cap_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cap()) {
    _this->_impl_.cap_.Set(from._internal_cap(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.NegotiateRsp)
}

inline void NegotiateRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cap_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.cap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NegotiateRsp::~NegotiateRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.NegotiateRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NegotiateRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cap_.Destroy();
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void NegotiateRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NegotiateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.NegotiateRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cap_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NegotiateRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.NetStream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string cap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.NegotiateRsp.cap");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.NegotiateRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NegotiateRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.NegotiateRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.NetStream stream = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_id(), target);
  }

  // required string cap = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cap().data(), static_cast<int>(this->_internal_cap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.NegotiateRsp.cap");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cap(), target);
  }

  // required uint32 result = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_result(), target);
  }

  // required string msg = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.NegotiateRsp.msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.NegotiateRsp)
  return target;
}

size_t NegotiateRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.NegotiateRsp)
  size_t total_size = 0;

  if (_internal_has_cap()) {
    // required string cap = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cap());
  }

  if (_internal_has_msg()) {
    // required string msg = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t NegotiateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.NegotiateRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string cap = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cap());

    // required string msg = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

    // required uint32 result = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NegotiateRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NegotiateRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NegotiateRsp::GetClassData() const { return &_class_data_; }


void NegotiateRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NegotiateRsp*>(&to_msg);
  auto& from = static_cast<const NegotiateRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.NegotiateRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cap(from._internal_cap());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NegotiateRsp::CopyFrom(const NegotiateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.NegotiateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NegotiateRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void NegotiateRsp::InternalSwap(NegotiateRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cap_, lhs_arena,
      &other->_impl_.cap_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NegotiateRsp, _impl_.result_)
      + sizeof(NegotiateRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(NegotiateRsp, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NegotiateRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[9]);
}

// ===================================================================

class StartSendStreamNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<StartSendStreamNotify>()._impl_._has_bits_);
  static const ::jukey::prot::NetStream& stream(const StartSendStreamNotify* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::jukey::prot::NetStream&
StartSendStreamNotify::_Internal::stream(const StartSendStreamNotify* msg) {
  return *msg->_impl_.stream_;
}
void StartSendStreamNotify::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StartSendStreamNotify::StartSendStreamNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.StartSendStreamNotify)
}
StartSendStreamNotify::StartSendStreamNotify(const StartSendStreamNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartSendStreamNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:jukey.prot.StartSendStreamNotify)
}

inline void StartSendStreamNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){0u}
  };
}

StartSendStreamNotify::~StartSendStreamNotify() {
  // @@protoc_insertion_point(destructor:jukey.prot.StartSendStreamNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartSendStreamNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void StartSendStreamNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartSendStreamNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.StartSendStreamNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stream_ != nullptr);
    _impl_.stream_->Clear();
  }
  _impl_.channel_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartSendStreamNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.NetStream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartSendStreamNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.StartSendStreamNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.NetStream stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.StartSendStreamNotify)
  return target;
}

size_t StartSendStreamNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.StartSendStreamNotify)
  size_t total_size = 0;

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  return total_size;
}
size_t StartSendStreamNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.StartSendStreamNotify)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartSendStreamNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartSendStreamNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartSendStreamNotify::GetClassData() const { return &_class_data_; }


void StartSendStreamNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartSendStreamNotify*>(&to_msg);
  auto& from = static_cast<const StartSendStreamNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.StartSendStreamNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartSendStreamNotify::CopyFrom(const StartSendStreamNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.StartSendStreamNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSendStreamNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void StartSendStreamNotify::InternalSwap(StartSendStreamNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartSendStreamNotify, _impl_.channel_id_)
      + sizeof(StartSendStreamNotify::_impl_.channel_id_)
      - PROTOBUF_FIELD_OFFSET(StartSendStreamNotify, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartSendStreamNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[10]);
}

// ===================================================================

class StartSendStreamAck::_Internal {
 public:
  using HasBits = decltype(std::declval<StartSendStreamAck>()._impl_._has_bits_);
  static const ::jukey::prot::NetStream& stream(const StartSendStreamAck* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::jukey::prot::NetStream&
StartSendStreamAck::_Internal::stream(const StartSendStreamAck* msg) {
  return *msg->_impl_.stream_;
}
void StartSendStreamAck::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
StartSendStreamAck::StartSendStreamAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.StartSendStreamAck)
}
StartSendStreamAck::StartSendStreamAck(const StartSendStreamAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartSendStreamAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.StartSendStreamAck)
}

inline void StartSendStreamAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartSendStreamAck::~StartSendStreamAck() {
  // @@protoc_insertion_point(destructor:jukey.prot.StartSendStreamAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartSendStreamAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void StartSendStreamAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartSendStreamAck::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.StartSendStreamAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartSendStreamAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.NetStream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.StartSendStreamAck.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartSendStreamAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.StartSendStreamAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.NetStream stream = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_id(), target);
  }

  // required uint32 result = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result(), target);
  }

  // required string msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.StartSendStreamAck.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.StartSendStreamAck)
  return target;
}

size_t StartSendStreamAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.StartSendStreamAck)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t StartSendStreamAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.StartSendStreamAck)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string msg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

    // required uint32 result = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartSendStreamAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartSendStreamAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartSendStreamAck::GetClassData() const { return &_class_data_; }


void StartSendStreamAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartSendStreamAck*>(&to_msg);
  auto& from = static_cast<const StartSendStreamAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.StartSendStreamAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartSendStreamAck::CopyFrom(const StartSendStreamAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.StartSendStreamAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSendStreamAck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void StartSendStreamAck::InternalSwap(StartSendStreamAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartSendStreamAck, _impl_.result_)
      + sizeof(StartSendStreamAck::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(StartSendStreamAck, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartSendStreamAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[11]);
}

// ===================================================================

class StopSendStreamNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<StopSendStreamNotify>()._impl_._has_bits_);
  static const ::jukey::prot::NetStream& stream(const StopSendStreamNotify* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::jukey::prot::NetStream&
StopSendStreamNotify::_Internal::stream(const StopSendStreamNotify* msg) {
  return *msg->_impl_.stream_;
}
void StopSendStreamNotify::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StopSendStreamNotify::StopSendStreamNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.StopSendStreamNotify)
}
StopSendStreamNotify::StopSendStreamNotify(const StopSendStreamNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopSendStreamNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:jukey.prot.StopSendStreamNotify)
}

inline void StopSendStreamNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){0u}
  };
}

StopSendStreamNotify::~StopSendStreamNotify() {
  // @@protoc_insertion_point(destructor:jukey.prot.StopSendStreamNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopSendStreamNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void StopSendStreamNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopSendStreamNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.StopSendStreamNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stream_ != nullptr);
    _impl_.stream_->Clear();
  }
  _impl_.channel_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopSendStreamNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.NetStream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopSendStreamNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.StopSendStreamNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.NetStream stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.StopSendStreamNotify)
  return target;
}

size_t StopSendStreamNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.StopSendStreamNotify)
  size_t total_size = 0;

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  return total_size;
}
size_t StopSendStreamNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.StopSendStreamNotify)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopSendStreamNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopSendStreamNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopSendStreamNotify::GetClassData() const { return &_class_data_; }


void StopSendStreamNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopSendStreamNotify*>(&to_msg);
  auto& from = static_cast<const StopSendStreamNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.StopSendStreamNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopSendStreamNotify::CopyFrom(const StopSendStreamNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.StopSendStreamNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSendStreamNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void StopSendStreamNotify::InternalSwap(StopSendStreamNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopSendStreamNotify, _impl_.channel_id_)
      + sizeof(StopSendStreamNotify::_impl_.channel_id_)
      - PROTOBUF_FIELD_OFFSET(StopSendStreamNotify, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSendStreamNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[12]);
}

// ===================================================================

class StopSendStreamAck::_Internal {
 public:
  using HasBits = decltype(std::declval<StopSendStreamAck>()._impl_._has_bits_);
  static const ::jukey::prot::NetStream& stream(const StopSendStreamAck* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::jukey::prot::NetStream&
StopSendStreamAck::_Internal::stream(const StopSendStreamAck* msg) {
  return *msg->_impl_.stream_;
}
void StopSendStreamAck::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
StopSendStreamAck::StopSendStreamAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.StopSendStreamAck)
}
StopSendStreamAck::StopSendStreamAck(const StopSendStreamAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopSendStreamAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.StopSendStreamAck)
}

inline void StopSendStreamAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopSendStreamAck::~StopSendStreamAck() {
  // @@protoc_insertion_point(destructor:jukey.prot.StopSendStreamAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopSendStreamAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void StopSendStreamAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopSendStreamAck::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.StopSendStreamAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopSendStreamAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.NetStream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.StopSendStreamAck.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopSendStreamAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.StopSendStreamAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.NetStream stream = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_id(), target);
  }

  // required uint32 result = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result(), target);
  }

  // required string msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.StopSendStreamAck.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.StopSendStreamAck)
  return target;
}

size_t StopSendStreamAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.StopSendStreamAck)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t StopSendStreamAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.StopSendStreamAck)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string msg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

    // required uint32 result = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopSendStreamAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopSendStreamAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopSendStreamAck::GetClassData() const { return &_class_data_; }


void StopSendStreamAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopSendStreamAck*>(&to_msg);
  auto& from = static_cast<const StopSendStreamAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.StopSendStreamAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopSendStreamAck::CopyFrom(const StopSendStreamAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.StopSendStreamAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSendStreamAck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void StopSendStreamAck::InternalSwap(StopSendStreamAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopSendStreamAck, _impl_.result_)
      + sizeof(StopSendStreamAck::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(StopSendStreamAck, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSendStreamAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[13]);
}

// ===================================================================

class PauseRecvStreamReq::_Internal {
 public:
  using HasBits = decltype(std::declval<PauseRecvStreamReq>()._impl_._has_bits_);
  static const ::jukey::prot::NetStream& stream(const PauseRecvStreamReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::jukey::prot::NetStream&
PauseRecvStreamReq::_Internal::stream(const PauseRecvStreamReq* msg) {
  return *msg->_impl_.stream_;
}
void PauseRecvStreamReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PauseRecvStreamReq::PauseRecvStreamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.PauseRecvStreamReq)
}
PauseRecvStreamReq::PauseRecvStreamReq(const PauseRecvStreamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PauseRecvStreamReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:jukey.prot.PauseRecvStreamReq)
}

inline void PauseRecvStreamReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){0u}
  };
}

PauseRecvStreamReq::~PauseRecvStreamReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.PauseRecvStreamReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PauseRecvStreamReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void PauseRecvStreamReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PauseRecvStreamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.PauseRecvStreamReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stream_ != nullptr);
    _impl_.stream_->Clear();
  }
  _impl_.channel_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseRecvStreamReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.NetStream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PauseRecvStreamReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.PauseRecvStreamReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.NetStream stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.PauseRecvStreamReq)
  return target;
}

size_t PauseRecvStreamReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.PauseRecvStreamReq)
  size_t total_size = 0;

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  return total_size;
}
size_t PauseRecvStreamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.PauseRecvStreamReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PauseRecvStreamReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PauseRecvStreamReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PauseRecvStreamReq::GetClassData() const { return &_class_data_; }


void PauseRecvStreamReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PauseRecvStreamReq*>(&to_msg);
  auto& from = static_cast<const PauseRecvStreamReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.PauseRecvStreamReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PauseRecvStreamReq::CopyFrom(const PauseRecvStreamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.PauseRecvStreamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseRecvStreamReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void PauseRecvStreamReq::InternalSwap(PauseRecvStreamReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PauseRecvStreamReq, _impl_.channel_id_)
      + sizeof(PauseRecvStreamReq::_impl_.channel_id_)
      - PROTOBUF_FIELD_OFFSET(PauseRecvStreamReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseRecvStreamReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[14]);
}

// ===================================================================

class PauseRecvStreamRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<PauseRecvStreamRsp>()._impl_._has_bits_);
  static const ::jukey::prot::NetStream& stream(const PauseRecvStreamRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::jukey::prot::NetStream&
PauseRecvStreamRsp::_Internal::stream(const PauseRecvStreamRsp* msg) {
  return *msg->_impl_.stream_;
}
void PauseRecvStreamRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PauseRecvStreamRsp::PauseRecvStreamRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.PauseRecvStreamRsp)
}
PauseRecvStreamRsp::PauseRecvStreamRsp(const PauseRecvStreamRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PauseRecvStreamRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.PauseRecvStreamRsp)
}

inline void PauseRecvStreamRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PauseRecvStreamRsp::~PauseRecvStreamRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.PauseRecvStreamRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PauseRecvStreamRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void PauseRecvStreamRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PauseRecvStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.PauseRecvStreamRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseRecvStreamRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.NetStream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.PauseRecvStreamRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PauseRecvStreamRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.PauseRecvStreamRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.NetStream stream = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_id(), target);
  }

  // required uint32 result = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result(), target);
  }

  // required string msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.PauseRecvStreamRsp.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.PauseRecvStreamRsp)
  return target;
}

size_t PauseRecvStreamRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.PauseRecvStreamRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t PauseRecvStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.PauseRecvStreamRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string msg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

    // required uint32 result = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PauseRecvStreamRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PauseRecvStreamRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PauseRecvStreamRsp::GetClassData() const { return &_class_data_; }


void PauseRecvStreamRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PauseRecvStreamRsp*>(&to_msg);
  auto& from = static_cast<const PauseRecvStreamRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.PauseRecvStreamRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PauseRecvStreamRsp::CopyFrom(const PauseRecvStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.PauseRecvStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseRecvStreamRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void PauseRecvStreamRsp::InternalSwap(PauseRecvStreamRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PauseRecvStreamRsp, _impl_.result_)
      + sizeof(PauseRecvStreamRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(PauseRecvStreamRsp, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseRecvStreamRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[15]);
}

// ===================================================================

class ResumeRecvStreamReq::_Internal {
 public:
  using HasBits = decltype(std::declval<ResumeRecvStreamReq>()._impl_._has_bits_);
  static const ::jukey::prot::NetStream& stream(const ResumeRecvStreamReq* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::jukey::prot::NetStream&
ResumeRecvStreamReq::_Internal::stream(const ResumeRecvStreamReq* msg) {
  return *msg->_impl_.stream_;
}
void ResumeRecvStreamReq::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ResumeRecvStreamReq::ResumeRecvStreamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.ResumeRecvStreamReq)
}
ResumeRecvStreamReq::ResumeRecvStreamReq(const ResumeRecvStreamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResumeRecvStreamReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:jukey.prot.ResumeRecvStreamReq)
}

inline void ResumeRecvStreamReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){0u}
  };
}

ResumeRecvStreamReq::~ResumeRecvStreamReq() {
  // @@protoc_insertion_point(destructor:jukey.prot.ResumeRecvStreamReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResumeRecvStreamReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void ResumeRecvStreamReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResumeRecvStreamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.ResumeRecvStreamReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stream_ != nullptr);
    _impl_.stream_->Clear();
  }
  _impl_.channel_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResumeRecvStreamReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.NetStream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResumeRecvStreamReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.ResumeRecvStreamReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.NetStream stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.ResumeRecvStreamReq)
  return target;
}

size_t ResumeRecvStreamReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.ResumeRecvStreamReq)
  size_t total_size = 0;

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  return total_size;
}
size_t ResumeRecvStreamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.ResumeRecvStreamReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResumeRecvStreamReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResumeRecvStreamReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResumeRecvStreamReq::GetClassData() const { return &_class_data_; }


void ResumeRecvStreamReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResumeRecvStreamReq*>(&to_msg);
  auto& from = static_cast<const ResumeRecvStreamReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.ResumeRecvStreamReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResumeRecvStreamReq::CopyFrom(const ResumeRecvStreamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.ResumeRecvStreamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeRecvStreamReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void ResumeRecvStreamReq::InternalSwap(ResumeRecvStreamReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResumeRecvStreamReq, _impl_.channel_id_)
      + sizeof(ResumeRecvStreamReq::_impl_.channel_id_)
      - PROTOBUF_FIELD_OFFSET(ResumeRecvStreamReq, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResumeRecvStreamReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[16]);
}

// ===================================================================

class ResumeRecvStreamRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<ResumeRecvStreamRsp>()._impl_._has_bits_);
  static const ::jukey::prot::NetStream& stream(const ResumeRecvStreamRsp* msg);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::jukey::prot::NetStream&
ResumeRecvStreamRsp::_Internal::stream(const ResumeRecvStreamRsp* msg) {
  return *msg->_impl_.stream_;
}
void ResumeRecvStreamRsp::clear_stream() {
  if (_impl_.stream_ != nullptr) _impl_.stream_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResumeRecvStreamRsp::ResumeRecvStreamRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:jukey.prot.ResumeRecvStreamRsp)
}
ResumeRecvStreamRsp::ResumeRecvStreamRsp(const ResumeRecvStreamRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResumeRecvStreamRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::jukey::prot::NetStream(*from._impl_.stream_);
  }
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:jukey.prot.ResumeRecvStreamRsp)
}

inline void ResumeRecvStreamRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.channel_id_){0u}
    , decltype(_impl_.result_){0u}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResumeRecvStreamRsp::~ResumeRecvStreamRsp() {
  // @@protoc_insertion_point(destructor:jukey.prot.ResumeRecvStreamRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResumeRecvStreamRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stream_;
}

void ResumeRecvStreamRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResumeRecvStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:jukey.prot.ResumeRecvStreamRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stream_ != nullptr);
      _impl_.stream_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_) -
        reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResumeRecvStreamRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .jukey.prot.NetStream stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "jukey.prot.ResumeRecvStreamRsp.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResumeRecvStreamRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jukey.prot.ResumeRecvStreamRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .jukey.prot.NetStream stream = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // required uint32 channel_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_id(), target);
  }

  // required uint32 result = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result(), target);
  }

  // required string msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "jukey.prot.ResumeRecvStreamRsp.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jukey.prot.ResumeRecvStreamRsp)
  return target;
}

size_t ResumeRecvStreamRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jukey.prot.ResumeRecvStreamRsp)
  size_t total_size = 0;

  if (_internal_has_msg()) {
    // required string msg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (_internal_has_stream()) {
    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  if (_internal_has_channel_id()) {
    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());
  }

  if (_internal_has_result()) {
    // required uint32 result = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return total_size;
}
size_t ResumeRecvStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jukey.prot.ResumeRecvStreamRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string msg = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());

    // required .jukey.prot.NetStream stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);

    // required uint32 channel_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_id());

    // required uint32 result = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResumeRecvStreamRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResumeRecvStreamRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResumeRecvStreamRsp::GetClassData() const { return &_class_data_; }


void ResumeRecvStreamRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResumeRecvStreamRsp*>(&to_msg);
  auto& from = static_cast<const ResumeRecvStreamRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jukey.prot.ResumeRecvStreamRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stream()->::jukey::prot::NetStream::MergeFrom(
          from._internal_stream());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.channel_id_ = from._impl_.channel_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResumeRecvStreamRsp::CopyFrom(const ResumeRecvStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jukey.prot.ResumeRecvStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeRecvStreamRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_stream()) {
    if (!_impl_.stream_->IsInitialized()) return false;
  }
  return true;
}

void ResumeRecvStreamRsp::InternalSwap(ResumeRecvStreamRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResumeRecvStreamRsp, _impl_.result_)
      + sizeof(ResumeRecvStreamRsp::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(ResumeRecvStreamRsp, _impl_.stream_)>(
          reinterpret_cast<char*>(&_impl_.stream_),
          reinterpret_cast<char*>(&other->_impl_.stream_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResumeRecvStreamRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_2eproto_getter, &descriptor_table_transport_2eproto_once,
      file_level_metadata_transport_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prot
}  // namespace jukey
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jukey::prot::LoginSendChannelReq*
Arena::CreateMaybeMessage< ::jukey::prot::LoginSendChannelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LoginSendChannelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LoginSendChannelRsp*
Arena::CreateMaybeMessage< ::jukey::prot::LoginSendChannelRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LoginSendChannelRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LogoutSendChannelReq*
Arena::CreateMaybeMessage< ::jukey::prot::LogoutSendChannelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LogoutSendChannelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LogoutSendChannelRsp*
Arena::CreateMaybeMessage< ::jukey::prot::LogoutSendChannelRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LogoutSendChannelRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LoginRecvChannelReq*
Arena::CreateMaybeMessage< ::jukey::prot::LoginRecvChannelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LoginRecvChannelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LoginRecvChannelRsp*
Arena::CreateMaybeMessage< ::jukey::prot::LoginRecvChannelRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LoginRecvChannelRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LogoutRecvChannelReq*
Arena::CreateMaybeMessage< ::jukey::prot::LogoutRecvChannelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LogoutRecvChannelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::LogoutRecvChannelRsp*
Arena::CreateMaybeMessage< ::jukey::prot::LogoutRecvChannelRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::LogoutRecvChannelRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::NegotiateReq*
Arena::CreateMaybeMessage< ::jukey::prot::NegotiateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::NegotiateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::NegotiateRsp*
Arena::CreateMaybeMessage< ::jukey::prot::NegotiateRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::NegotiateRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::StartSendStreamNotify*
Arena::CreateMaybeMessage< ::jukey::prot::StartSendStreamNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::StartSendStreamNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::StartSendStreamAck*
Arena::CreateMaybeMessage< ::jukey::prot::StartSendStreamAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::StartSendStreamAck >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::StopSendStreamNotify*
Arena::CreateMaybeMessage< ::jukey::prot::StopSendStreamNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::StopSendStreamNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::StopSendStreamAck*
Arena::CreateMaybeMessage< ::jukey::prot::StopSendStreamAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::StopSendStreamAck >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::PauseRecvStreamReq*
Arena::CreateMaybeMessage< ::jukey::prot::PauseRecvStreamReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::PauseRecvStreamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::PauseRecvStreamRsp*
Arena::CreateMaybeMessage< ::jukey::prot::PauseRecvStreamRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::PauseRecvStreamRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::ResumeRecvStreamReq*
Arena::CreateMaybeMessage< ::jukey::prot::ResumeRecvStreamReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::ResumeRecvStreamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jukey::prot::ResumeRecvStreamRsp*
Arena::CreateMaybeMessage< ::jukey::prot::ResumeRecvStreamRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jukey::prot::ResumeRecvStreamRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
